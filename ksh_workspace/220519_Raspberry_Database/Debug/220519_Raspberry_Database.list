
220519_Raspberry_Database.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000298c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b00  08002b00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b00  08002b00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b00  08002b00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08002b78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002b78  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ed6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ac  00000000  00000000  00029f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002c390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d7b  00000000  00000000  0002ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b29c  00000000  00000000  00043be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000880f3  00000000  00000000  0004ee7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d0  00000000  00000000  000d6fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a80 	.word	0x08002a80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002a80 	.word	0x08002a80

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t switch_state[3];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
	switch_state[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000168:	481b      	ldr	r0, [pc, #108]	; (80001d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800016a:	f000 fdbf 	bl	8000cec <HAL_GPIO_ReadPin>
 800016e:	4603      	mov	r3, r0
 8000170:	461a      	mov	r2, r3
 8000172:	4b1a      	ldr	r3, [pc, #104]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000174:	701a      	strb	r2, [r3, #0]
	switch_state[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000176:	2110      	movs	r1, #16
 8000178:	4819      	ldr	r0, [pc, #100]	; (80001e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800017a:	f000 fdb7 	bl	8000cec <HAL_GPIO_ReadPin>
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b16      	ldr	r3, [pc, #88]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000184:	705a      	strb	r2, [r3, #1]
	switch_state[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000186:	2120      	movs	r1, #32
 8000188:	4815      	ldr	r0, [pc, #84]	; (80001e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800018a:	f000 fdaf 	bl	8000cec <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	461a      	mov	r2, r3
 8000192:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000194:	709a      	strb	r2, [r3, #2]
	char temp[6];
	sprintf(temp,"%d:%d:%dL",switch_state[0],switch_state[1],switch_state[2]);
 8000196:	4b11      	ldr	r3, [pc, #68]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	461a      	mov	r2, r3
 800019c:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800019e:	785b      	ldrb	r3, [r3, #1]
 80001a0:	4619      	mov	r1, r3
 80001a2:	4b0e      	ldr	r3, [pc, #56]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80001a4:	789b      	ldrb	r3, [r3, #2]
 80001a6:	f107 0008 	add.w	r0, r7, #8
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	460b      	mov	r3, r1
 80001ae:	490d      	ldr	r1, [pc, #52]	; (80001e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80001b0:	f001 ffec 	bl	800218c <siprintf>
	HAL_UART_Transmit(&huart2, temp, strlen(temp), 10);
 80001b4:	f107 0308 	add.w	r3, r7, #8
 80001b8:	4618      	mov	r0, r3
 80001ba:	f7ff ffc7 	bl	800014c <strlen>
 80001be:	4603      	mov	r3, r0
 80001c0:	b29a      	uxth	r2, r3
 80001c2:	f107 0108 	add.w	r1, r7, #8
 80001c6:	230a      	movs	r3, #10
 80001c8:	4807      	ldr	r0, [pc, #28]	; (80001e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80001ca:	f001 fe42 	bl	8001e52 <HAL_UART_Transmit>
}
 80001ce:	bf00      	nop
 80001d0:	3710      	adds	r7, #16
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40010800 	.word	0x40010800
 80001dc:	20000118 	.word	0x20000118
 80001e0:	40010c00 	.word	0x40010c00
 80001e4:	08002a98 	.word	0x08002a98
 80001e8:	200000d4 	.word	0x200000d4

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fa88 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f80c 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f8c4 	bl	8000384 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001fc:	f000 f898 	bl	8000330 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000200:	f000 f848 	bl	8000294 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000204:	4801      	ldr	r0, [pc, #4]	; (800020c <main+0x20>)
 8000206:	f001 fa2d 	bl	8001664 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020a:	e7fe      	b.n	800020a <main+0x1e>
 800020c:	2000008c 	.word	0x2000008c

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 ffac 	bl	800217c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2302      	movs	r3, #2
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000242:	2300      	movs	r3, #0
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000246:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fd9d 	bl	8000d90 <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800025c:	f000 f91c 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 f80a 	bl	8001294 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000286:	f000 f907 	bl	8000498 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029a:	f107 0308 	add.w	r3, r7, #8
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a8:	463b      	mov	r3, r7
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <MX_TIM2_Init+0x98>)
 80002b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <MX_TIM2_Init+0x98>)
 80002ba:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80002be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_TIM2_Init+0x98>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80002c6:	4b19      	ldr	r3, [pc, #100]	; (800032c <MX_TIM2_Init+0x98>)
 80002c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_TIM2_Init+0x98>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_TIM2_Init+0x98>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002da:	4814      	ldr	r0, [pc, #80]	; (800032c <MX_TIM2_Init+0x98>)
 80002dc:	f001 f972 	bl	80015c4 <HAL_TIM_Base_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002e6:	f000 f8d7 	bl	8000498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002f0:	f107 0308 	add.w	r3, r7, #8
 80002f4:	4619      	mov	r1, r3
 80002f6:	480d      	ldr	r0, [pc, #52]	; (800032c <MX_TIM2_Init+0x98>)
 80002f8:	f001 fb0e 	bl	8001918 <HAL_TIM_ConfigClockSource>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000302:	f000 f8c9 	bl	8000498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000306:	2300      	movs	r3, #0
 8000308:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800030e:	463b      	mov	r3, r7
 8000310:	4619      	mov	r1, r3
 8000312:	4806      	ldr	r0, [pc, #24]	; (800032c <MX_TIM2_Init+0x98>)
 8000314:	f001 fce0 	bl	8001cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800031e:	f000 f8bb 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000008c 	.word	0x2000008c

08000330 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_USART2_UART_Init+0x50>)
 8000338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <MX_USART2_UART_Init+0x4c>)
 800033c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_USART2_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_USART2_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000368:	f001 fd26 	bl	8001db8 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000372:	f000 f891 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000d4 	.word	0x200000d4
 8000380:	40004400 	.word	0x40004400

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000398:	4b3a      	ldr	r3, [pc, #232]	; (8000484 <MX_GPIO_Init+0x100>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a39      	ldr	r2, [pc, #228]	; (8000484 <MX_GPIO_Init+0x100>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b37      	ldr	r3, [pc, #220]	; (8000484 <MX_GPIO_Init+0x100>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0310 	and.w	r3, r3, #16
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <MX_GPIO_Init+0x100>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a33      	ldr	r2, [pc, #204]	; (8000484 <MX_GPIO_Init+0x100>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <MX_GPIO_Init+0x100>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0320 	and.w	r3, r3, #32
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <MX_GPIO_Init+0x100>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a2d      	ldr	r2, [pc, #180]	; (8000484 <MX_GPIO_Init+0x100>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b2b      	ldr	r3, [pc, #172]	; (8000484 <MX_GPIO_Init+0x100>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b28      	ldr	r3, [pc, #160]	; (8000484 <MX_GPIO_Init+0x100>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a27      	ldr	r2, [pc, #156]	; (8000484 <MX_GPIO_Init+0x100>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <MX_GPIO_Init+0x100>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2120      	movs	r1, #32
 80003fc:	4822      	ldr	r0, [pc, #136]	; (8000488 <MX_GPIO_Init+0x104>)
 80003fe:	f000 fc8c 	bl	8000d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <MX_GPIO_Init+0x108>)
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	481e      	ldr	r0, [pc, #120]	; (8000490 <MX_GPIO_Init+0x10c>)
 8000418:	f000 fae4 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800041c:	2320      	movs	r3, #32
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2302      	movs	r3, #2
 800042a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4815      	ldr	r0, [pc, #84]	; (8000488 <MX_GPIO_Init+0x104>)
 8000434:	f000 fad6 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800043c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	480e      	ldr	r0, [pc, #56]	; (8000488 <MX_GPIO_Init+0x104>)
 800044e:	f000 fac9 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000452:	2330      	movs	r3, #48	; 0x30
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	480b      	ldr	r0, [pc, #44]	; (8000494 <MX_GPIO_Init+0x110>)
 8000466:	f000 fabd 	bl	80009e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	2028      	movs	r0, #40	; 0x28
 8000470:	f000 fa81 	bl	8000976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000474:	2028      	movs	r0, #40	; 0x28
 8000476:	f000 fa9a 	bl	80009ae <HAL_NVIC_EnableIRQ>

}
 800047a:	bf00      	nop
 800047c:	3720      	adds	r7, #32
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800
 800048c:	10110000 	.word	0x10110000
 8000490:	40011000 	.word	0x40011000
 8000494:	40010c00 	.word	0x40010c00

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <Error_Handler+0x8>
	...

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a14      	ldr	r2, [pc, #80]	; (8000500 <HAL_MspInit+0x5c>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <HAL_MspInit+0x5c>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_MspInit+0x60>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_MspInit+0x60>)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000
 8000504:	40010000 	.word	0x40010000

08000508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000518:	d113      	bne.n	8000542 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_TIM_Base_MspInit+0x44>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <HAL_TIM_Base_MspInit+0x44>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_TIM_Base_MspInit+0x44>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	201c      	movs	r0, #28
 8000538:	f000 fa1d 	bl	8000976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800053c:	201c      	movs	r0, #28
 800053e:	f000 fa36 	bl	80009ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <HAL_UART_MspInit+0x70>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d123      	bne.n	80005b8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <HAL_UART_MspInit+0x74>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <HAL_UART_MspInit+0x74>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057a:	61d3      	str	r3, [r2, #28]
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_UART_MspInit+0x74>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_UART_MspInit+0x74>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <HAL_UART_MspInit+0x74>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_UART_MspInit+0x74>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a0:	230c      	movs	r3, #12
 80005a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <HAL_UART_MspInit+0x78>)
 80005b4:	f000 fa16 	bl	80009e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40004400 	.word	0x40004400
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010800 	.word	0x40010800

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <NMI_Handler+0x4>

080005d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <MemManage_Handler+0x4>

080005de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000612:	f000 f8bd 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <TIM2_IRQHandler+0x10>)
 8000622:	f001 f871 	bl	8001708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000008c 	.word	0x2000008c

08000630 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000634:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000638:	f000 fb88 	bl	8000d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <_sbrk+0x5c>)
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <_sbrk+0x60>)
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <_sbrk+0x64>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <_sbrk+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	429a      	cmp	r2, r3
 800066e:	d207      	bcs.n	8000680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000670:	f001 fd5a 	bl	8002128 <__errno>
 8000674:	4603      	mov	r3, r0
 8000676:	220c      	movs	r2, #12
 8000678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	e009      	b.n	8000694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <_sbrk+0x64>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <_sbrk+0x64>)
 8000690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000692:	68fb      	ldr	r3, [r7, #12]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20005000 	.word	0x20005000
 80006a0:	00000400 	.word	0x00000400
 80006a4:	2000011c 	.word	0x2000011c
 80006a8:	20000138 	.word	0x20000138

080006ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	; (80006f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	; (80006fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006de:	f7ff ffe5 	bl	80006ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e2:	f001 fd27 	bl	8002134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e6:	f7ff fd81 	bl	80001ec <main>
  bx lr
 80006ea:	4770      	bx	lr
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006f4:	08002b08 	.word	0x08002b08
  ldr r2, =_sbss
 80006f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006fc:	20000134 	.word	0x20000134

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>
	...

08000704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_Init+0x28>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_Init+0x28>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000714:	2003      	movs	r0, #3
 8000716:	f000 f923 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f808 	bl	8000730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000720:	f7ff fec0 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40022000 	.word	0x40022000

08000730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x54>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_InitTick+0x58>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f93b 	bl	80009ca <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e00e      	b.n	800077c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d80a      	bhi.n	800077a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f000 f903 	bl	8000976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <HAL_InitTick+0x5c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e000      	b.n	800077c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	20000008 	.word	0x20000008
 800078c:	20000004 	.word	0x20000004

08000790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x1c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x20>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <HAL_IncTick+0x20>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000120 	.word	0x20000120

080007b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_GetTick+0x10>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000120 	.word	0x20000120

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <__NVIC_EnableIRQ+0x34>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800092c:	d301      	bcc.n	8000932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2301      	movs	r3, #1
 8000930:	e00f      	b.n	8000952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <SysTick_Config+0x40>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093a:	210f      	movs	r1, #15
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f7ff ff90 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <SysTick_Config+0x40>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <SysTick_Config+0x40>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010

08000960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff2d 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000988:	f7ff ff42 	bl	8000810 <__NVIC_GetPriorityGrouping>
 800098c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ff90 	bl	80008b8 <NVIC_EncodePriority>
 8000998:	4602      	mov	r2, r0
 800099a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff5f 	bl	8000864 <__NVIC_SetPriority>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff35 	bl	800082c <__NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ffa2 	bl	800091c <SysTick_Config>
 80009d8:	4603      	mov	r3, r0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b08b      	sub	sp, #44	; 0x2c
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f6:	e169      	b.n	8000ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f8:	2201      	movs	r2, #1
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	f040 8158 	bne.w	8000cc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4a9a      	ldr	r2, [pc, #616]	; (8000c84 <HAL_GPIO_Init+0x2a0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d05e      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a20:	4a98      	ldr	r2, [pc, #608]	; (8000c84 <HAL_GPIO_Init+0x2a0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d875      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a26:	4a98      	ldr	r2, [pc, #608]	; (8000c88 <HAL_GPIO_Init+0x2a4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d058      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a2c:	4a96      	ldr	r2, [pc, #600]	; (8000c88 <HAL_GPIO_Init+0x2a4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d86f      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a32:	4a96      	ldr	r2, [pc, #600]	; (8000c8c <HAL_GPIO_Init+0x2a8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d052      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a38:	4a94      	ldr	r2, [pc, #592]	; (8000c8c <HAL_GPIO_Init+0x2a8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d869      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a3e:	4a94      	ldr	r2, [pc, #592]	; (8000c90 <HAL_GPIO_Init+0x2ac>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d04c      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a44:	4a92      	ldr	r2, [pc, #584]	; (8000c90 <HAL_GPIO_Init+0x2ac>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d863      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a4a:	4a92      	ldr	r2, [pc, #584]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d046      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a50:	4a90      	ldr	r2, [pc, #576]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d85d      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a56:	2b12      	cmp	r3, #18
 8000a58:	d82a      	bhi.n	8000ab0 <HAL_GPIO_Init+0xcc>
 8000a5a:	2b12      	cmp	r3, #18
 8000a5c:	d859      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a5e:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <HAL_GPIO_Init+0x80>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000adf 	.word	0x08000adf
 8000a68:	08000ab9 	.word	0x08000ab9
 8000a6c:	08000acb 	.word	0x08000acb
 8000a70:	08000b0d 	.word	0x08000b0d
 8000a74:	08000b13 	.word	0x08000b13
 8000a78:	08000b13 	.word	0x08000b13
 8000a7c:	08000b13 	.word	0x08000b13
 8000a80:	08000b13 	.word	0x08000b13
 8000a84:	08000b13 	.word	0x08000b13
 8000a88:	08000b13 	.word	0x08000b13
 8000a8c:	08000b13 	.word	0x08000b13
 8000a90:	08000b13 	.word	0x08000b13
 8000a94:	08000b13 	.word	0x08000b13
 8000a98:	08000b13 	.word	0x08000b13
 8000a9c:	08000b13 	.word	0x08000b13
 8000aa0:	08000b13 	.word	0x08000b13
 8000aa4:	08000b13 	.word	0x08000b13
 8000aa8:	08000ac1 	.word	0x08000ac1
 8000aac:	08000ad5 	.word	0x08000ad5
 8000ab0:	4a79      	ldr	r2, [pc, #484]	; (8000c98 <HAL_GPIO_Init+0x2b4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d013      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab6:	e02c      	b.n	8000b12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	623b      	str	r3, [r7, #32]
          break;
 8000abe:	e029      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e024      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	3308      	adds	r3, #8
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e01f      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	330c      	adds	r3, #12
 8000ada:	623b      	str	r3, [r7, #32]
          break;
 8000adc:	e01a      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	623b      	str	r3, [r7, #32]
          break;
 8000aea:	e013      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d105      	bne.n	8000b00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af4:	2308      	movs	r3, #8
 8000af6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	611a      	str	r2, [r3, #16]
          break;
 8000afe:	e009      	b.n	8000b14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b00:	2308      	movs	r3, #8
 8000b02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	615a      	str	r2, [r3, #20]
          break;
 8000b0a:	e003      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          break;
 8000b12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	2bff      	cmp	r3, #255	; 0xff
 8000b18:	d801      	bhi.n	8000b1e <HAL_GPIO_Init+0x13a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	e001      	b.n	8000b22 <HAL_GPIO_Init+0x13e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3304      	adds	r3, #4
 8000b22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	2bff      	cmp	r3, #255	; 0xff
 8000b28:	d802      	bhi.n	8000b30 <HAL_GPIO_Init+0x14c>
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	e002      	b.n	8000b36 <HAL_GPIO_Init+0x152>
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	3b08      	subs	r3, #8
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	401a      	ands	r2, r3
 8000b48:	6a39      	ldr	r1, [r7, #32]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	431a      	orrs	r2, r3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 80b1 	beq.w	8000cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b64:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a4c      	ldr	r2, [pc, #304]	; (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b7c:	4a48      	ldr	r2, [pc, #288]	; (8000ca0 <HAL_GPIO_Init+0x2bc>)
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	3302      	adds	r3, #2
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	220f      	movs	r2, #15
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a40      	ldr	r2, [pc, #256]	; (8000ca4 <HAL_GPIO_Init+0x2c0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d013      	beq.n	8000bd0 <HAL_GPIO_Init+0x1ec>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a3f      	ldr	r2, [pc, #252]	; (8000ca8 <HAL_GPIO_Init+0x2c4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d00d      	beq.n	8000bcc <HAL_GPIO_Init+0x1e8>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <HAL_GPIO_Init+0x2c8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d007      	beq.n	8000bc8 <HAL_GPIO_Init+0x1e4>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3d      	ldr	r2, [pc, #244]	; (8000cb0 <HAL_GPIO_Init+0x2cc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d101      	bne.n	8000bc4 <HAL_GPIO_Init+0x1e0>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e006      	b.n	8000bd2 <HAL_GPIO_Init+0x1ee>
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	e004      	b.n	8000bd2 <HAL_GPIO_Init+0x1ee>
 8000bc8:	2302      	movs	r3, #2
 8000bca:	e002      	b.n	8000bd2 <HAL_GPIO_Init+0x1ee>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <HAL_GPIO_Init+0x1ee>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd4:	f002 0203 	and.w	r2, r2, #3
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	4093      	lsls	r3, r2
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000be2:	492f      	ldr	r1, [pc, #188]	; (8000ca0 <HAL_GPIO_Init+0x2bc>)
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	3302      	adds	r3, #2
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	492c      	ldr	r1, [pc, #176]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	600b      	str	r3, [r1, #0]
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4928      	ldr	r1, [pc, #160]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	4922      	ldr	r1, [pc, #136]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	604b      	str	r3, [r1, #4]
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	491e      	ldr	r1, [pc, #120]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	4918      	ldr	r1, [pc, #96]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4914      	ldr	r1, [pc, #80]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d021      	beq.n	8000cb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60cb      	str	r3, [r1, #12]
 8000c80:	e021      	b.n	8000cc6 <HAL_GPIO_Init+0x2e2>
 8000c82:	bf00      	nop
 8000c84:	10320000 	.word	0x10320000
 8000c88:	10310000 	.word	0x10310000
 8000c8c:	10220000 	.word	0x10220000
 8000c90:	10210000 	.word	0x10210000
 8000c94:	10120000 	.word	0x10120000
 8000c98:	10110000 	.word	0x10110000
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	40010c00 	.word	0x40010c00
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40011400 	.word	0x40011400
 8000cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_GPIO_Init+0x304>)
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <HAL_GPIO_Init+0x304>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	3301      	adds	r3, #1
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f47f ae8e 	bne.w	80009f8 <HAL_GPIO_Init+0x14>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	372c      	adds	r7, #44	; 0x2c
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d04:	2301      	movs	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e001      	b.n	8000d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	460b      	mov	r3, r1
 8000d24:	807b      	strh	r3, [r7, #2]
 8000d26:	4613      	mov	r3, r2
 8000d28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d2a:	787b      	ldrb	r3, [r7, #1]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d30:	887a      	ldrh	r2, [r7, #2]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d36:	e003      	b.n	8000d40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	041a      	lsls	r2, r3, #16
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	611a      	str	r2, [r3, #16]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f806 	bl	8000d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e272      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8087 	beq.w	8000ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db0:	4b92      	ldr	r3, [pc, #584]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d00c      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dbc:	4b8f      	ldr	r3, [pc, #572]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d112      	bne.n	8000dee <HAL_RCC_OscConfig+0x5e>
 8000dc8:	4b8c      	ldr	r3, [pc, #560]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd4:	d10b      	bne.n	8000dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd6:	4b89      	ldr	r3, [pc, #548]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d06c      	beq.n	8000ebc <HAL_RCC_OscConfig+0x12c>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d168      	bne.n	8000ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e24c      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df6:	d106      	bne.n	8000e06 <HAL_RCC_OscConfig+0x76>
 8000df8:	4b80      	ldr	r3, [pc, #512]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a7f      	ldr	r2, [pc, #508]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e02e      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x98>
 8000e0e:	4b7b      	ldr	r3, [pc, #492]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7a      	ldr	r2, [pc, #488]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b78      	ldr	r3, [pc, #480]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a77      	ldr	r2, [pc, #476]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e01d      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0xbc>
 8000e32:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a71      	ldr	r2, [pc, #452]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b6f      	ldr	r3, [pc, #444]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a6e      	ldr	r2, [pc, #440]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e00b      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e4c:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a6a      	ldr	r2, [pc, #424]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b68      	ldr	r3, [pc, #416]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a67      	ldr	r2, [pc, #412]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fca2 	bl	80007b4 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fc9e 	bl	80007b4 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	; 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e200      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e86:	4b5d      	ldr	r3, [pc, #372]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0xe4>
 8000e92:	e014      	b.n	8000ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc8e 	bl	80007b4 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fc8a 	bl	80007b4 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	; 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e1ec      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x10c>
 8000eba:	e000      	b.n	8000ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d063      	beq.n	8000f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ed6:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d11c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x18c>
 8000ee2:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d116      	bne.n	8000f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <HAL_RCC_OscConfig+0x176>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d001      	beq.n	8000f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e1c0      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4939      	ldr	r1, [pc, #228]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	e03a      	b.n	8000f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d020      	beq.n	8000f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_RCC_OscConfig+0x270>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fc43 	bl	80007b4 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f32:	f7ff fc3f 	bl	80007b4 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e1a1      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	4927      	ldr	r1, [pc, #156]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	600b      	str	r3, [r1, #0]
 8000f64:	e015      	b.n	8000f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_RCC_OscConfig+0x270>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc22 	bl	80007b4 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc1e 	bl	80007b4 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e180      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f0      	bne.n	8000f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d03a      	beq.n	8001014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d019      	beq.n	8000fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_RCC_OscConfig+0x274>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fc02 	bl	80007b4 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fbfe 	bl	80007b4 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e160      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 fad8 	bl	8001588 <RCC_Delay>
 8000fd8:	e01c      	b.n	8001014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_RCC_OscConfig+0x274>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe0:	f7ff fbe8 	bl	80007b4 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe6:	e00f      	b.n	8001008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fbe4 	bl	80007b4 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d908      	bls.n	8001008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e146      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	42420000 	.word	0x42420000
 8001004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001008:	4b92      	ldr	r3, [pc, #584]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e9      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a6 	beq.w	800116e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001026:	4b8b      	ldr	r3, [pc, #556]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10d      	bne.n	800104e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b88      	ldr	r3, [pc, #544]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a87      	ldr	r2, [pc, #540]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b85      	ldr	r3, [pc, #532]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104a:	2301      	movs	r3, #1
 800104c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104e:	4b82      	ldr	r3, [pc, #520]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d118      	bne.n	800108c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105a:	4b7f      	ldr	r3, [pc, #508]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a7e      	ldr	r2, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001066:	f7ff fba5 	bl	80007b4 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106e:	f7ff fba1 	bl	80007b4 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b64      	cmp	r3, #100	; 0x64
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e103      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001080:	4b75      	ldr	r3, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x312>
 8001094:	4b6f      	ldr	r3, [pc, #444]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a6e      	ldr	r2, [pc, #440]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	e02d      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x334>
 80010aa:	4b6a      	ldr	r3, [pc, #424]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a69      	ldr	r2, [pc, #420]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6213      	str	r3, [r2, #32]
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a66      	ldr	r2, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6213      	str	r3, [r2, #32]
 80010c2:	e01c      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d10c      	bne.n	80010e6 <HAL_RCC_OscConfig+0x356>
 80010cc:	4b61      	ldr	r3, [pc, #388]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a60      	ldr	r2, [pc, #384]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6213      	str	r3, [r2, #32]
 80010d8:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a5d      	ldr	r2, [pc, #372]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6213      	str	r3, [r2, #32]
 80010e4:	e00b      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a5a      	ldr	r2, [pc, #360]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a57      	ldr	r2, [pc, #348]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	f023 0304 	bic.w	r3, r3, #4
 80010fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d015      	beq.n	8001132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fb55 	bl	80007b4 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110e:	f7ff fb51 	bl	80007b4 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	f241 3288 	movw	r2, #5000	; 0x1388
 800111c:	4293      	cmp	r3, r2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e0b1      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0ee      	beq.n	800110e <HAL_RCC_OscConfig+0x37e>
 8001130:	e014      	b.n	800115c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fb3f 	bl	80007b4 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fb3b 	bl	80007b4 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e09b      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001150:	4b40      	ldr	r3, [pc, #256]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ee      	bne.n	800113a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d105      	bne.n	800116e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a3b      	ldr	r2, [pc, #236]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8087 	beq.w	8001286 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d061      	beq.n	8001248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d146      	bne.n	800121a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fb0f 	bl	80007b4 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fb0b 	bl	80007b4 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e06d      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d108      	bne.n	80011d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	4921      	ldr	r1, [pc, #132]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a19      	ldr	r1, [r3, #32]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	430b      	orrs	r3, r1
 80011e6:	491b      	ldr	r1, [pc, #108]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fadf 	bl	80007b4 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fa:	f7ff fadb 	bl	80007b4 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e03d      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x46a>
 8001218:	e035      	b.n	8001286 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fac8 	bl	80007b4 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001228:	f7ff fac4 	bl	80007b4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e026      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x498>
 8001246:	e01e      	b.n	8001286 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d107      	bne.n	8001260 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e019      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
 8001254:	40021000 	.word	0x40021000
 8001258:	40007000 	.word	0x40007000
 800125c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_OscConfig+0x500>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	429a      	cmp	r2, r3
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	429a      	cmp	r2, r3
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0d0      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a8:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d910      	bls.n	80012d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 0207 	bic.w	r2, r3, #7
 80012be:	4965      	ldr	r1, [pc, #404]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0b8      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	494d      	ldr	r1, [pc, #308]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d040      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d115      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e07f      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e073      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e06b      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f023 0203 	bic.w	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4936      	ldr	r1, [pc, #216]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001384:	f7ff fa16 	bl	80007b4 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138c:	f7ff fa12 	bl	80007b4 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	; 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e053      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 020c 	and.w	r2, r3, #12
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1eb      	bne.n	800138c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d210      	bcs.n	80013e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 0207 	bic.w	r2, r3, #7
 80013ca:	4922      	ldr	r1, [pc, #136]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e032      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001422:	f000 f821 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 8001426:	4602      	mov	r2, r0
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <HAL_RCC_ClockConfig+0x1c8>)
 8001434:	5ccb      	ldrb	r3, [r1, r3]
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x1cc>)
 800143c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1d0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f974 	bl	8000730 <HAL_InitTick>

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000
 8001458:	40021000 	.word	0x40021000
 800145c:	08002ab4 	.word	0x08002ab4
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001468:	b490      	push	{r4, r7}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800146e:	4b29      	ldr	r3, [pc, #164]	; (8001514 <HAL_RCC_GetSysClockFreq+0xac>)
 8001470:	1d3c      	adds	r4, r7, #4
 8001472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001478:	f240 2301 	movw	r3, #513	; 0x201
 800147c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d002      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x40>
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d003      	beq.n	80014ae <HAL_RCC_GetSysClockFreq+0x46>
 80014a6:	e02b      	b.n	8001500 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_RCC_GetSysClockFreq+0xb4>)
 80014aa:	623b      	str	r3, [r7, #32]
      break;
 80014ac:	e02b      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	0c9b      	lsrs	r3, r3, #18
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3328      	adds	r3, #40	; 0x28
 80014b8:	443b      	add	r3, r7
 80014ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d012      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	0c5b      	lsrs	r3, r3, #17
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	3328      	adds	r3, #40	; 0x28
 80014d6:	443b      	add	r3, r7
 80014d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <HAL_RCC_GetSysClockFreq+0xb4>)
 80014e2:	fb03 f202 	mul.w	r2, r3, r2
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
 80014ee:	e004      	b.n	80014fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	623b      	str	r3, [r7, #32]
      break;
 80014fe:	e002      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001502:	623b      	str	r3, [r7, #32]
      break;
 8001504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001506:	6a3b      	ldr	r3, [r7, #32]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bc90      	pop	{r4, r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	08002aa4 	.word	0x08002aa4
 8001518:	40021000 	.word	0x40021000
 800151c:	007a1200 	.word	0x007a1200
 8001520:	003d0900 	.word	0x003d0900

08001524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <HAL_RCC_GetHCLKFreq+0x10>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800153c:	f7ff fff2 	bl	8001524 <HAL_RCC_GetHCLKFreq>
 8001540:	4602      	mov	r2, r0
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	4903      	ldr	r1, [pc, #12]	; (800155c <HAL_RCC_GetPCLK1Freq+0x24>)
 800154e:	5ccb      	ldrb	r3, [r1, r3]
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	08002ac4 	.word	0x08002ac4

08001560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001564:	f7ff ffde 	bl	8001524 <HAL_RCC_GetHCLKFreq>
 8001568:	4602      	mov	r2, r0
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	0adb      	lsrs	r3, r3, #11
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	4903      	ldr	r1, [pc, #12]	; (8001584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001576:	5ccb      	ldrb	r3, [r1, r3]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	08002ac4 	.word	0x08002ac4

08001588 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <RCC_Delay+0x34>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <RCC_Delay+0x38>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0a5b      	lsrs	r3, r3, #9
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015a4:	bf00      	nop
  }
  while (Delay --);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	60fa      	str	r2, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f9      	bne.n	80015a4 <RCC_Delay+0x1c>
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000000 	.word	0x20000000
 80015c0:	10624dd3 	.word	0x10624dd3

080015c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e041      	b.n	800165a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7fe ff8c 	bl	8000508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3304      	adds	r3, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f000 fa70 	bl	8001ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d001      	beq.n	800167c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e03a      	b.n	80016f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_TIM_Base_Start_IT+0x98>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00e      	beq.n	80016bc <HAL_TIM_Base_Start_IT+0x58>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a6:	d009      	beq.n	80016bc <HAL_TIM_Base_Start_IT+0x58>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_TIM_Base_Start_IT+0x9c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d004      	beq.n	80016bc <HAL_TIM_Base_Start_IT+0x58>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <HAL_TIM_Base_Start_IT+0xa0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d111      	bne.n	80016e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d010      	beq.n	80016f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0201 	orr.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016de:	e007      	b.n	80016f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40000400 	.word	0x40000400
 8001704:	40000800 	.word	0x40000800

08001708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b02      	cmp	r3, #2
 800171c:	d122      	bne.n	8001764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b02      	cmp	r3, #2
 800172a:	d11b      	bne.n	8001764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f06f 0202 	mvn.w	r2, #2
 8001734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f9b1 	bl	8001ab2 <HAL_TIM_IC_CaptureCallback>
 8001750:	e005      	b.n	800175e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f9a4 	bl	8001aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f9b3 	bl	8001ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b04      	cmp	r3, #4
 8001770:	d122      	bne.n	80017b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b04      	cmp	r3, #4
 800177e:	d11b      	bne.n	80017b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f06f 0204 	mvn.w	r2, #4
 8001788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2202      	movs	r2, #2
 800178e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f987 	bl	8001ab2 <HAL_TIM_IC_CaptureCallback>
 80017a4:	e005      	b.n	80017b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f97a 	bl	8001aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f989 	bl	8001ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d122      	bne.n	800180c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d11b      	bne.n	800180c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f06f 0208 	mvn.w	r2, #8
 80017dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2204      	movs	r2, #4
 80017e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f95d 	bl	8001ab2 <HAL_TIM_IC_CaptureCallback>
 80017f8:	e005      	b.n	8001806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f950 	bl	8001aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f95f 	bl	8001ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b10      	cmp	r3, #16
 8001818:	d122      	bne.n	8001860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b10      	cmp	r3, #16
 8001826:	d11b      	bne.n	8001860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f06f 0210 	mvn.w	r2, #16
 8001830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2208      	movs	r2, #8
 8001836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f933 	bl	8001ab2 <HAL_TIM_IC_CaptureCallback>
 800184c:	e005      	b.n	800185a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f926 	bl	8001aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f935 	bl	8001ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d10e      	bne.n	800188c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d107      	bne.n	800188c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0201 	mvn.w	r2, #1
 8001884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe fc68 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	2b80      	cmp	r3, #128	; 0x80
 8001898:	d10e      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a4:	2b80      	cmp	r3, #128	; 0x80
 80018a6:	d107      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fa77 	bl	8001da6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c2:	2b40      	cmp	r3, #64	; 0x40
 80018c4:	d10e      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d0:	2b40      	cmp	r3, #64	; 0x40
 80018d2:	d107      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f8f9 	bl	8001ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d107      	bne.n	8001910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0220 	mvn.w	r2, #32
 8001908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fa42 	bl	8001d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_TIM_ConfigClockSource+0x18>
 800192c:	2302      	movs	r3, #2
 800192e:	e0b3      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x180>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800194e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001956:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001968:	d03e      	beq.n	80019e8 <HAL_TIM_ConfigClockSource+0xd0>
 800196a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800196e:	f200 8087 	bhi.w	8001a80 <HAL_TIM_ConfigClockSource+0x168>
 8001972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001976:	f000 8085 	beq.w	8001a84 <HAL_TIM_ConfigClockSource+0x16c>
 800197a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197e:	d87f      	bhi.n	8001a80 <HAL_TIM_ConfigClockSource+0x168>
 8001980:	2b70      	cmp	r3, #112	; 0x70
 8001982:	d01a      	beq.n	80019ba <HAL_TIM_ConfigClockSource+0xa2>
 8001984:	2b70      	cmp	r3, #112	; 0x70
 8001986:	d87b      	bhi.n	8001a80 <HAL_TIM_ConfigClockSource+0x168>
 8001988:	2b60      	cmp	r3, #96	; 0x60
 800198a:	d050      	beq.n	8001a2e <HAL_TIM_ConfigClockSource+0x116>
 800198c:	2b60      	cmp	r3, #96	; 0x60
 800198e:	d877      	bhi.n	8001a80 <HAL_TIM_ConfigClockSource+0x168>
 8001990:	2b50      	cmp	r3, #80	; 0x50
 8001992:	d03c      	beq.n	8001a0e <HAL_TIM_ConfigClockSource+0xf6>
 8001994:	2b50      	cmp	r3, #80	; 0x50
 8001996:	d873      	bhi.n	8001a80 <HAL_TIM_ConfigClockSource+0x168>
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d058      	beq.n	8001a4e <HAL_TIM_ConfigClockSource+0x136>
 800199c:	2b40      	cmp	r3, #64	; 0x40
 800199e:	d86f      	bhi.n	8001a80 <HAL_TIM_ConfigClockSource+0x168>
 80019a0:	2b30      	cmp	r3, #48	; 0x30
 80019a2:	d064      	beq.n	8001a6e <HAL_TIM_ConfigClockSource+0x156>
 80019a4:	2b30      	cmp	r3, #48	; 0x30
 80019a6:	d86b      	bhi.n	8001a80 <HAL_TIM_ConfigClockSource+0x168>
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	d060      	beq.n	8001a6e <HAL_TIM_ConfigClockSource+0x156>
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d867      	bhi.n	8001a80 <HAL_TIM_ConfigClockSource+0x168>
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d05c      	beq.n	8001a6e <HAL_TIM_ConfigClockSource+0x156>
 80019b4:	2b10      	cmp	r3, #16
 80019b6:	d05a      	beq.n	8001a6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80019b8:	e062      	b.n	8001a80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f000 f966 	bl	8001c9a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80019dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	609a      	str	r2, [r3, #8]
      break;
 80019e6:	e04e      	b.n	8001a86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6899      	ldr	r1, [r3, #8]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f000 f94f 	bl	8001c9a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a0a:	609a      	str	r2, [r3, #8]
      break;
 8001a0c:	e03b      	b.n	8001a86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f000 f8c6 	bl	8001bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2150      	movs	r1, #80	; 0x50
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f91d 	bl	8001c66 <TIM_ITRx_SetConfig>
      break;
 8001a2c:	e02b      	b.n	8001a86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f000 f8e4 	bl	8001c08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2160      	movs	r1, #96	; 0x60
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f90d 	bl	8001c66 <TIM_ITRx_SetConfig>
      break;
 8001a4c:	e01b      	b.n	8001a86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f000 f8a6 	bl	8001bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2140      	movs	r1, #64	; 0x40
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f8fd 	bl	8001c66 <TIM_ITRx_SetConfig>
      break;
 8001a6c:	e00b      	b.n	8001a86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f000 f8f4 	bl	8001c66 <TIM_ITRx_SetConfig>
        break;
 8001a7e:	e002      	b.n	8001a86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <TIM_Base_SetConfig+0xb8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00b      	beq.n	8001b18 <TIM_Base_SetConfig+0x30>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b06:	d007      	beq.n	8001b18 <TIM_Base_SetConfig+0x30>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <TIM_Base_SetConfig+0xbc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <TIM_Base_SetConfig+0x30>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <TIM_Base_SetConfig+0xc0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d108      	bne.n	8001b2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ba0 <TIM_Base_SetConfig+0xb8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00b      	beq.n	8001b4a <TIM_Base_SetConfig+0x62>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d007      	beq.n	8001b4a <TIM_Base_SetConfig+0x62>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <TIM_Base_SetConfig+0xbc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <TIM_Base_SetConfig+0x62>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <TIM_Base_SetConfig+0xc0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d108      	bne.n	8001b5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <TIM_Base_SetConfig+0xb8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d103      	bne.n	8001b90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	615a      	str	r2, [r3, #20]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800

08001bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	f023 0201 	bic.w	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f023 030a 	bic.w	r3, r3, #10
 8001be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	621a      	str	r2, [r3, #32]
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f023 0210 	bic.w	r2, r3, #16
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	031b      	lsls	r3, r3, #12
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	621a      	str	r2, [r3, #32]
}
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f043 0307 	orr.w	r3, r3, #7
 8001c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b087      	sub	sp, #28
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	021a      	lsls	r2, r3, #8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	609a      	str	r2, [r3, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e046      	b.n	8001d7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d009      	beq.n	8001d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10c      	bne.n	8001d6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40012c00 	.word	0x40012c00
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800

08001d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e03f      	b.n	8001e4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fbb6 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f905 	bl	800200c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b08a      	sub	sp, #40	; 0x28
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d17c      	bne.n	8001f6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_UART_Transmit+0x2c>
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e075      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_UART_Transmit+0x3e>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e06e      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2221      	movs	r2, #33	; 0x21
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ea6:	f7fe fc85 	bl	80007b4 <HAL_GetTick>
 8001eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec0:	d108      	bne.n	8001ed4 <HAL_UART_Transmit+0x82>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d104      	bne.n	8001ed4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	e003      	b.n	8001edc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ee4:	e02a      	b.n	8001f3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2200      	movs	r2, #0
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f840 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e036      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10b      	bne.n	8001f1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	3302      	adds	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	e007      	b.n	8001f2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1cf      	bne.n	8001ee6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2140      	movs	r1, #64	; 0x40
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f810 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e006      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f86:	e02c      	b.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8e:	d028      	beq.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f96:	f7fe fc0d 	bl	80007b4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d21d      	bcs.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fb4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e00f      	b.n	8002002 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d0c3      	beq.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002046:	f023 030c 	bic.w	r3, r3, #12
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	430b      	orrs	r3, r1
 8002052:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2c      	ldr	r2, [pc, #176]	; (8002120 <UART_SetConfig+0x114>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002074:	f7ff fa74 	bl	8001560 <HAL_RCC_GetPCLK2Freq>
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	e002      	b.n	8002082 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800207c:	f7ff fa5c 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8002080:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009a      	lsls	r2, r3, #2
 800208c:	441a      	add	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	4a22      	ldr	r2, [pc, #136]	; (8002124 <UART_SetConfig+0x118>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	0119      	lsls	r1, r3, #4
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009a      	lsls	r2, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <UART_SetConfig+0x118>)
 80020ba:	fba3 0302 	umull	r0, r3, r3, r2
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2064      	movs	r0, #100	; 0x64
 80020c2:	fb00 f303 	mul.w	r3, r0, r3
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	3332      	adds	r3, #50	; 0x32
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <UART_SetConfig+0x118>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d8:	4419      	add	r1, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009a      	lsls	r2, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <UART_SetConfig+0x118>)
 80020f2:	fba3 0302 	umull	r0, r3, r3, r2
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2064      	movs	r0, #100	; 0x64
 80020fa:	fb00 f303 	mul.w	r3, r0, r3
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	3332      	adds	r3, #50	; 0x32
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <UART_SetConfig+0x118>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	f003 020f 	and.w	r2, r3, #15
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	440a      	add	r2, r1
 8002116:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40013800 	.word	0x40013800
 8002124:	51eb851f 	.word	0x51eb851f

08002128 <__errno>:
 8002128:	4b01      	ldr	r3, [pc, #4]	; (8002130 <__errno+0x8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	2000000c 	.word	0x2000000c

08002134 <__libc_init_array>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	2600      	movs	r6, #0
 8002138:	4d0c      	ldr	r5, [pc, #48]	; (800216c <__libc_init_array+0x38>)
 800213a:	4c0d      	ldr	r4, [pc, #52]	; (8002170 <__libc_init_array+0x3c>)
 800213c:	1b64      	subs	r4, r4, r5
 800213e:	10a4      	asrs	r4, r4, #2
 8002140:	42a6      	cmp	r6, r4
 8002142:	d109      	bne.n	8002158 <__libc_init_array+0x24>
 8002144:	f000 fc9c 	bl	8002a80 <_init>
 8002148:	2600      	movs	r6, #0
 800214a:	4d0a      	ldr	r5, [pc, #40]	; (8002174 <__libc_init_array+0x40>)
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <__libc_init_array+0x44>)
 800214e:	1b64      	subs	r4, r4, r5
 8002150:	10a4      	asrs	r4, r4, #2
 8002152:	42a6      	cmp	r6, r4
 8002154:	d105      	bne.n	8002162 <__libc_init_array+0x2e>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f855 3b04 	ldr.w	r3, [r5], #4
 800215c:	4798      	blx	r3
 800215e:	3601      	adds	r6, #1
 8002160:	e7ee      	b.n	8002140 <__libc_init_array+0xc>
 8002162:	f855 3b04 	ldr.w	r3, [r5], #4
 8002166:	4798      	blx	r3
 8002168:	3601      	adds	r6, #1
 800216a:	e7f2      	b.n	8002152 <__libc_init_array+0x1e>
 800216c:	08002b00 	.word	0x08002b00
 8002170:	08002b00 	.word	0x08002b00
 8002174:	08002b00 	.word	0x08002b00
 8002178:	08002b04 	.word	0x08002b04

0800217c <memset>:
 800217c:	4603      	mov	r3, r0
 800217e:	4402      	add	r2, r0
 8002180:	4293      	cmp	r3, r2
 8002182:	d100      	bne.n	8002186 <memset+0xa>
 8002184:	4770      	bx	lr
 8002186:	f803 1b01 	strb.w	r1, [r3], #1
 800218a:	e7f9      	b.n	8002180 <memset+0x4>

0800218c <siprintf>:
 800218c:	b40e      	push	{r1, r2, r3}
 800218e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002192:	b500      	push	{lr}
 8002194:	b09c      	sub	sp, #112	; 0x70
 8002196:	ab1d      	add	r3, sp, #116	; 0x74
 8002198:	9002      	str	r0, [sp, #8]
 800219a:	9006      	str	r0, [sp, #24]
 800219c:	9107      	str	r1, [sp, #28]
 800219e:	9104      	str	r1, [sp, #16]
 80021a0:	4808      	ldr	r0, [pc, #32]	; (80021c4 <siprintf+0x38>)
 80021a2:	4909      	ldr	r1, [pc, #36]	; (80021c8 <siprintf+0x3c>)
 80021a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80021a8:	9105      	str	r1, [sp, #20]
 80021aa:	6800      	ldr	r0, [r0, #0]
 80021ac:	a902      	add	r1, sp, #8
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	f000 f868 	bl	8002284 <_svfiprintf_r>
 80021b4:	2200      	movs	r2, #0
 80021b6:	9b02      	ldr	r3, [sp, #8]
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	b01c      	add	sp, #112	; 0x70
 80021bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80021c0:	b003      	add	sp, #12
 80021c2:	4770      	bx	lr
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	ffff0208 	.word	0xffff0208

080021cc <__ssputs_r>:
 80021cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021d0:	688e      	ldr	r6, [r1, #8]
 80021d2:	4682      	mov	sl, r0
 80021d4:	429e      	cmp	r6, r3
 80021d6:	460c      	mov	r4, r1
 80021d8:	4690      	mov	r8, r2
 80021da:	461f      	mov	r7, r3
 80021dc:	d838      	bhi.n	8002250 <__ssputs_r+0x84>
 80021de:	898a      	ldrh	r2, [r1, #12]
 80021e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80021e4:	d032      	beq.n	800224c <__ssputs_r+0x80>
 80021e6:	6825      	ldr	r5, [r4, #0]
 80021e8:	6909      	ldr	r1, [r1, #16]
 80021ea:	3301      	adds	r3, #1
 80021ec:	eba5 0901 	sub.w	r9, r5, r1
 80021f0:	6965      	ldr	r5, [r4, #20]
 80021f2:	444b      	add	r3, r9
 80021f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80021fc:	106d      	asrs	r5, r5, #1
 80021fe:	429d      	cmp	r5, r3
 8002200:	bf38      	it	cc
 8002202:	461d      	movcc	r5, r3
 8002204:	0553      	lsls	r3, r2, #21
 8002206:	d531      	bpl.n	800226c <__ssputs_r+0xa0>
 8002208:	4629      	mov	r1, r5
 800220a:	f000 fb6f 	bl	80028ec <_malloc_r>
 800220e:	4606      	mov	r6, r0
 8002210:	b950      	cbnz	r0, 8002228 <__ssputs_r+0x5c>
 8002212:	230c      	movs	r3, #12
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f8ca 3000 	str.w	r3, [sl]
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002222:	81a3      	strh	r3, [r4, #12]
 8002224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002228:	464a      	mov	r2, r9
 800222a:	6921      	ldr	r1, [r4, #16]
 800222c:	f000 face 	bl	80027cc <memcpy>
 8002230:	89a3      	ldrh	r3, [r4, #12]
 8002232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223a:	81a3      	strh	r3, [r4, #12]
 800223c:	6126      	str	r6, [r4, #16]
 800223e:	444e      	add	r6, r9
 8002240:	6026      	str	r6, [r4, #0]
 8002242:	463e      	mov	r6, r7
 8002244:	6165      	str	r5, [r4, #20]
 8002246:	eba5 0509 	sub.w	r5, r5, r9
 800224a:	60a5      	str	r5, [r4, #8]
 800224c:	42be      	cmp	r6, r7
 800224e:	d900      	bls.n	8002252 <__ssputs_r+0x86>
 8002250:	463e      	mov	r6, r7
 8002252:	4632      	mov	r2, r6
 8002254:	4641      	mov	r1, r8
 8002256:	6820      	ldr	r0, [r4, #0]
 8002258:	f000 fac6 	bl	80027e8 <memmove>
 800225c:	68a3      	ldr	r3, [r4, #8]
 800225e:	2000      	movs	r0, #0
 8002260:	1b9b      	subs	r3, r3, r6
 8002262:	60a3      	str	r3, [r4, #8]
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	4433      	add	r3, r6
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	e7db      	b.n	8002224 <__ssputs_r+0x58>
 800226c:	462a      	mov	r2, r5
 800226e:	f000 fbb1 	bl	80029d4 <_realloc_r>
 8002272:	4606      	mov	r6, r0
 8002274:	2800      	cmp	r0, #0
 8002276:	d1e1      	bne.n	800223c <__ssputs_r+0x70>
 8002278:	4650      	mov	r0, sl
 800227a:	6921      	ldr	r1, [r4, #16]
 800227c:	f000 face 	bl	800281c <_free_r>
 8002280:	e7c7      	b.n	8002212 <__ssputs_r+0x46>
	...

08002284 <_svfiprintf_r>:
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002288:	4698      	mov	r8, r3
 800228a:	898b      	ldrh	r3, [r1, #12]
 800228c:	4607      	mov	r7, r0
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	460d      	mov	r5, r1
 8002292:	4614      	mov	r4, r2
 8002294:	b09d      	sub	sp, #116	; 0x74
 8002296:	d50e      	bpl.n	80022b6 <_svfiprintf_r+0x32>
 8002298:	690b      	ldr	r3, [r1, #16]
 800229a:	b963      	cbnz	r3, 80022b6 <_svfiprintf_r+0x32>
 800229c:	2140      	movs	r1, #64	; 0x40
 800229e:	f000 fb25 	bl	80028ec <_malloc_r>
 80022a2:	6028      	str	r0, [r5, #0]
 80022a4:	6128      	str	r0, [r5, #16]
 80022a6:	b920      	cbnz	r0, 80022b2 <_svfiprintf_r+0x2e>
 80022a8:	230c      	movs	r3, #12
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	e0d1      	b.n	8002456 <_svfiprintf_r+0x1d2>
 80022b2:	2340      	movs	r3, #64	; 0x40
 80022b4:	616b      	str	r3, [r5, #20]
 80022b6:	2300      	movs	r3, #0
 80022b8:	9309      	str	r3, [sp, #36]	; 0x24
 80022ba:	2320      	movs	r3, #32
 80022bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022c0:	2330      	movs	r3, #48	; 0x30
 80022c2:	f04f 0901 	mov.w	r9, #1
 80022c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80022ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002470 <_svfiprintf_r+0x1ec>
 80022ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022d2:	4623      	mov	r3, r4
 80022d4:	469a      	mov	sl, r3
 80022d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022da:	b10a      	cbz	r2, 80022e0 <_svfiprintf_r+0x5c>
 80022dc:	2a25      	cmp	r2, #37	; 0x25
 80022de:	d1f9      	bne.n	80022d4 <_svfiprintf_r+0x50>
 80022e0:	ebba 0b04 	subs.w	fp, sl, r4
 80022e4:	d00b      	beq.n	80022fe <_svfiprintf_r+0x7a>
 80022e6:	465b      	mov	r3, fp
 80022e8:	4622      	mov	r2, r4
 80022ea:	4629      	mov	r1, r5
 80022ec:	4638      	mov	r0, r7
 80022ee:	f7ff ff6d 	bl	80021cc <__ssputs_r>
 80022f2:	3001      	adds	r0, #1
 80022f4:	f000 80aa 	beq.w	800244c <_svfiprintf_r+0x1c8>
 80022f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022fa:	445a      	add	r2, fp
 80022fc:	9209      	str	r2, [sp, #36]	; 0x24
 80022fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80a2 	beq.w	800244c <_svfiprintf_r+0x1c8>
 8002308:	2300      	movs	r3, #0
 800230a:	f04f 32ff 	mov.w	r2, #4294967295
 800230e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002312:	f10a 0a01 	add.w	sl, sl, #1
 8002316:	9304      	str	r3, [sp, #16]
 8002318:	9307      	str	r3, [sp, #28]
 800231a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800231e:	931a      	str	r3, [sp, #104]	; 0x68
 8002320:	4654      	mov	r4, sl
 8002322:	2205      	movs	r2, #5
 8002324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002328:	4851      	ldr	r0, [pc, #324]	; (8002470 <_svfiprintf_r+0x1ec>)
 800232a:	f000 fa41 	bl	80027b0 <memchr>
 800232e:	9a04      	ldr	r2, [sp, #16]
 8002330:	b9d8      	cbnz	r0, 800236a <_svfiprintf_r+0xe6>
 8002332:	06d0      	lsls	r0, r2, #27
 8002334:	bf44      	itt	mi
 8002336:	2320      	movmi	r3, #32
 8002338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800233c:	0711      	lsls	r1, r2, #28
 800233e:	bf44      	itt	mi
 8002340:	232b      	movmi	r3, #43	; 0x2b
 8002342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002346:	f89a 3000 	ldrb.w	r3, [sl]
 800234a:	2b2a      	cmp	r3, #42	; 0x2a
 800234c:	d015      	beq.n	800237a <_svfiprintf_r+0xf6>
 800234e:	4654      	mov	r4, sl
 8002350:	2000      	movs	r0, #0
 8002352:	f04f 0c0a 	mov.w	ip, #10
 8002356:	9a07      	ldr	r2, [sp, #28]
 8002358:	4621      	mov	r1, r4
 800235a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800235e:	3b30      	subs	r3, #48	; 0x30
 8002360:	2b09      	cmp	r3, #9
 8002362:	d94e      	bls.n	8002402 <_svfiprintf_r+0x17e>
 8002364:	b1b0      	cbz	r0, 8002394 <_svfiprintf_r+0x110>
 8002366:	9207      	str	r2, [sp, #28]
 8002368:	e014      	b.n	8002394 <_svfiprintf_r+0x110>
 800236a:	eba0 0308 	sub.w	r3, r0, r8
 800236e:	fa09 f303 	lsl.w	r3, r9, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	46a2      	mov	sl, r4
 8002376:	9304      	str	r3, [sp, #16]
 8002378:	e7d2      	b.n	8002320 <_svfiprintf_r+0x9c>
 800237a:	9b03      	ldr	r3, [sp, #12]
 800237c:	1d19      	adds	r1, r3, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	9103      	str	r1, [sp, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	bfbb      	ittet	lt
 8002386:	425b      	neglt	r3, r3
 8002388:	f042 0202 	orrlt.w	r2, r2, #2
 800238c:	9307      	strge	r3, [sp, #28]
 800238e:	9307      	strlt	r3, [sp, #28]
 8002390:	bfb8      	it	lt
 8002392:	9204      	strlt	r2, [sp, #16]
 8002394:	7823      	ldrb	r3, [r4, #0]
 8002396:	2b2e      	cmp	r3, #46	; 0x2e
 8002398:	d10c      	bne.n	80023b4 <_svfiprintf_r+0x130>
 800239a:	7863      	ldrb	r3, [r4, #1]
 800239c:	2b2a      	cmp	r3, #42	; 0x2a
 800239e:	d135      	bne.n	800240c <_svfiprintf_r+0x188>
 80023a0:	9b03      	ldr	r3, [sp, #12]
 80023a2:	3402      	adds	r4, #2
 80023a4:	1d1a      	adds	r2, r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	9203      	str	r2, [sp, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80023b2:	9305      	str	r3, [sp, #20]
 80023b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002474 <_svfiprintf_r+0x1f0>
 80023b8:	2203      	movs	r2, #3
 80023ba:	4650      	mov	r0, sl
 80023bc:	7821      	ldrb	r1, [r4, #0]
 80023be:	f000 f9f7 	bl	80027b0 <memchr>
 80023c2:	b140      	cbz	r0, 80023d6 <_svfiprintf_r+0x152>
 80023c4:	2340      	movs	r3, #64	; 0x40
 80023c6:	eba0 000a 	sub.w	r0, r0, sl
 80023ca:	fa03 f000 	lsl.w	r0, r3, r0
 80023ce:	9b04      	ldr	r3, [sp, #16]
 80023d0:	3401      	adds	r4, #1
 80023d2:	4303      	orrs	r3, r0
 80023d4:	9304      	str	r3, [sp, #16]
 80023d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023da:	2206      	movs	r2, #6
 80023dc:	4826      	ldr	r0, [pc, #152]	; (8002478 <_svfiprintf_r+0x1f4>)
 80023de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023e2:	f000 f9e5 	bl	80027b0 <memchr>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d038      	beq.n	800245c <_svfiprintf_r+0x1d8>
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <_svfiprintf_r+0x1f8>)
 80023ec:	bb1b      	cbnz	r3, 8002436 <_svfiprintf_r+0x1b2>
 80023ee:	9b03      	ldr	r3, [sp, #12]
 80023f0:	3307      	adds	r3, #7
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	3308      	adds	r3, #8
 80023f8:	9303      	str	r3, [sp, #12]
 80023fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023fc:	4433      	add	r3, r6
 80023fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002400:	e767      	b.n	80022d2 <_svfiprintf_r+0x4e>
 8002402:	460c      	mov	r4, r1
 8002404:	2001      	movs	r0, #1
 8002406:	fb0c 3202 	mla	r2, ip, r2, r3
 800240a:	e7a5      	b.n	8002358 <_svfiprintf_r+0xd4>
 800240c:	2300      	movs	r3, #0
 800240e:	f04f 0c0a 	mov.w	ip, #10
 8002412:	4619      	mov	r1, r3
 8002414:	3401      	adds	r4, #1
 8002416:	9305      	str	r3, [sp, #20]
 8002418:	4620      	mov	r0, r4
 800241a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800241e:	3a30      	subs	r2, #48	; 0x30
 8002420:	2a09      	cmp	r2, #9
 8002422:	d903      	bls.n	800242c <_svfiprintf_r+0x1a8>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0c5      	beq.n	80023b4 <_svfiprintf_r+0x130>
 8002428:	9105      	str	r1, [sp, #20]
 800242a:	e7c3      	b.n	80023b4 <_svfiprintf_r+0x130>
 800242c:	4604      	mov	r4, r0
 800242e:	2301      	movs	r3, #1
 8002430:	fb0c 2101 	mla	r1, ip, r1, r2
 8002434:	e7f0      	b.n	8002418 <_svfiprintf_r+0x194>
 8002436:	ab03      	add	r3, sp, #12
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	462a      	mov	r2, r5
 800243c:	4638      	mov	r0, r7
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <_svfiprintf_r+0x1fc>)
 8002440:	a904      	add	r1, sp, #16
 8002442:	f3af 8000 	nop.w
 8002446:	1c42      	adds	r2, r0, #1
 8002448:	4606      	mov	r6, r0
 800244a:	d1d6      	bne.n	80023fa <_svfiprintf_r+0x176>
 800244c:	89ab      	ldrh	r3, [r5, #12]
 800244e:	065b      	lsls	r3, r3, #25
 8002450:	f53f af2c 	bmi.w	80022ac <_svfiprintf_r+0x28>
 8002454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002456:	b01d      	add	sp, #116	; 0x74
 8002458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800245c:	ab03      	add	r3, sp, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	462a      	mov	r2, r5
 8002462:	4638      	mov	r0, r7
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <_svfiprintf_r+0x1fc>)
 8002466:	a904      	add	r1, sp, #16
 8002468:	f000 f87c 	bl	8002564 <_printf_i>
 800246c:	e7eb      	b.n	8002446 <_svfiprintf_r+0x1c2>
 800246e:	bf00      	nop
 8002470:	08002acc 	.word	0x08002acc
 8002474:	08002ad2 	.word	0x08002ad2
 8002478:	08002ad6 	.word	0x08002ad6
 800247c:	00000000 	.word	0x00000000
 8002480:	080021cd 	.word	0x080021cd

08002484 <_printf_common>:
 8002484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002488:	4616      	mov	r6, r2
 800248a:	4699      	mov	r9, r3
 800248c:	688a      	ldr	r2, [r1, #8]
 800248e:	690b      	ldr	r3, [r1, #16]
 8002490:	4607      	mov	r7, r0
 8002492:	4293      	cmp	r3, r2
 8002494:	bfb8      	it	lt
 8002496:	4613      	movlt	r3, r2
 8002498:	6033      	str	r3, [r6, #0]
 800249a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800249e:	460c      	mov	r4, r1
 80024a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024a4:	b10a      	cbz	r2, 80024aa <_printf_common+0x26>
 80024a6:	3301      	adds	r3, #1
 80024a8:	6033      	str	r3, [r6, #0]
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	0699      	lsls	r1, r3, #26
 80024ae:	bf42      	ittt	mi
 80024b0:	6833      	ldrmi	r3, [r6, #0]
 80024b2:	3302      	addmi	r3, #2
 80024b4:	6033      	strmi	r3, [r6, #0]
 80024b6:	6825      	ldr	r5, [r4, #0]
 80024b8:	f015 0506 	ands.w	r5, r5, #6
 80024bc:	d106      	bne.n	80024cc <_printf_common+0x48>
 80024be:	f104 0a19 	add.w	sl, r4, #25
 80024c2:	68e3      	ldr	r3, [r4, #12]
 80024c4:	6832      	ldr	r2, [r6, #0]
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	42ab      	cmp	r3, r5
 80024ca:	dc28      	bgt.n	800251e <_printf_common+0x9a>
 80024cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024d0:	1e13      	subs	r3, r2, #0
 80024d2:	6822      	ldr	r2, [r4, #0]
 80024d4:	bf18      	it	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	0692      	lsls	r2, r2, #26
 80024da:	d42d      	bmi.n	8002538 <_printf_common+0xb4>
 80024dc:	4649      	mov	r1, r9
 80024de:	4638      	mov	r0, r7
 80024e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024e4:	47c0      	blx	r8
 80024e6:	3001      	adds	r0, #1
 80024e8:	d020      	beq.n	800252c <_printf_common+0xa8>
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	68e5      	ldr	r5, [r4, #12]
 80024ee:	f003 0306 	and.w	r3, r3, #6
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf18      	it	ne
 80024f6:	2500      	movne	r5, #0
 80024f8:	6832      	ldr	r2, [r6, #0]
 80024fa:	f04f 0600 	mov.w	r6, #0
 80024fe:	68a3      	ldr	r3, [r4, #8]
 8002500:	bf08      	it	eq
 8002502:	1aad      	subeq	r5, r5, r2
 8002504:	6922      	ldr	r2, [r4, #16]
 8002506:	bf08      	it	eq
 8002508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800250c:	4293      	cmp	r3, r2
 800250e:	bfc4      	itt	gt
 8002510:	1a9b      	subgt	r3, r3, r2
 8002512:	18ed      	addgt	r5, r5, r3
 8002514:	341a      	adds	r4, #26
 8002516:	42b5      	cmp	r5, r6
 8002518:	d11a      	bne.n	8002550 <_printf_common+0xcc>
 800251a:	2000      	movs	r0, #0
 800251c:	e008      	b.n	8002530 <_printf_common+0xac>
 800251e:	2301      	movs	r3, #1
 8002520:	4652      	mov	r2, sl
 8002522:	4649      	mov	r1, r9
 8002524:	4638      	mov	r0, r7
 8002526:	47c0      	blx	r8
 8002528:	3001      	adds	r0, #1
 800252a:	d103      	bne.n	8002534 <_printf_common+0xb0>
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002534:	3501      	adds	r5, #1
 8002536:	e7c4      	b.n	80024c2 <_printf_common+0x3e>
 8002538:	2030      	movs	r0, #48	; 0x30
 800253a:	18e1      	adds	r1, r4, r3
 800253c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002546:	4422      	add	r2, r4
 8002548:	3302      	adds	r3, #2
 800254a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800254e:	e7c5      	b.n	80024dc <_printf_common+0x58>
 8002550:	2301      	movs	r3, #1
 8002552:	4622      	mov	r2, r4
 8002554:	4649      	mov	r1, r9
 8002556:	4638      	mov	r0, r7
 8002558:	47c0      	blx	r8
 800255a:	3001      	adds	r0, #1
 800255c:	d0e6      	beq.n	800252c <_printf_common+0xa8>
 800255e:	3601      	adds	r6, #1
 8002560:	e7d9      	b.n	8002516 <_printf_common+0x92>
	...

08002564 <_printf_i>:
 8002564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002568:	7e0f      	ldrb	r7, [r1, #24]
 800256a:	4691      	mov	r9, r2
 800256c:	2f78      	cmp	r7, #120	; 0x78
 800256e:	4680      	mov	r8, r0
 8002570:	460c      	mov	r4, r1
 8002572:	469a      	mov	sl, r3
 8002574:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800257a:	d807      	bhi.n	800258c <_printf_i+0x28>
 800257c:	2f62      	cmp	r7, #98	; 0x62
 800257e:	d80a      	bhi.n	8002596 <_printf_i+0x32>
 8002580:	2f00      	cmp	r7, #0
 8002582:	f000 80d9 	beq.w	8002738 <_printf_i+0x1d4>
 8002586:	2f58      	cmp	r7, #88	; 0x58
 8002588:	f000 80a4 	beq.w	80026d4 <_printf_i+0x170>
 800258c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002594:	e03a      	b.n	800260c <_printf_i+0xa8>
 8002596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800259a:	2b15      	cmp	r3, #21
 800259c:	d8f6      	bhi.n	800258c <_printf_i+0x28>
 800259e:	a101      	add	r1, pc, #4	; (adr r1, 80025a4 <_printf_i+0x40>)
 80025a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025a4:	080025fd 	.word	0x080025fd
 80025a8:	08002611 	.word	0x08002611
 80025ac:	0800258d 	.word	0x0800258d
 80025b0:	0800258d 	.word	0x0800258d
 80025b4:	0800258d 	.word	0x0800258d
 80025b8:	0800258d 	.word	0x0800258d
 80025bc:	08002611 	.word	0x08002611
 80025c0:	0800258d 	.word	0x0800258d
 80025c4:	0800258d 	.word	0x0800258d
 80025c8:	0800258d 	.word	0x0800258d
 80025cc:	0800258d 	.word	0x0800258d
 80025d0:	0800271f 	.word	0x0800271f
 80025d4:	08002641 	.word	0x08002641
 80025d8:	08002701 	.word	0x08002701
 80025dc:	0800258d 	.word	0x0800258d
 80025e0:	0800258d 	.word	0x0800258d
 80025e4:	08002741 	.word	0x08002741
 80025e8:	0800258d 	.word	0x0800258d
 80025ec:	08002641 	.word	0x08002641
 80025f0:	0800258d 	.word	0x0800258d
 80025f4:	0800258d 	.word	0x0800258d
 80025f8:	08002709 	.word	0x08002709
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	1d1a      	adds	r2, r3, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	602a      	str	r2, [r5, #0]
 8002604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800260c:	2301      	movs	r3, #1
 800260e:	e0a4      	b.n	800275a <_printf_i+0x1f6>
 8002610:	6820      	ldr	r0, [r4, #0]
 8002612:	6829      	ldr	r1, [r5, #0]
 8002614:	0606      	lsls	r6, r0, #24
 8002616:	f101 0304 	add.w	r3, r1, #4
 800261a:	d50a      	bpl.n	8002632 <_printf_i+0xce>
 800261c:	680e      	ldr	r6, [r1, #0]
 800261e:	602b      	str	r3, [r5, #0]
 8002620:	2e00      	cmp	r6, #0
 8002622:	da03      	bge.n	800262c <_printf_i+0xc8>
 8002624:	232d      	movs	r3, #45	; 0x2d
 8002626:	4276      	negs	r6, r6
 8002628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800262c:	230a      	movs	r3, #10
 800262e:	485e      	ldr	r0, [pc, #376]	; (80027a8 <_printf_i+0x244>)
 8002630:	e019      	b.n	8002666 <_printf_i+0x102>
 8002632:	680e      	ldr	r6, [r1, #0]
 8002634:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002638:	602b      	str	r3, [r5, #0]
 800263a:	bf18      	it	ne
 800263c:	b236      	sxthne	r6, r6
 800263e:	e7ef      	b.n	8002620 <_printf_i+0xbc>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	6820      	ldr	r0, [r4, #0]
 8002644:	1d19      	adds	r1, r3, #4
 8002646:	6029      	str	r1, [r5, #0]
 8002648:	0601      	lsls	r1, r0, #24
 800264a:	d501      	bpl.n	8002650 <_printf_i+0xec>
 800264c:	681e      	ldr	r6, [r3, #0]
 800264e:	e002      	b.n	8002656 <_printf_i+0xf2>
 8002650:	0646      	lsls	r6, r0, #25
 8002652:	d5fb      	bpl.n	800264c <_printf_i+0xe8>
 8002654:	881e      	ldrh	r6, [r3, #0]
 8002656:	2f6f      	cmp	r7, #111	; 0x6f
 8002658:	bf0c      	ite	eq
 800265a:	2308      	moveq	r3, #8
 800265c:	230a      	movne	r3, #10
 800265e:	4852      	ldr	r0, [pc, #328]	; (80027a8 <_printf_i+0x244>)
 8002660:	2100      	movs	r1, #0
 8002662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002666:	6865      	ldr	r5, [r4, #4]
 8002668:	2d00      	cmp	r5, #0
 800266a:	bfa8      	it	ge
 800266c:	6821      	ldrge	r1, [r4, #0]
 800266e:	60a5      	str	r5, [r4, #8]
 8002670:	bfa4      	itt	ge
 8002672:	f021 0104 	bicge.w	r1, r1, #4
 8002676:	6021      	strge	r1, [r4, #0]
 8002678:	b90e      	cbnz	r6, 800267e <_printf_i+0x11a>
 800267a:	2d00      	cmp	r5, #0
 800267c:	d04d      	beq.n	800271a <_printf_i+0x1b6>
 800267e:	4615      	mov	r5, r2
 8002680:	fbb6 f1f3 	udiv	r1, r6, r3
 8002684:	fb03 6711 	mls	r7, r3, r1, r6
 8002688:	5dc7      	ldrb	r7, [r0, r7]
 800268a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800268e:	4637      	mov	r7, r6
 8002690:	42bb      	cmp	r3, r7
 8002692:	460e      	mov	r6, r1
 8002694:	d9f4      	bls.n	8002680 <_printf_i+0x11c>
 8002696:	2b08      	cmp	r3, #8
 8002698:	d10b      	bne.n	80026b2 <_printf_i+0x14e>
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	07de      	lsls	r6, r3, #31
 800269e:	d508      	bpl.n	80026b2 <_printf_i+0x14e>
 80026a0:	6923      	ldr	r3, [r4, #16]
 80026a2:	6861      	ldr	r1, [r4, #4]
 80026a4:	4299      	cmp	r1, r3
 80026a6:	bfde      	ittt	le
 80026a8:	2330      	movle	r3, #48	; 0x30
 80026aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026b2:	1b52      	subs	r2, r2, r5
 80026b4:	6122      	str	r2, [r4, #16]
 80026b6:	464b      	mov	r3, r9
 80026b8:	4621      	mov	r1, r4
 80026ba:	4640      	mov	r0, r8
 80026bc:	f8cd a000 	str.w	sl, [sp]
 80026c0:	aa03      	add	r2, sp, #12
 80026c2:	f7ff fedf 	bl	8002484 <_printf_common>
 80026c6:	3001      	adds	r0, #1
 80026c8:	d14c      	bne.n	8002764 <_printf_i+0x200>
 80026ca:	f04f 30ff 	mov.w	r0, #4294967295
 80026ce:	b004      	add	sp, #16
 80026d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026d4:	4834      	ldr	r0, [pc, #208]	; (80027a8 <_printf_i+0x244>)
 80026d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026da:	6829      	ldr	r1, [r5, #0]
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	f851 6b04 	ldr.w	r6, [r1], #4
 80026e2:	6029      	str	r1, [r5, #0]
 80026e4:	061d      	lsls	r5, r3, #24
 80026e6:	d514      	bpl.n	8002712 <_printf_i+0x1ae>
 80026e8:	07df      	lsls	r7, r3, #31
 80026ea:	bf44      	itt	mi
 80026ec:	f043 0320 	orrmi.w	r3, r3, #32
 80026f0:	6023      	strmi	r3, [r4, #0]
 80026f2:	b91e      	cbnz	r6, 80026fc <_printf_i+0x198>
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	f023 0320 	bic.w	r3, r3, #32
 80026fa:	6023      	str	r3, [r4, #0]
 80026fc:	2310      	movs	r3, #16
 80026fe:	e7af      	b.n	8002660 <_printf_i+0xfc>
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f043 0320 	orr.w	r3, r3, #32
 8002706:	6023      	str	r3, [r4, #0]
 8002708:	2378      	movs	r3, #120	; 0x78
 800270a:	4828      	ldr	r0, [pc, #160]	; (80027ac <_printf_i+0x248>)
 800270c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002710:	e7e3      	b.n	80026da <_printf_i+0x176>
 8002712:	0659      	lsls	r1, r3, #25
 8002714:	bf48      	it	mi
 8002716:	b2b6      	uxthmi	r6, r6
 8002718:	e7e6      	b.n	80026e8 <_printf_i+0x184>
 800271a:	4615      	mov	r5, r2
 800271c:	e7bb      	b.n	8002696 <_printf_i+0x132>
 800271e:	682b      	ldr	r3, [r5, #0]
 8002720:	6826      	ldr	r6, [r4, #0]
 8002722:	1d18      	adds	r0, r3, #4
 8002724:	6961      	ldr	r1, [r4, #20]
 8002726:	6028      	str	r0, [r5, #0]
 8002728:	0635      	lsls	r5, r6, #24
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	d501      	bpl.n	8002732 <_printf_i+0x1ce>
 800272e:	6019      	str	r1, [r3, #0]
 8002730:	e002      	b.n	8002738 <_printf_i+0x1d4>
 8002732:	0670      	lsls	r0, r6, #25
 8002734:	d5fb      	bpl.n	800272e <_printf_i+0x1ca>
 8002736:	8019      	strh	r1, [r3, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	4615      	mov	r5, r2
 800273c:	6123      	str	r3, [r4, #16]
 800273e:	e7ba      	b.n	80026b6 <_printf_i+0x152>
 8002740:	682b      	ldr	r3, [r5, #0]
 8002742:	2100      	movs	r1, #0
 8002744:	1d1a      	adds	r2, r3, #4
 8002746:	602a      	str	r2, [r5, #0]
 8002748:	681d      	ldr	r5, [r3, #0]
 800274a:	6862      	ldr	r2, [r4, #4]
 800274c:	4628      	mov	r0, r5
 800274e:	f000 f82f 	bl	80027b0 <memchr>
 8002752:	b108      	cbz	r0, 8002758 <_printf_i+0x1f4>
 8002754:	1b40      	subs	r0, r0, r5
 8002756:	6060      	str	r0, [r4, #4]
 8002758:	6863      	ldr	r3, [r4, #4]
 800275a:	6123      	str	r3, [r4, #16]
 800275c:	2300      	movs	r3, #0
 800275e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002762:	e7a8      	b.n	80026b6 <_printf_i+0x152>
 8002764:	462a      	mov	r2, r5
 8002766:	4649      	mov	r1, r9
 8002768:	4640      	mov	r0, r8
 800276a:	6923      	ldr	r3, [r4, #16]
 800276c:	47d0      	blx	sl
 800276e:	3001      	adds	r0, #1
 8002770:	d0ab      	beq.n	80026ca <_printf_i+0x166>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	079b      	lsls	r3, r3, #30
 8002776:	d413      	bmi.n	80027a0 <_printf_i+0x23c>
 8002778:	68e0      	ldr	r0, [r4, #12]
 800277a:	9b03      	ldr	r3, [sp, #12]
 800277c:	4298      	cmp	r0, r3
 800277e:	bfb8      	it	lt
 8002780:	4618      	movlt	r0, r3
 8002782:	e7a4      	b.n	80026ce <_printf_i+0x16a>
 8002784:	2301      	movs	r3, #1
 8002786:	4632      	mov	r2, r6
 8002788:	4649      	mov	r1, r9
 800278a:	4640      	mov	r0, r8
 800278c:	47d0      	blx	sl
 800278e:	3001      	adds	r0, #1
 8002790:	d09b      	beq.n	80026ca <_printf_i+0x166>
 8002792:	3501      	adds	r5, #1
 8002794:	68e3      	ldr	r3, [r4, #12]
 8002796:	9903      	ldr	r1, [sp, #12]
 8002798:	1a5b      	subs	r3, r3, r1
 800279a:	42ab      	cmp	r3, r5
 800279c:	dcf2      	bgt.n	8002784 <_printf_i+0x220>
 800279e:	e7eb      	b.n	8002778 <_printf_i+0x214>
 80027a0:	2500      	movs	r5, #0
 80027a2:	f104 0619 	add.w	r6, r4, #25
 80027a6:	e7f5      	b.n	8002794 <_printf_i+0x230>
 80027a8:	08002add 	.word	0x08002add
 80027ac:	08002aee 	.word	0x08002aee

080027b0 <memchr>:
 80027b0:	4603      	mov	r3, r0
 80027b2:	b510      	push	{r4, lr}
 80027b4:	b2c9      	uxtb	r1, r1
 80027b6:	4402      	add	r2, r0
 80027b8:	4293      	cmp	r3, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	d101      	bne.n	80027c2 <memchr+0x12>
 80027be:	2000      	movs	r0, #0
 80027c0:	e003      	b.n	80027ca <memchr+0x1a>
 80027c2:	7804      	ldrb	r4, [r0, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	428c      	cmp	r4, r1
 80027c8:	d1f6      	bne.n	80027b8 <memchr+0x8>
 80027ca:	bd10      	pop	{r4, pc}

080027cc <memcpy>:
 80027cc:	440a      	add	r2, r1
 80027ce:	4291      	cmp	r1, r2
 80027d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80027d4:	d100      	bne.n	80027d8 <memcpy+0xc>
 80027d6:	4770      	bx	lr
 80027d8:	b510      	push	{r4, lr}
 80027da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027de:	4291      	cmp	r1, r2
 80027e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027e4:	d1f9      	bne.n	80027da <memcpy+0xe>
 80027e6:	bd10      	pop	{r4, pc}

080027e8 <memmove>:
 80027e8:	4288      	cmp	r0, r1
 80027ea:	b510      	push	{r4, lr}
 80027ec:	eb01 0402 	add.w	r4, r1, r2
 80027f0:	d902      	bls.n	80027f8 <memmove+0x10>
 80027f2:	4284      	cmp	r4, r0
 80027f4:	4623      	mov	r3, r4
 80027f6:	d807      	bhi.n	8002808 <memmove+0x20>
 80027f8:	1e43      	subs	r3, r0, #1
 80027fa:	42a1      	cmp	r1, r4
 80027fc:	d008      	beq.n	8002810 <memmove+0x28>
 80027fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002806:	e7f8      	b.n	80027fa <memmove+0x12>
 8002808:	4601      	mov	r1, r0
 800280a:	4402      	add	r2, r0
 800280c:	428a      	cmp	r2, r1
 800280e:	d100      	bne.n	8002812 <memmove+0x2a>
 8002810:	bd10      	pop	{r4, pc}
 8002812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800281a:	e7f7      	b.n	800280c <memmove+0x24>

0800281c <_free_r>:
 800281c:	b538      	push	{r3, r4, r5, lr}
 800281e:	4605      	mov	r5, r0
 8002820:	2900      	cmp	r1, #0
 8002822:	d040      	beq.n	80028a6 <_free_r+0x8a>
 8002824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002828:	1f0c      	subs	r4, r1, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	bfb8      	it	lt
 800282e:	18e4      	addlt	r4, r4, r3
 8002830:	f000 f910 	bl	8002a54 <__malloc_lock>
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <_free_r+0x8c>)
 8002836:	6813      	ldr	r3, [r2, #0]
 8002838:	b933      	cbnz	r3, 8002848 <_free_r+0x2c>
 800283a:	6063      	str	r3, [r4, #4]
 800283c:	6014      	str	r4, [r2, #0]
 800283e:	4628      	mov	r0, r5
 8002840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002844:	f000 b90c 	b.w	8002a60 <__malloc_unlock>
 8002848:	42a3      	cmp	r3, r4
 800284a:	d908      	bls.n	800285e <_free_r+0x42>
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	1821      	adds	r1, r4, r0
 8002850:	428b      	cmp	r3, r1
 8002852:	bf01      	itttt	eq
 8002854:	6819      	ldreq	r1, [r3, #0]
 8002856:	685b      	ldreq	r3, [r3, #4]
 8002858:	1809      	addeq	r1, r1, r0
 800285a:	6021      	streq	r1, [r4, #0]
 800285c:	e7ed      	b.n	800283a <_free_r+0x1e>
 800285e:	461a      	mov	r2, r3
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	b10b      	cbz	r3, 8002868 <_free_r+0x4c>
 8002864:	42a3      	cmp	r3, r4
 8002866:	d9fa      	bls.n	800285e <_free_r+0x42>
 8002868:	6811      	ldr	r1, [r2, #0]
 800286a:	1850      	adds	r0, r2, r1
 800286c:	42a0      	cmp	r0, r4
 800286e:	d10b      	bne.n	8002888 <_free_r+0x6c>
 8002870:	6820      	ldr	r0, [r4, #0]
 8002872:	4401      	add	r1, r0
 8002874:	1850      	adds	r0, r2, r1
 8002876:	4283      	cmp	r3, r0
 8002878:	6011      	str	r1, [r2, #0]
 800287a:	d1e0      	bne.n	800283e <_free_r+0x22>
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4401      	add	r1, r0
 8002882:	6011      	str	r1, [r2, #0]
 8002884:	6053      	str	r3, [r2, #4]
 8002886:	e7da      	b.n	800283e <_free_r+0x22>
 8002888:	d902      	bls.n	8002890 <_free_r+0x74>
 800288a:	230c      	movs	r3, #12
 800288c:	602b      	str	r3, [r5, #0]
 800288e:	e7d6      	b.n	800283e <_free_r+0x22>
 8002890:	6820      	ldr	r0, [r4, #0]
 8002892:	1821      	adds	r1, r4, r0
 8002894:	428b      	cmp	r3, r1
 8002896:	bf01      	itttt	eq
 8002898:	6819      	ldreq	r1, [r3, #0]
 800289a:	685b      	ldreq	r3, [r3, #4]
 800289c:	1809      	addeq	r1, r1, r0
 800289e:	6021      	streq	r1, [r4, #0]
 80028a0:	6063      	str	r3, [r4, #4]
 80028a2:	6054      	str	r4, [r2, #4]
 80028a4:	e7cb      	b.n	800283e <_free_r+0x22>
 80028a6:	bd38      	pop	{r3, r4, r5, pc}
 80028a8:	20000124 	.word	0x20000124

080028ac <sbrk_aligned>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	4e0e      	ldr	r6, [pc, #56]	; (80028e8 <sbrk_aligned+0x3c>)
 80028b0:	460c      	mov	r4, r1
 80028b2:	6831      	ldr	r1, [r6, #0]
 80028b4:	4605      	mov	r5, r0
 80028b6:	b911      	cbnz	r1, 80028be <sbrk_aligned+0x12>
 80028b8:	f000 f8bc 	bl	8002a34 <_sbrk_r>
 80028bc:	6030      	str	r0, [r6, #0]
 80028be:	4621      	mov	r1, r4
 80028c0:	4628      	mov	r0, r5
 80028c2:	f000 f8b7 	bl	8002a34 <_sbrk_r>
 80028c6:	1c43      	adds	r3, r0, #1
 80028c8:	d00a      	beq.n	80028e0 <sbrk_aligned+0x34>
 80028ca:	1cc4      	adds	r4, r0, #3
 80028cc:	f024 0403 	bic.w	r4, r4, #3
 80028d0:	42a0      	cmp	r0, r4
 80028d2:	d007      	beq.n	80028e4 <sbrk_aligned+0x38>
 80028d4:	1a21      	subs	r1, r4, r0
 80028d6:	4628      	mov	r0, r5
 80028d8:	f000 f8ac 	bl	8002a34 <_sbrk_r>
 80028dc:	3001      	adds	r0, #1
 80028de:	d101      	bne.n	80028e4 <sbrk_aligned+0x38>
 80028e0:	f04f 34ff 	mov.w	r4, #4294967295
 80028e4:	4620      	mov	r0, r4
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
 80028e8:	20000128 	.word	0x20000128

080028ec <_malloc_r>:
 80028ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028f0:	1ccd      	adds	r5, r1, #3
 80028f2:	f025 0503 	bic.w	r5, r5, #3
 80028f6:	3508      	adds	r5, #8
 80028f8:	2d0c      	cmp	r5, #12
 80028fa:	bf38      	it	cc
 80028fc:	250c      	movcc	r5, #12
 80028fe:	2d00      	cmp	r5, #0
 8002900:	4607      	mov	r7, r0
 8002902:	db01      	blt.n	8002908 <_malloc_r+0x1c>
 8002904:	42a9      	cmp	r1, r5
 8002906:	d905      	bls.n	8002914 <_malloc_r+0x28>
 8002908:	230c      	movs	r3, #12
 800290a:	2600      	movs	r6, #0
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4630      	mov	r0, r6
 8002910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002914:	4e2e      	ldr	r6, [pc, #184]	; (80029d0 <_malloc_r+0xe4>)
 8002916:	f000 f89d 	bl	8002a54 <__malloc_lock>
 800291a:	6833      	ldr	r3, [r6, #0]
 800291c:	461c      	mov	r4, r3
 800291e:	bb34      	cbnz	r4, 800296e <_malloc_r+0x82>
 8002920:	4629      	mov	r1, r5
 8002922:	4638      	mov	r0, r7
 8002924:	f7ff ffc2 	bl	80028ac <sbrk_aligned>
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	4604      	mov	r4, r0
 800292c:	d14d      	bne.n	80029ca <_malloc_r+0xde>
 800292e:	6834      	ldr	r4, [r6, #0]
 8002930:	4626      	mov	r6, r4
 8002932:	2e00      	cmp	r6, #0
 8002934:	d140      	bne.n	80029b8 <_malloc_r+0xcc>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	4631      	mov	r1, r6
 800293a:	4638      	mov	r0, r7
 800293c:	eb04 0803 	add.w	r8, r4, r3
 8002940:	f000 f878 	bl	8002a34 <_sbrk_r>
 8002944:	4580      	cmp	r8, r0
 8002946:	d13a      	bne.n	80029be <_malloc_r+0xd2>
 8002948:	6821      	ldr	r1, [r4, #0]
 800294a:	3503      	adds	r5, #3
 800294c:	1a6d      	subs	r5, r5, r1
 800294e:	f025 0503 	bic.w	r5, r5, #3
 8002952:	3508      	adds	r5, #8
 8002954:	2d0c      	cmp	r5, #12
 8002956:	bf38      	it	cc
 8002958:	250c      	movcc	r5, #12
 800295a:	4638      	mov	r0, r7
 800295c:	4629      	mov	r1, r5
 800295e:	f7ff ffa5 	bl	80028ac <sbrk_aligned>
 8002962:	3001      	adds	r0, #1
 8002964:	d02b      	beq.n	80029be <_malloc_r+0xd2>
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	442b      	add	r3, r5
 800296a:	6023      	str	r3, [r4, #0]
 800296c:	e00e      	b.n	800298c <_malloc_r+0xa0>
 800296e:	6822      	ldr	r2, [r4, #0]
 8002970:	1b52      	subs	r2, r2, r5
 8002972:	d41e      	bmi.n	80029b2 <_malloc_r+0xc6>
 8002974:	2a0b      	cmp	r2, #11
 8002976:	d916      	bls.n	80029a6 <_malloc_r+0xba>
 8002978:	1961      	adds	r1, r4, r5
 800297a:	42a3      	cmp	r3, r4
 800297c:	6025      	str	r5, [r4, #0]
 800297e:	bf18      	it	ne
 8002980:	6059      	strne	r1, [r3, #4]
 8002982:	6863      	ldr	r3, [r4, #4]
 8002984:	bf08      	it	eq
 8002986:	6031      	streq	r1, [r6, #0]
 8002988:	5162      	str	r2, [r4, r5]
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	4638      	mov	r0, r7
 800298e:	f104 060b 	add.w	r6, r4, #11
 8002992:	f000 f865 	bl	8002a60 <__malloc_unlock>
 8002996:	f026 0607 	bic.w	r6, r6, #7
 800299a:	1d23      	adds	r3, r4, #4
 800299c:	1af2      	subs	r2, r6, r3
 800299e:	d0b6      	beq.n	800290e <_malloc_r+0x22>
 80029a0:	1b9b      	subs	r3, r3, r6
 80029a2:	50a3      	str	r3, [r4, r2]
 80029a4:	e7b3      	b.n	800290e <_malloc_r+0x22>
 80029a6:	6862      	ldr	r2, [r4, #4]
 80029a8:	42a3      	cmp	r3, r4
 80029aa:	bf0c      	ite	eq
 80029ac:	6032      	streq	r2, [r6, #0]
 80029ae:	605a      	strne	r2, [r3, #4]
 80029b0:	e7ec      	b.n	800298c <_malloc_r+0xa0>
 80029b2:	4623      	mov	r3, r4
 80029b4:	6864      	ldr	r4, [r4, #4]
 80029b6:	e7b2      	b.n	800291e <_malloc_r+0x32>
 80029b8:	4634      	mov	r4, r6
 80029ba:	6876      	ldr	r6, [r6, #4]
 80029bc:	e7b9      	b.n	8002932 <_malloc_r+0x46>
 80029be:	230c      	movs	r3, #12
 80029c0:	4638      	mov	r0, r7
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	f000 f84c 	bl	8002a60 <__malloc_unlock>
 80029c8:	e7a1      	b.n	800290e <_malloc_r+0x22>
 80029ca:	6025      	str	r5, [r4, #0]
 80029cc:	e7de      	b.n	800298c <_malloc_r+0xa0>
 80029ce:	bf00      	nop
 80029d0:	20000124 	.word	0x20000124

080029d4 <_realloc_r>:
 80029d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029d8:	4680      	mov	r8, r0
 80029da:	4614      	mov	r4, r2
 80029dc:	460e      	mov	r6, r1
 80029de:	b921      	cbnz	r1, 80029ea <_realloc_r+0x16>
 80029e0:	4611      	mov	r1, r2
 80029e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029e6:	f7ff bf81 	b.w	80028ec <_malloc_r>
 80029ea:	b92a      	cbnz	r2, 80029f8 <_realloc_r+0x24>
 80029ec:	f7ff ff16 	bl	800281c <_free_r>
 80029f0:	4625      	mov	r5, r4
 80029f2:	4628      	mov	r0, r5
 80029f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029f8:	f000 f838 	bl	8002a6c <_malloc_usable_size_r>
 80029fc:	4284      	cmp	r4, r0
 80029fe:	4607      	mov	r7, r0
 8002a00:	d802      	bhi.n	8002a08 <_realloc_r+0x34>
 8002a02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a06:	d812      	bhi.n	8002a2e <_realloc_r+0x5a>
 8002a08:	4621      	mov	r1, r4
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f7ff ff6e 	bl	80028ec <_malloc_r>
 8002a10:	4605      	mov	r5, r0
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d0ed      	beq.n	80029f2 <_realloc_r+0x1e>
 8002a16:	42bc      	cmp	r4, r7
 8002a18:	4622      	mov	r2, r4
 8002a1a:	4631      	mov	r1, r6
 8002a1c:	bf28      	it	cs
 8002a1e:	463a      	movcs	r2, r7
 8002a20:	f7ff fed4 	bl	80027cc <memcpy>
 8002a24:	4631      	mov	r1, r6
 8002a26:	4640      	mov	r0, r8
 8002a28:	f7ff fef8 	bl	800281c <_free_r>
 8002a2c:	e7e1      	b.n	80029f2 <_realloc_r+0x1e>
 8002a2e:	4635      	mov	r5, r6
 8002a30:	e7df      	b.n	80029f2 <_realloc_r+0x1e>
	...

08002a34 <_sbrk_r>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	2300      	movs	r3, #0
 8002a38:	4d05      	ldr	r5, [pc, #20]	; (8002a50 <_sbrk_r+0x1c>)
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	f7fd fdfe 	bl	8000640 <_sbrk>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d102      	bne.n	8002a4e <_sbrk_r+0x1a>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	b103      	cbz	r3, 8002a4e <_sbrk_r+0x1a>
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	2000012c 	.word	0x2000012c

08002a54 <__malloc_lock>:
 8002a54:	4801      	ldr	r0, [pc, #4]	; (8002a5c <__malloc_lock+0x8>)
 8002a56:	f000 b811 	b.w	8002a7c <__retarget_lock_acquire_recursive>
 8002a5a:	bf00      	nop
 8002a5c:	20000130 	.word	0x20000130

08002a60 <__malloc_unlock>:
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <__malloc_unlock+0x8>)
 8002a62:	f000 b80c 	b.w	8002a7e <__retarget_lock_release_recursive>
 8002a66:	bf00      	nop
 8002a68:	20000130 	.word	0x20000130

08002a6c <_malloc_usable_size_r>:
 8002a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a70:	1f18      	subs	r0, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bfbc      	itt	lt
 8002a76:	580b      	ldrlt	r3, [r1, r0]
 8002a78:	18c0      	addlt	r0, r0, r3
 8002a7a:	4770      	bx	lr

08002a7c <__retarget_lock_acquire_recursive>:
 8002a7c:	4770      	bx	lr

08002a7e <__retarget_lock_release_recursive>:
 8002a7e:	4770      	bx	lr

08002a80 <_init>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr

08002a8c <_fini>:
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	bf00      	nop
 8002a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a92:	bc08      	pop	{r3}
 8002a94:	469e      	mov	lr, r3
 8002a96:	4770      	bx	lr
