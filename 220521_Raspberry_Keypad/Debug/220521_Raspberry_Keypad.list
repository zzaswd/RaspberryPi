
220521_Raspberry_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005814  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b48  08005b48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b50  08005b50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000800  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000870  20000870  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f2b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000238a  00000000  00000000  00033fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00036358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b0  00000000  00000000  000374b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a7d  00000000  00000000  00038560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012841  00000000  00000000  0005dfdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4824  00000000  00000000  0007081e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155042  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056d8  00000000  00000000  00155094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080059ac 	.word	0x080059ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080059ac 	.word	0x080059ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_write>:
/* USER CODE BEGIN 0 */

char *pArray[10] = {0};
char * pToken;

int _write(int file, uint8_t* TxBuffer, int len){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, TxBuffer, len, 0xff);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	23ff      	movs	r3, #255	; 0xff
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <_write+0x24>)
 80005ba:	f003 f804 	bl	80035c6 <HAL_UART_Transmit>
	return len;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200002fc 	.word	0x200002fc

080005cc <getKeyNumber>:
	TIM3->CNT =0;
	while(TIM3->CNT < delay );
}

int getKeyNumber()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
	int scanValue = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<4; i++ ){
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	e055      	b.n	8000688 <getKeyNumber+0xbc>
		uint16_t out_pin= 0x1 << (8+i);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3308      	adds	r3, #8
 80005e0:	2201      	movs	r2, #1
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(GPIOC, out_pin, GPIO_PIN_RESET);
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	482c      	ldr	r0, [pc, #176]	; (80006a0 <getKeyNumber+0xd4>)
 80005f0:	f001 fe98 	bl	8002324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, ~(out_pin), GPIO_PIN_SET);
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	43db      	mvns	r3, r3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	2201      	movs	r2, #1
 80005fc:	4619      	mov	r1, r3
 80005fe:	4828      	ldr	r0, [pc, #160]	; (80006a0 <getKeyNumber+0xd4>)
 8000600:	f001 fe90 	bl	8002324 <HAL_GPIO_WritePin>

		//GPIOD->ODR &= ~(0x00000010 << i);	// i=0: --> b3b2b1b0=1110, i=1 --> 1101 ... column
		HAL_Delay(30);
 8000604:	201e      	movs	r0, #30
 8000606:	f001 f8ab 	bl	8001760 <HAL_Delay>

		uint8_t in_pin = 0x10;
 800060a:	2310      	movs	r3, #16
 800060c:	717b      	strb	r3, [r7, #5]
		if(HAL_GPIO_ReadPin(GPIOD,in_pin) == GPIO_PIN_RESET) {scanValue = i+1; break;}
 800060e:	797b      	ldrb	r3, [r7, #5]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4619      	mov	r1, r3
 8000614:	4823      	ldr	r0, [pc, #140]	; (80006a4 <getKeyNumber+0xd8>)
 8000616:	f001 fe6d 	bl	80022f4 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d103      	bne.n	8000628 <getKeyNumber+0x5c>
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e032      	b.n	800068e <getKeyNumber+0xc2>
		else if(HAL_GPIO_ReadPin(GPIOD,in_pin<<1) == GPIO_PIN_RESET) {scanValue = i+5; break;}
 8000628:	797b      	ldrb	r3, [r7, #5]
 800062a:	b29b      	uxth	r3, r3
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b29b      	uxth	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <getKeyNumber+0xd8>)
 8000634:	f001 fe5e 	bl	80022f4 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d103      	bne.n	8000646 <getKeyNumber+0x7a>
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3305      	adds	r3, #5
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e023      	b.n	800068e <getKeyNumber+0xc2>
		else if(HAL_GPIO_ReadPin(GPIOD,in_pin<<2) == GPIO_PIN_RESET) {scanValue = i+9; break;}
 8000646:	797b      	ldrb	r3, [r7, #5]
 8000648:	b29b      	uxth	r3, r3
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b29b      	uxth	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	4814      	ldr	r0, [pc, #80]	; (80006a4 <getKeyNumber+0xd8>)
 8000652:	f001 fe4f 	bl	80022f4 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <getKeyNumber+0x98>
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	3309      	adds	r3, #9
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e014      	b.n	800068e <getKeyNumber+0xc2>
		else if(HAL_GPIO_ReadPin(GPIOD,in_pin<<3) == GPIO_PIN_RESET) {scanValue = i+13; break;}
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	b29b      	uxth	r3, r3
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	b29b      	uxth	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <getKeyNumber+0xd8>)
 8000670:	f001 fe40 	bl	80022f4 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <getKeyNumber+0xb6>
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	330d      	adds	r3, #13
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	e005      	b.n	800068e <getKeyNumber+0xc2>
	for(int i = 0; i<4; i++ ){
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3301      	adds	r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b03      	cmp	r3, #3
 800068c:	dda6      	ble.n	80005dc <getKeyNumber+0x10>

	}
	HAL_Delay(300);
 800068e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000692:	f001 f865 	bl	8001760 <HAL_Delay>
	return scanValue;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40020800 	.word	0x40020800
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <WriteString>:

int WriteString(int num, char* id, char * pass,int idx,int flag){
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
	if(flag == 0){	// ID
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f040 80a2 	bne.w	8000802 <WriteString+0x15a>
		if(num == 1) { id[idx] = 'a'; return flag;}
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d106      	bne.n	80006d2 <WriteString+0x2a>
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	2261      	movs	r2, #97	; 0x61
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	e139      	b.n	8000946 <WriteString+0x29e>
		else if(num == 2) { id[idx] = 'b'; return flag;}
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d106      	bne.n	80006e6 <WriteString+0x3e>
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	4413      	add	r3, r2
 80006de:	2262      	movs	r2, #98	; 0x62
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	e12f      	b.n	8000946 <WriteString+0x29e>
		else if(num == 3) { id[idx] = 'c'; return flag;}
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d106      	bne.n	80006fa <WriteString+0x52>
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	2263      	movs	r2, #99	; 0x63
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	e125      	b.n	8000946 <WriteString+0x29e>
		else if(num == 4) { id[idx] = ' '; return -1;}
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d107      	bne.n	8000710 <WriteString+0x68>
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	4413      	add	r3, r2
 8000706:	2220      	movs	r2, #32
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e11a      	b.n	8000946 <WriteString+0x29e>
		else if(num == 5) { id[idx] = 'd'; return flag;}
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b05      	cmp	r3, #5
 8000714:	d106      	bne.n	8000724 <WriteString+0x7c>
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	4413      	add	r3, r2
 800071c:	2264      	movs	r2, #100	; 0x64
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	e110      	b.n	8000946 <WriteString+0x29e>
		else if(num == 6) { id[idx] = 'e'; return flag;}
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b06      	cmp	r3, #6
 8000728:	d106      	bne.n	8000738 <WriteString+0x90>
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	4413      	add	r3, r2
 8000730:	2265      	movs	r2, #101	; 0x65
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	e106      	b.n	8000946 <WriteString+0x29e>
		else if(num == 7) { id[idx] = 'f'; return flag;}
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b07      	cmp	r3, #7
 800073c:	d106      	bne.n	800074c <WriteString+0xa4>
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	4413      	add	r3, r2
 8000744:	2266      	movs	r2, #102	; 0x66
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	e0fc      	b.n	8000946 <WriteString+0x29e>
		else if(num == 8) { id[idx] = 'g'; return flag;}
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b08      	cmp	r3, #8
 8000750:	d106      	bne.n	8000760 <WriteString+0xb8>
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	4413      	add	r3, r2
 8000758:	2267      	movs	r2, #103	; 0x67
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	e0f2      	b.n	8000946 <WriteString+0x29e>
		else if(num == 9) { id[idx] = '1'; return flag;}
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b09      	cmp	r3, #9
 8000764:	d106      	bne.n	8000774 <WriteString+0xcc>
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	2231      	movs	r2, #49	; 0x31
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	e0e8      	b.n	8000946 <WriteString+0x29e>
		else if(num == 10) { id[idx] = '2'; return flag;}
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b0a      	cmp	r3, #10
 8000778:	d106      	bne.n	8000788 <WriteString+0xe0>
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	4413      	add	r3, r2
 8000780:	2232      	movs	r2, #50	; 0x32
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	e0de      	b.n	8000946 <WriteString+0x29e>
		else if(num == 11) { id[idx] = '3'; return flag;}
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b0b      	cmp	r3, #11
 800078c:	d106      	bne.n	800079c <WriteString+0xf4>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	4413      	add	r3, r2
 8000794:	2233      	movs	r2, #51	; 0x33
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	e0d4      	b.n	8000946 <WriteString+0x29e>
		else if(num == 12) { id[idx] = '4'; return flag;}
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b0c      	cmp	r3, #12
 80007a0:	d106      	bne.n	80007b0 <WriteString+0x108>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	4413      	add	r3, r2
 80007a8:	2234      	movs	r2, #52	; 0x34
 80007aa:	701a      	strb	r2, [r3, #0]
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	e0ca      	b.n	8000946 <WriteString+0x29e>
		else if(num == 13) { id[idx] = '5'; return flag;}
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b0d      	cmp	r3, #13
 80007b4:	d106      	bne.n	80007c4 <WriteString+0x11c>
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	68ba      	ldr	r2, [r7, #8]
 80007ba:	4413      	add	r3, r2
 80007bc:	2235      	movs	r2, #53	; 0x35
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	e0c0      	b.n	8000946 <WriteString+0x29e>
		else if(num == 14) { id[idx] = '6'; return flag;}
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b0e      	cmp	r3, #14
 80007c8:	d106      	bne.n	80007d8 <WriteString+0x130>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	4413      	add	r3, r2
 80007d0:	2236      	movs	r2, #54	; 0x36
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	e0b6      	b.n	8000946 <WriteString+0x29e>
		else if(num == 15) { id[idx] = '7'; return flag;}
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d106      	bne.n	80007ec <WriteString+0x144>
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	4413      	add	r3, r2
 80007e4:	2237      	movs	r2, #55	; 0x37
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	e0ac      	b.n	8000946 <WriteString+0x29e>
		else if(num == 16) { id[idx] = '\0'; return 1;}
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2b10      	cmp	r3, #16
 80007f0:	f040 80a8 	bne.w	8000944 <WriteString+0x29c>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	4413      	add	r3, r2
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	e0a1      	b.n	8000946 <WriteString+0x29e>
	}
	else {			// password
		if(num == 1) { pass[idx] = 'a'; return 3;}
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d106      	bne.n	8000816 <WriteString+0x16e>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	2261      	movs	r2, #97	; 0x61
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	2303      	movs	r3, #3
 8000814:	e097      	b.n	8000946 <WriteString+0x29e>
		else if(num == 2) { pass[idx] = 'b'; return 3;}
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d106      	bne.n	800082a <WriteString+0x182>
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	2262      	movs	r2, #98	; 0x62
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	2303      	movs	r3, #3
 8000828:	e08d      	b.n	8000946 <WriteString+0x29e>
		else if(num == 3) { pass[idx] = 'c'; return 3;}
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d106      	bne.n	800083e <WriteString+0x196>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	2263      	movs	r2, #99	; 0x63
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	2303      	movs	r3, #3
 800083c:	e083      	b.n	8000946 <WriteString+0x29e>
		else if(num == 4) { pass[idx] = ' '; return -1;}
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2b04      	cmp	r3, #4
 8000842:	d107      	bne.n	8000854 <WriteString+0x1ac>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	2220      	movs	r2, #32
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e078      	b.n	8000946 <WriteString+0x29e>
		else if(num == 5) { pass[idx] = 'd'; return 3;}
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b05      	cmp	r3, #5
 8000858:	d106      	bne.n	8000868 <WriteString+0x1c0>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	2264      	movs	r2, #100	; 0x64
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	2303      	movs	r3, #3
 8000866:	e06e      	b.n	8000946 <WriteString+0x29e>
		else if(num == 6) { pass[idx] = 'e'; return 3;}
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b06      	cmp	r3, #6
 800086c:	d106      	bne.n	800087c <WriteString+0x1d4>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	2265      	movs	r2, #101	; 0x65
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	2303      	movs	r3, #3
 800087a:	e064      	b.n	8000946 <WriteString+0x29e>
		else if(num == 7) { pass[idx] = 'f'; return 3;}
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b07      	cmp	r3, #7
 8000880:	d106      	bne.n	8000890 <WriteString+0x1e8>
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	2266      	movs	r2, #102	; 0x66
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	2303      	movs	r3, #3
 800088e:	e05a      	b.n	8000946 <WriteString+0x29e>
		else if(num == 8) { pass[idx] = 'g'; return 3;}
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b08      	cmp	r3, #8
 8000894:	d106      	bne.n	80008a4 <WriteString+0x1fc>
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	2267      	movs	r2, #103	; 0x67
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	2303      	movs	r3, #3
 80008a2:	e050      	b.n	8000946 <WriteString+0x29e>
		else if(num == 9) { pass[idx] = '1'; return 3;}
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b09      	cmp	r3, #9
 80008a8:	d106      	bne.n	80008b8 <WriteString+0x210>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	2231      	movs	r2, #49	; 0x31
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	2303      	movs	r3, #3
 80008b6:	e046      	b.n	8000946 <WriteString+0x29e>
		else if(num == 10) { pass[idx] = '2'; return 3;}
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b0a      	cmp	r3, #10
 80008bc:	d106      	bne.n	80008cc <WriteString+0x224>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	2232      	movs	r2, #50	; 0x32
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	2303      	movs	r3, #3
 80008ca:	e03c      	b.n	8000946 <WriteString+0x29e>
		else if(num == 11) { pass[idx] = '3'; return 3;}
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b0b      	cmp	r3, #11
 80008d0:	d106      	bne.n	80008e0 <WriteString+0x238>
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	2233      	movs	r2, #51	; 0x33
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	2303      	movs	r3, #3
 80008de:	e032      	b.n	8000946 <WriteString+0x29e>
		else if(num == 12) { pass[idx] = '4'; return 3;}
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b0c      	cmp	r3, #12
 80008e4:	d106      	bne.n	80008f4 <WriteString+0x24c>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	2234      	movs	r2, #52	; 0x34
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	2303      	movs	r3, #3
 80008f2:	e028      	b.n	8000946 <WriteString+0x29e>
		else if(num == 13) { pass[idx] = '5'; return 3;}
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b0d      	cmp	r3, #13
 80008f8:	d106      	bne.n	8000908 <WriteString+0x260>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	2235      	movs	r2, #53	; 0x35
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	2303      	movs	r3, #3
 8000906:	e01e      	b.n	8000946 <WriteString+0x29e>
		else if(num == 14) { pass[idx] = '6'; return 3;}
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b0e      	cmp	r3, #14
 800090c:	d106      	bne.n	800091c <WriteString+0x274>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	2236      	movs	r2, #54	; 0x36
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	2303      	movs	r3, #3
 800091a:	e014      	b.n	8000946 <WriteString+0x29e>
		else if(num == 15) { pass[idx] = '7'; return 3;}
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b0f      	cmp	r3, #15
 8000920:	d106      	bne.n	8000930 <WriteString+0x288>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	2237      	movs	r2, #55	; 0x37
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	2303      	movs	r3, #3
 800092e:	e00a      	b.n	8000946 <WriteString+0x29e>
		else if(num == 16) { pass[idx] = '\0'; return 2;}
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b10      	cmp	r3, #16
 8000934:	d106      	bne.n	8000944 <WriteString+0x29c>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	2302      	movs	r3, #2
 8000942:	e000      	b.n	8000946 <WriteString+0x29e>
	}
	return 10;
 8000944:	230a      	movs	r3, #10
}
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <RegisterData>:

// ?��?���??��
void RegisterData(void){//flag -1 �??���? flag 0 ID, flag 1 pass, flag 2 ?���?
 8000954:	b580      	push	{r7, lr}
 8000956:	b09a      	sub	sp, #104	; 0x68
 8000958:	af02      	add	r7, sp, #8

			  char id[20] = "";
 800095a:	2300      	movs	r3, #0
 800095c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800095e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
			  char pass[20]= "";
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
			  int flag = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	65fb      	str	r3, [r7, #92]	; 0x5c
			  int idx = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58

			  while(1){
				  int pressedKey = getKeyNumber();
 8000986:	f7ff fe21 	bl	80005cc <getKeyNumber>
 800098a:	6578      	str	r0, [r7, #84]	; 0x54
				  int result = WriteString(pressedKey, id, pass, idx, flag);
 800098c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000990:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800099a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800099c:	f7ff fe84 	bl	80006a8 <WriteString>
 80009a0:	6538      	str	r0, [r7, #80]	; 0x50
				  if(result == -1){	// lcd ?��면에?�� �??���?
 80009a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d116      	bne.n	80009d8 <RegisterData+0x84>
					  if(idx!=0){
 80009aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0ea      	beq.n	8000986 <RegisterData+0x32>
						  idx--;
 80009b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009b2:	3b01      	subs	r3, #1
 80009b4:	65bb      	str	r3, [r7, #88]	; 0x58
						  if(flag == 0) id[idx]= ' ';
 80009b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d106      	bne.n	80009ca <RegisterData+0x76>
 80009bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80009c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009c2:	4413      	add	r3, r2
 80009c4:	2220      	movs	r2, #32
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e7dd      	b.n	8000986 <RegisterData+0x32>
						  else pass[idx] = ' ';
 80009ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009d0:	4413      	add	r3, r2
 80009d2:	2220      	movs	r2, #32
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e7d6      	b.n	8000986 <RegisterData+0x32>
					  }
				  }
				  else if(result == 1){ flag = 1; idx =0; }	// cursor ?��?��
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d104      	bne.n	80009e8 <RegisterData+0x94>
 80009de:	2301      	movs	r3, #1
 80009e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009e2:	2300      	movs	r3, #0
 80009e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80009e6:	e7ce      	b.n	8000986 <RegisterData+0x32>
				  else if(result == 2){
 80009e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d114      	bne.n	8000a18 <RegisterData+0xc4>

					  // data 베이?��?�� ?��?��
					  char temp[40];
					  sprintf(temp,"100:%s:%sL",id,pass);
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80009f6:	4638      	mov	r0, r7
 80009f8:	490d      	ldr	r1, [pc, #52]	; (8000a30 <RegisterData+0xdc>)
 80009fa:	f003 fda5 	bl	8004548 <siprintf>
					  HAL_UART_Transmit(&huart3, temp, strlen(temp), 20);
 80009fe:	463b      	mov	r3, r7
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fbf5 	bl	80001f0 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	4639      	mov	r1, r7
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <RegisterData+0xe0>)
 8000a10:	f002 fdd9 	bl	80035c6 <HAL_UART_Transmit>
					  break;
 8000a14:	bf00      	nop
				  // lcd.print(id)

			  }
			  //로그?�� ?��면으�? �?�?

}
 8000a16:	e008      	b.n	8000a2a <RegisterData+0xd6>
				  else if(result == 10) continue; // ?��?��?�� 값�? ?��?��처리
 8000a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a1a:	2b0a      	cmp	r3, #10
 8000a1c:	d003      	beq.n	8000a26 <RegisterData+0xd2>
				  else idx++;
 8000a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a20:	3301      	adds	r3, #1
 8000a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a24:	e7af      	b.n	8000986 <RegisterData+0x32>
				  else if(result == 10) continue; // ?��?��?�� 값�? ?��?��처리
 8000a26:	bf00      	nop
			  while(1){
 8000a28:	e7ad      	b.n	8000986 <RegisterData+0x32>
}
 8000a2a:	3760      	adds	r7, #96	; 0x60
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	080059c4 	.word	0x080059c4
 8000a34:	200002fc 	.word	0x200002fc

08000a38 <ID_Check>:

void ID_Check(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000a3e:	af00      	add	r7, sp, #0
	  // �? ?��?��?���? ?��?��?���? ?��?��?��?�� 200 보내�?
			  char temp[10];
			  sprintf(temp,"%dL",200);
 8000a40:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000a44:	22c8      	movs	r2, #200	; 0xc8
 8000a46:	4954      	ldr	r1, [pc, #336]	; (8000b98 <ID_Check+0x160>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fd7d 	bl	8004548 <siprintf>
			  HAL_UART_Transmit(&huart3, temp, strlen(temp), 10);
 8000a4e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbcc 	bl	80001f0 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 8000a60:	230a      	movs	r3, #10
 8000a62:	484e      	ldr	r0, [pc, #312]	; (8000b9c <ID_Check+0x164>)
 8000a64:	f002 fdaf 	bl	80035c6 <HAL_UART_Transmit>

			  uint8_t RxBuffer[100];
			  uint8_t Rx_temp;
			  int str_len;
			  char* ID[100]={0};
 8000a68:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000a6c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000a70:	4618      	mov	r0, r3
 8000a72:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a76:	461a      	mov	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f003 fce7 	bl	800444c <memset>
			  int idx = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
			  while(1){
				  if(HAL_UART_Receive(&huart3, &Rx_temp, 1, 10)==HAL_OK){
 8000a84:	f207 1197 	addw	r1, r7, #407	; 0x197
 8000a88:	230a      	movs	r3, #10
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4843      	ldr	r0, [pc, #268]	; (8000b9c <ID_Check+0x164>)
 8000a8e:	f002 fe2c 	bl	80036ea <HAL_UART_Receive>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f5      	bne.n	8000a84 <ID_Check+0x4c>
					  RxBuffer[idx++] = Rx_temp;
 8000a98:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8000aa2:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8000aa6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000aaa:	443b      	add	r3, r7
 8000aac:	f803 2c80 	strb.w	r2, [r3, #-128]
					  if(Rx_temp == 'L') break;
 8000ab0:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000ab4:	2b4c      	cmp	r3, #76	; 0x4c
 8000ab6:	d000      	beq.n	8000aba <ID_Check+0x82>
				  if(HAL_UART_Receive(&huart3, &Rx_temp, 1, 10)==HAL_OK){
 8000ab8:	e7e4      	b.n	8000a84 <ID_Check+0x4c>
					  if(Rx_temp == 'L') break;
 8000aba:	bf00      	nop
				  }
			  }
			  RxBuffer[idx-1] = '\0';
 8000abc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000ac6:	443b      	add	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f803 2c80 	strb.w	r2, [r3, #-128]
			  str_len = strlen(RxBuffer);
 8000ace:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fb8c 	bl	80001f0 <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


			  pToken = strtok(RxBuffer,":");
 8000ade:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ae2:	492f      	ldr	r1, [pc, #188]	; (8000ba0 <ID_Check+0x168>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fd4f 	bl	8004588 <strtok>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <ID_Check+0x16c>)
 8000aee:	6013      	str	r3, [r2, #0]
			  int i = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			  while(pToken !=NULL){
 8000af6:	e019      	b.n	8000b2c <ID_Check+0xf4>
				  ID[i] = pToken;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <ID_Check+0x16c>)
 8000afa:	6819      	ldr	r1, [r3, #0]
 8000afc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000b00:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000b04:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  if(++i>10)
 8000b0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b10:	3301      	adds	r3, #1
 8000b12:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000b16:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	dc0b      	bgt.n	8000b36 <ID_Check+0xfe>
					  break;
				  pToken = strtok(NULL,":");
 8000b1e:	4920      	ldr	r1, [pc, #128]	; (8000ba0 <ID_Check+0x168>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f003 fd31 	bl	8004588 <strtok>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <ID_Check+0x16c>)
 8000b2a:	6013      	str	r3, [r2, #0]
			  while(pToken !=NULL){
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <ID_Check+0x16c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1e1      	bne.n	8000af8 <ID_Check+0xc0>
 8000b34:	e000      	b.n	8000b38 <ID_Check+0x100>
					  break;
 8000b36:	bf00      	nop
			  }
			  int line = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
			  while(1){

				  // LCD 출력
				  // ID[line] 첫번�? ?��?��, ID[line+1]?�� ?��번째 ?��?��
				  if(getKeyNumber()==1){ //up
 8000b3e:	f7ff fd45 	bl	80005cc <getKeyNumber>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d109      	bne.n	8000b5c <ID_Check+0x124>
					  if(line !=0) line--;
 8000b48:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f6      	beq.n	8000b3e <ID_Check+0x106>
 8000b50:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000b54:	3b01      	subs	r3, #1
 8000b56:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000b5a:	e7f0      	b.n	8000b3e <ID_Check+0x106>
				  }
				  else if(getKeyNumber()==2){
 8000b5c:	f7ff fd36 	bl	80005cc <getKeyNumber>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d10b      	bne.n	8000b7e <ID_Check+0x146>
					  if(line<i) line ++;
 8000b66:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000b6a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dae5      	bge.n	8000b3e <ID_Check+0x106>
 8000b72:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000b76:	3301      	adds	r3, #1
 8000b78:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000b7c:	e7df      	b.n	8000b3e <ID_Check+0x106>
				  }
				  else if(getKeyNumber()==4) break;
 8000b7e:	f7ff fd25 	bl	80005cc <getKeyNumber>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d000      	beq.n	8000b8a <ID_Check+0x152>
				  if(getKeyNumber()==1){ //up
 8000b88:	e7d9      	b.n	8000b3e <ID_Check+0x106>
				  else if(getKeyNumber()==4) break;
 8000b8a:	bf00      	nop
			  }

}
 8000b8c:	bf00      	nop
 8000b8e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	080059d0 	.word	0x080059d0
 8000b9c:	200002fc 	.word	0x200002fc
 8000ba0:	080059d4 	.word	0x080059d4
 8000ba4:	2000084c 	.word	0x2000084c

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b092      	sub	sp, #72	; 0x48
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fd65 	bl	800167c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f857 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f9b3 	bl	8000f20 <MX_GPIO_Init>
  MX_ETH_Init();
 8000bba:	f000 f8bd 	bl	8000d38 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000bbe:	f000 f957 	bl	8000e70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bc2:	f000 f97f 	bl	8000ec4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000bc6:	f000 f905 	bl	8000dd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  int pressedKey;
  HAL_TIM_Base_Start(&htim3);
 8000bca:	4824      	ldr	r0, [pc, #144]	; (8000c5c <main+0xb4>)
 8000bcc:	f002 f9c8 	bl	8002f60 <HAL_TIM_Base_Start>
  // 12 :
  // 16 :  ?��?��

  while (1)
  {
	  pressedKey = getKeyNumber();
 8000bd0:	f7ff fcfc 	bl	80005cc <getKeyNumber>
 8000bd4:	63f8      	str	r0, [r7, #60]	; 0x3c

	  if(pressedKey == 16)  RegisterData();
 8000bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bd8:	2b10      	cmp	r3, #16
 8000bda:	d102      	bne.n	8000be2 <main+0x3a>
 8000bdc:	f7ff feba 	bl	8000954 <RegisterData>
 8000be0:	e031      	b.n	8000c46 <main+0x9e>

	  else if(pressedKey == 12) ID_Check();
 8000be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000be4:	2b0c      	cmp	r3, #12
 8000be6:	d102      	bne.n	8000bee <main+0x46>
 8000be8:	f7ff ff26 	bl	8000a38 <ID_Check>
 8000bec:	e02b      	b.n	8000c46 <main+0x9e>

	  else if(pressedKey > 0){
 8000bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	dd28      	ble.n	8000c46 <main+0x9e>
		  // ?���? 보내�?
		  // ???�� 기다리기
		  // �? ???��?���?.
		  char id[20];
		  char pass[20];
		  int flag = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
		  int idx = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
		  int count = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
		  while(1){
			  pressedKey = getKeyNumber();
 8000c00:	f7ff fce4 	bl	80005cc <getKeyNumber>
 8000c04:	63f8      	str	r0, [r7, #60]	; 0x3c
			  int result = WriteString(pressedKey, id, pass, idx, flag);
 8000c06:	1d3a      	adds	r2, r7, #4
 8000c08:	f107 0118 	add.w	r1, r7, #24
 8000c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c14:	f7ff fd48 	bl	80006a8 <WriteString>
 8000c18:	62f8      	str	r0, [r7, #44]	; 0x2c
			  if(result == -1){	idx--; continue;  }
 8000c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d103      	bne.n	8000c2a <main+0x82>
 8000c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c24:	3b01      	subs	r3, #1
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
 8000c28:	e00b      	b.n	8000c42 <main+0x9a>
			  else if(result == 1){ flag = 1; }
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d102      	bne.n	8000c36 <main+0x8e>
 8000c30:	2301      	movs	r3, #1
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c34:	e7e4      	b.n	8000c00 <main+0x58>
			  else if(flag == 2){
 8000c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d003      	beq.n	8000c44 <main+0x9c>
				  // 맞으�?  break;
				  // ??리면 count +1 ?���? ?��?�� ?���? (idx =0, flag = 0)
				  // data 베이?��?�� ?��?��
				  break;
			  }
			  else idx++;
 8000c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3e:	3301      	adds	r3, #1
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
		  while(1){
 8000c42:	e7dd      	b.n	8000c00 <main+0x58>
				  break;
 8000c44:	bf00      	nop
		  }

	  }


	  if(pressedKey == 12){
 8000c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c48:	2b0c      	cmp	r3, #12
 8000c4a:	d1c1      	bne.n	8000bd0 <main+0x28>
		  // ?��?��?��?? ?��?��?��?�� ?���?
		  printf("ID register\r\n");
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <main+0xb8>)
 8000c4e:	f003 fc73 	bl	8004538 <puts>
		  // LCD ?���?
		  while(1){
			  pressedKey = getKeyNumber();
 8000c52:	f7ff fcbb 	bl	80005cc <getKeyNumber>
 8000c56:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c58:	e7fb      	b.n	8000c52 <main+0xaa>
 8000c5a:	bf00      	nop
 8000c5c:	200002b4 	.word	0x200002b4
 8000c60:	080059d8 	.word	0x080059d8

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	; 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2230      	movs	r2, #48	; 0x30
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 fbea 	bl	800444c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <SystemClock_Config+0xd0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <SystemClock_Config+0xd0>)
 8000cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <SystemClock_Config+0xd0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cd8:	23a8      	movs	r3, #168	; 0xa8
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fc51 	bl	8002590 <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf4:	f000 f9fa 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2105      	movs	r1, #5
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 feb2 	bl	8002a80 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d22:	f000 f9e3 	bl	80010ec <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	; 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_ETH_Init+0x84>)
 8000d3e:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <MX_ETH_Init+0x88>)
 8000d40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_ETH_Init+0x8c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_ETH_Init+0x8c>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_ETH_Init+0x8c>)
 8000d50:	22e1      	movs	r2, #225	; 0xe1
 8000d52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_ETH_Init+0x8c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_ETH_Init+0x8c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_ETH_Init+0x8c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_ETH_Init+0x84>)
 8000d68:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <MX_ETH_Init+0x8c>)
 8000d6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_ETH_Init+0x84>)
 8000d6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d72:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_ETH_Init+0x84>)
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <MX_ETH_Init+0x90>)
 8000d78:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_ETH_Init+0x84>)
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <MX_ETH_Init+0x94>)
 8000d7e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_ETH_Init+0x84>)
 8000d82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d86:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_ETH_Init+0x84>)
 8000d8a:	f000 fdf3 	bl	8001974 <HAL_ETH_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d94:	f000 f9aa 	bl	80010ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d98:	2238      	movs	r2, #56	; 0x38
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_ETH_Init+0x98>)
 8000d9e:	f003 fb55 	bl	800444c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_ETH_Init+0x98>)
 8000da4:	2221      	movs	r2, #33	; 0x21
 8000da6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_ETH_Init+0x98>)
 8000daa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000dae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_ETH_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000204 	.word	0x20000204
 8000dc0:	40028000 	.word	0x40028000
 8000dc4:	20000850 	.word	0x20000850
 8000dc8:	20000164 	.word	0x20000164
 8000dcc:	200000c4 	.word	0x200000c4
 8000dd0:	2000008c 	.word	0x2000008c

08000dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	463b      	mov	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000df2:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <MX_TIM3_Init+0x98>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000df8:	2253      	movs	r2, #83	; 0x53
 8000dfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000e04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000e18:	f002 f852 	bl	8002ec0 <HAL_TIM_Base_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e22:	f000 f963 	bl	80010ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4619      	mov	r1, r3
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000e34:	f002 f8fc 	bl	8003030 <HAL_TIM_ConfigClockSource>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 f955 	bl	80010ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_TIM3_Init+0x94>)
 8000e50:	f002 faf0 	bl	8003434 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e5a:	f000 f947 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200002b4 	.word	0x200002b4
 8000e6c:	40000400 	.word	0x40000400

08000e70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART3_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000ea8:	f002 fb40 	bl	800352c <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f000 f91b 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200002fc 	.word	0x200002fc
 8000ec0:	40004800 	.word	0x40004800

08000ec4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f08:	f001 fa25 	bl	8002356 <HAL_PCD_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 f8eb 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000340 	.word	0x20000340

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b67      	ldr	r3, [pc, #412]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a66      	ldr	r2, [pc, #408]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b64      	ldr	r3, [pc, #400]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	4b60      	ldr	r3, [pc, #384]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a5f      	ldr	r2, [pc, #380]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b5d      	ldr	r3, [pc, #372]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b59      	ldr	r3, [pc, #356]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b52      	ldr	r3, [pc, #328]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b48      	ldr	r3, [pc, #288]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b44      	ldr	r3, [pc, #272]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fe4:	483d      	ldr	r0, [pc, #244]	; (80010dc <MX_GPIO_Init+0x1bc>)
 8000fe6:	f001 f99d 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000ff0:	483b      	ldr	r0, [pc, #236]	; (80010e0 <MX_GPIO_Init+0x1c0>)
 8000ff2:	f001 f997 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	483a      	ldr	r0, [pc, #232]	; (80010e4 <MX_GPIO_Init+0x1c4>)
 8000ffc:	f001 f992 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001006:	4838      	ldr	r0, [pc, #224]	; (80010e8 <MX_GPIO_Init+0x1c8>)
 8001008:	f001 f98c 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800100c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001012:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4831      	ldr	r0, [pc, #196]	; (80010e8 <MX_GPIO_Init+0x1c8>)
 8001024:	f000 ffba 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001028:	f244 0381 	movw	r3, #16513	; 0x4081
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <MX_GPIO_Init+0x1bc>)
 8001042:	f000 ffab 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001046:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4820      	ldr	r0, [pc, #128]	; (80010e0 <MX_GPIO_Init+0x1c0>)
 8001060:	f000 ff9c 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <MX_GPIO_Init+0x1c4>)
 800107c:	f000 ff8e 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_GPIO_Init+0x1c4>)
 8001094:	f000 ff82 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001098:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_GPIO_Init+0x1c8>)
 80010b2:	f000 ff73 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010b6:	23f0      	movs	r3, #240	; 0xf0
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010be:	2301      	movs	r3, #1
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_GPIO_Init+0x1c0>)
 80010ca:	f000 ff67 	bl	8001f9c <HAL_GPIO_Init>

}
 80010ce:	bf00      	nop
 80010d0:	3730      	adds	r7, #48	; 0x30
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40020800 	.word	0x40020800

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_MspInit+0x4c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x4c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a55      	ldr	r2, [pc, #340]	; (80012bc <HAL_ETH_MspInit+0x174>)
 8001166:	4293      	cmp	r3, r2
 8001168:	f040 80a4 	bne.w	80012b4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 8001176:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001184:	623b      	str	r3, [r7, #32]
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 8001192:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a44      	ldr	r2, [pc, #272]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 800121e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_ETH_MspInit+0x178>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001230:	2332      	movs	r3, #50	; 0x32
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001240:	230b      	movs	r3, #11
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	481e      	ldr	r0, [pc, #120]	; (80012c4 <HAL_ETH_MspInit+0x17c>)
 800124c:	f000 fea6 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001250:	2386      	movs	r3, #134	; 0x86
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001260:	230b      	movs	r3, #11
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	4817      	ldr	r0, [pc, #92]	; (80012c8 <HAL_ETH_MspInit+0x180>)
 800126c:	f000 fe96 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001282:	230b      	movs	r3, #11
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <HAL_ETH_MspInit+0x184>)
 800128e:	f000 fe85 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001292:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a4:	230b      	movs	r3, #11
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <HAL_ETH_MspInit+0x188>)
 80012b0:	f000 fe74 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3738      	adds	r7, #56	; 0x38
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40028000 	.word	0x40028000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40021800 	.word	0x40021800

080012d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_TIM_Base_MspInit+0x3c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10d      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_TIM_Base_MspInit+0x40>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_TIM_Base_MspInit+0x40>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_TIM_Base_MspInit+0x40>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40000400 	.word	0x40000400
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_UART_MspInit+0x84>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12c      	bne.n	8001394 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x88>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001372:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001384:	2307      	movs	r3, #7
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_UART_MspInit+0x8c>)
 8001390:	f000 fe04 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40004800 	.word	0x40004800
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020c00 	.word	0x40020c00

080013a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c8:	d13f      	bne.n	800144a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_PCD_MspInit+0xac>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a20      	ldr	r2, [pc, #128]	; (8001454 <HAL_PCD_MspInit+0xac>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_PCD_MspInit+0xac>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013f8:	230a      	movs	r3, #10
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <HAL_PCD_MspInit+0xb0>)
 8001404:	f000 fdca 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	480e      	ldr	r0, [pc, #56]	; (8001458 <HAL_PCD_MspInit+0xb0>)
 800141e:	f000 fdbd 	bl	8001f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_PCD_MspInit+0xac>)
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_PCD_MspInit+0xac>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	6353      	str	r3, [r2, #52]	; 0x34
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_PCD_MspInit+0xac>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_PCD_MspInit+0xac>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_PCD_MspInit+0xac>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 f93a 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	return 1;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_kill>:

int _kill(int pid, int sig)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ca:	f002 ff95 	bl	80043f8 <__errno>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2216      	movs	r2, #22
 80014d2:	601a      	str	r2, [r3, #0]
	return -1;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_exit>:

void _exit (int status)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ffe7 	bl	80014c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014f2:	e7fe      	b.n	80014f2 <_exit+0x12>

080014f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00a      	b.n	800151c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001506:	f3af 8000 	nop.w
 800150a:	4601      	mov	r1, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	b2ca      	uxtb	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf0      	blt.n	8001506 <_read+0x12>
	}

return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_close>:
	}
	return len;
}

int _close(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
	return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001556:	605a      	str	r2, [r3, #4]
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_isatty>:

int _isatty(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	return 1;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f002 ff16 	bl	80043f8 <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20030000 	.word	0x20030000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	20000858 	.word	0x20000858
 8001600:	20000870 	.word	0x20000870

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <SystemInit+0x20>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <SystemInit+0x20>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001660 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800162e:	490e      	ldr	r1, [pc, #56]	; (8001668 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001644:	4c0b      	ldr	r4, [pc, #44]	; (8001674 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001652:	f7ff ffd7 	bl	8001604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001656:	f002 fed5 	bl	8004404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff faa5 	bl	8000ba8 <main>
  bx  lr    
 800165e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001660:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001668:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800166c:	08005b58 	.word	0x08005b58
  ldr r2, =_sbss
 8001670:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001674:	20000870 	.word	0x20000870

08001678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_Init+0x40>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_Init+0x40>)
 8001692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_Init+0x40>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f931 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff fd22 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f93b 	bl	800195a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f911 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000000 	.word	0x20000000
 8001718:	20000008 	.word	0x20000008
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	2000085c 	.word	0x2000085c

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000085c 	.word	0x2000085c

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff47 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff5c 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff8e 	bl	8001860 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5d 	bl	800180c <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffb0 	bl	80018c8 <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e06c      	b.n	8001a60 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2223      	movs	r2, #35	; 0x23
 8001994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fbd5 	bl	8001148 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4927      	ldr	r1, [pc, #156]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f0:	f7ff feaa 	bl	8001748 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019f6:	e011      	b.n	8001a1c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019f8:	f7ff fea6 	bl	8001748 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a06:	d909      	bls.n	8001a1c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	22e0      	movs	r2, #224	; 0xe0
 8001a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e021      	b.n	8001a60 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1e4      	bne.n	80019f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f944 	bl	8001cbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f9eb 	bl	8001e10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fa41 	bl	8001ec2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	461a      	mov	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f9a9 	bl	8001da0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40013800 	.word	0x40013800

08001a70 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <ETH_SetMACConfig+0x134>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	7c1b      	ldrb	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <ETH_SetMACConfig+0x28>
 8001a92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a96:	e000      	b.n	8001a9a <ETH_SetMACConfig+0x2a>
 8001a98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	7c5b      	ldrb	r3, [r3, #17]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <ETH_SetMACConfig+0x38>
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa6:	e000      	b.n	8001aaa <ETH_SetMACConfig+0x3a>
 8001aa8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aaa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ab0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	7fdb      	ldrb	r3, [r3, #31]
 8001ab6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ab8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	7f92      	ldrb	r2, [r2, #30]
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d102      	bne.n	8001ace <ETH_SetMACConfig+0x5e>
 8001ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001acc:	e000      	b.n	8001ad0 <ETH_SetMACConfig+0x60>
 8001ace:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ad0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	7f1b      	ldrb	r3, [r3, #28]
 8001ad6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ad8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ade:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	791b      	ldrb	r3, [r3, #4]
 8001ae4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ae6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aee:	2a00      	cmp	r2, #0
 8001af0:	d102      	bne.n	8001af8 <ETH_SetMACConfig+0x88>
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	e000      	b.n	8001afa <ETH_SetMACConfig+0x8a>
 8001af8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001afa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7bdb      	ldrb	r3, [r3, #15]
 8001b00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b12:	4313      	orrs	r3, r2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fe18 	bl	8001760 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b56:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001b5c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001b64:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001b6c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b74:	4313      	orrs	r3, r2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fde7 	bl	8001760 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	ff20810f 	.word	0xff20810f

08001ba8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <ETH_SetDMAConfig+0x110>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	7b1b      	ldrb	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <ETH_SetDMAConfig+0x2c>
 8001bce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bd2:	e000      	b.n	8001bd6 <ETH_SetDMAConfig+0x2e>
 8001bd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	7b5b      	ldrb	r3, [r3, #13]
 8001bda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	7f52      	ldrb	r2, [r2, #29]
 8001be2:	2a00      	cmp	r2, #0
 8001be4:	d102      	bne.n	8001bec <ETH_SetDMAConfig+0x44>
 8001be6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bea:	e000      	b.n	8001bee <ETH_SetDMAConfig+0x46>
 8001bec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	7b9b      	ldrb	r3, [r3, #14]
 8001bf4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bf6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7f1b      	ldrb	r3, [r3, #28]
 8001c02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	7f9b      	ldrb	r3, [r3, #30]
 8001c0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f7ff fd8e 	bl	8001760 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	791b      	ldrb	r3, [r3, #4]
 8001c56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f7ff fd5f 	bl	8001760 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	f8de3f23 	.word	0xf8de3f23

08001cbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0a6      	sub	sp, #152	; 0x98
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d34:	4619      	mov	r1, r3
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fe9a 	bl	8001a70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d70:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff08 	bl	8001ba8 <ETH_SetDMAConfig>
}
 8001d98:	bf00      	nop
 8001d9a:	3798      	adds	r7, #152	; 0x98
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3305      	adds	r3, #5
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	3204      	adds	r2, #4
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <ETH_MACAddressConfig+0x68>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3303      	adds	r3, #3
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	061a      	lsls	r2, r3, #24
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	041b      	lsls	r3, r3, #16
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3301      	adds	r3, #1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	4313      	orrs	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <ETH_MACAddressConfig+0x6c>)
 8001df2:	4413      	add	r3, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	6013      	str	r3, [r2, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40028040 	.word	0x40028040
 8001e0c:	40028044 	.word	0x40028044

08001e10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e03e      	b.n	8001e9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68d9      	ldr	r1, [r3, #12]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	3206      	adds	r2, #6
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d80c      	bhi.n	8001e80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68d9      	ldr	r1, [r3, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	e004      	b.n	8001e8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d9bd      	bls.n	8001e1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb4:	611a      	str	r2, [r3, #16]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e046      	b.n	8001f5e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	3212      	adds	r2, #18
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d80c      	bhi.n	8001f4e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6919      	ldr	r1, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	e004      	b.n	8001f58 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d9b5      	bls.n	8001ed0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8e:	60da      	str	r2, [r3, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e177      	b.n	80022a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 8166 	bne.w	80022a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80c0 	beq.w	80022a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a65      	ldr	r2, [pc, #404]	; (80022c0 <HAL_GPIO_Init+0x324>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_GPIO_Init+0x328>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_GPIO_Init+0x32c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d037      	beq.n	80021da <HAL_GPIO_Init+0x23e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_GPIO_Init+0x330>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_GPIO_Init+0x23a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a56      	ldr	r2, [pc, #344]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x236>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a55      	ldr	r2, [pc, #340]	; (80022d4 <HAL_GPIO_Init+0x338>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x232>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_GPIO_Init+0x33c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x22e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a53      	ldr	r2, [pc, #332]	; (80022dc <HAL_GPIO_Init+0x340>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x22a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <HAL_GPIO_Init+0x344>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a51      	ldr	r2, [pc, #324]	; (80022e4 <HAL_GPIO_Init+0x348>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x222>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a50      	ldr	r2, [pc, #320]	; (80022e8 <HAL_GPIO_Init+0x34c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x21e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_GPIO_Init+0x350>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x21a>
 80021b2:	2309      	movs	r3, #9
 80021b4:	e012      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021b6:	230a      	movs	r3, #10
 80021b8:	e010      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e00e      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021be:	2307      	movs	r3, #7
 80021c0:	e00c      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e00a      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021c6:	2305      	movs	r3, #5
 80021c8:	e008      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ca:	2304      	movs	r3, #4
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e004      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021da:	2300      	movs	r3, #0
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f002 0203 	and.w	r2, r2, #3
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4093      	lsls	r3, r2
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ec:	4935      	ldr	r1, [pc, #212]	; (80022c4 <HAL_GPIO_Init+0x328>)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_GPIO_Init+0x354>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221e:	4a34      	ldr	r2, [pc, #208]	; (80022f0 <HAL_GPIO_Init+0x354>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002224:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <HAL_GPIO_Init+0x354>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002248:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <HAL_GPIO_Init+0x354>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_GPIO_Init+0x354>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002272:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <HAL_GPIO_Init+0x354>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_GPIO_Init+0x354>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_GPIO_Init+0x354>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	f67f ae84 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020400 	.word	0x40020400
 80022d0:	40020800 	.word	0x40020800
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40021400 	.word	0x40021400
 80022e0:	40021800 	.word	0x40021800
 80022e4:	40021c00 	.word	0x40021c00
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40022400 	.word	0x40022400
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e001      	b.n	8002316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002358:	b08f      	sub	sp, #60	; 0x3c
 800235a:	af0a      	add	r7, sp, #40	; 0x28
 800235c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e10f      	b.n	8002588 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff f810 	bl	80013a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 fd85 	bl	8003eb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	687e      	ldr	r6, [r7, #4]
 80023b4:	466d      	mov	r5, sp
 80023b6:	f106 0410 	add.w	r4, r6, #16
 80023ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ca:	1d33      	adds	r3, r6, #4
 80023cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	f001 fd10 	bl	8003df4 <USB_CoreInit>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0d0      	b.n	8002588 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 fd73 	bl	8003ed8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e04a      	b.n	800248e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	333d      	adds	r3, #61	; 0x3d
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	333c      	adds	r3, #60	; 0x3c
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	b298      	uxth	r0, r3
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3344      	adds	r3, #68	; 0x44
 8002434:	4602      	mov	r2, r0
 8002436:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3340      	adds	r3, #64	; 0x40
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3348      	adds	r3, #72	; 0x48
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	334c      	adds	r3, #76	; 0x4c
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3354      	adds	r3, #84	; 0x54
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3af      	bcc.n	80023f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e044      	b.n	8002528 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3301      	adds	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3b5      	bcc.n	800249e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	687e      	ldr	r6, [r7, #4]
 800253a:	466d      	mov	r5, sp
 800253c:	f106 0410 	add.w	r4, r6, #16
 8002540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002550:	1d33      	adds	r3, r6, #4
 8002552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002554:	6838      	ldr	r0, [r7, #0]
 8002556:	f001 fd0b 	bl	8003f70 <USB_DevInit>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e00d      	b.n	8002588 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f001 fed6 	bl	8004332 <USB_DevDisconnect>

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e267      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d075      	beq.n	800269a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d00c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d112      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d2:	d10b      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05b      	beq.n	8002698 <HAL_RCC_OscConfig+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d157      	bne.n	8002698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e242      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x74>
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6c      	ldr	r2, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002628:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff f87e 	bl	8001748 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff f87a 	bl	8001748 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e207      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xc0>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff f86a 	bl	8001748 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff f866 	bl	8001748 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1f3      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0xe8>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1c7      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff f81f 	bl	8001748 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff f81b 	bl	8001748 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1a8      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4925      	ldr	r1, [pc, #148]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fffe 	bl	8001748 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fffa 	bl	8001748 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e187      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d036      	beq.n	80027e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe ffde 	bl	8001748 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe ffda 	bl	8001748 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e167      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x200>
 80027ae:	e01b      	b.n	80027e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe ffc7 	bl	8001748 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe ffc3 	bl	8001748 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d907      	bls.n	80027dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e150      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ea      	bne.n	80027be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b77      	ldr	r3, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b74      	ldr	r3, [pc, #464]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a73      	ldr	r2, [pc, #460]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7fe ff83 	bl	8001748 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7fe ff7f 	bl	8001748 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e10c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x2ea>
 800286c:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a63      	ldr	r2, [pc, #396]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	e01c      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x30c>
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a5e      	ldr	r2, [pc, #376]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800289c:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe ff44 	bl	8001748 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe ff40 	bl	8001748 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0cb      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCC_OscConfig+0x334>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7fe ff2e 	bl	8001748 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe ff2a 	bl	8001748 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0b5      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ee      	bne.n	80028f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a1 	beq.w	8002a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d05c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d141      	bne.n	80029c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe fefe 	bl	8001748 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fefa 	bl	8001748 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e087      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	491b      	ldr	r1, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe fed3 	bl	8001748 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe fecf 	bl	8001748 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e05c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x416>
 80029c4:	e054      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe febc 	bl	8001748 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe feb8 	bl	8001748 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e045      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x444>
 80029f2:	e03d      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e038      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d028      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d121      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d11a      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cc      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d90c      	bls.n	8002abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	494d      	ldr	r1, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d044      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d119      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e067      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4934      	ldr	r1, [pc, #208]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7fe fdea 	bl	8001748 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7fe fde6 	bl	8001748 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e04f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d20c      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e032      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c06:	f000 f821 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fd4a 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	080059e8 	.word	0x080059e8
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b094      	sub	sp, #80	; 0x50
 8002c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	647b      	str	r3, [r7, #68]	; 0x44
 8002c58:	2300      	movs	r3, #0
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d00d      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x40>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	f200 80e1 	bhi.w	8002e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7e:	e0db      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c80:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c84:	e0db      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c86:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8a:	e0d8      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c96:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	0159      	lsls	r1, r3, #5
 8002ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd0:	0150      	lsls	r0, r2, #5
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	1a51      	subs	r1, r2, r1
 8002cda:	6139      	str	r1, [r7, #16]
 8002cdc:	4629      	mov	r1, r5
 8002cde:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	018b      	lsls	r3, r1, #6
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	018a      	lsls	r2, r1, #6
 8002cfe:	4651      	mov	r1, sl
 8002d00:	ebb2 0801 	subs.w	r8, r2, r1
 8002d04:	4659      	mov	r1, fp
 8002d06:	eb63 0901 	sbc.w	r9, r3, r1
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d1e:	4690      	mov	r8, r2
 8002d20:	4699      	mov	r9, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	eb18 0303 	adds.w	r3, r8, r3
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	eb49 0303 	adc.w	r3, r9, r3
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	024b      	lsls	r3, r1, #9
 8002d42:	4621      	mov	r1, r4
 8002d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d48:	4621      	mov	r1, r4
 8002d4a:	024a      	lsls	r2, r1, #9
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d52:	2200      	movs	r2, #0
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d5c:	f7fd faa0 	bl	80002a0 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4613      	mov	r3, r2
 8002d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d68:	e058      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	2200      	movs	r2, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	4611      	mov	r1, r2
 8002d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	f04f 0000 	mov.w	r0, #0
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	0159      	lsls	r1, r3, #5
 8002d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d96:	0150      	lsls	r0, r2, #5
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002da2:	4649      	mov	r1, r9
 8002da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8002dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	00eb      	lsls	r3, r5, #3
 8002dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dd2:	00e2      	lsls	r2, r4, #3
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	4643      	mov	r3, r8
 8002dda:	18e3      	adds	r3, r4, r3
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	464b      	mov	r3, r9
 8002de0:	eb45 0303 	adc.w	r3, r5, r3
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002df2:	4629      	mov	r1, r5
 8002df4:	028b      	lsls	r3, r1, #10
 8002df6:	4621      	mov	r1, r4
 8002df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	028a      	lsls	r2, r1, #10
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e06:	2200      	movs	r2, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	61fa      	str	r2, [r7, #28]
 8002e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e10:	f7fd fa46 	bl	80002a0 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	3301      	adds	r3, #1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3750      	adds	r7, #80	; 0x50
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	00f42400 	.word	0x00f42400
 8002e54:	007a1200 	.word	0x007a1200

08002e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000000 	.word	0x20000000

08002e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e74:	f7ff fff0 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0a9b      	lsrs	r3, r3, #10
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800
 8002e94:	080059f8 	.word	0x080059f8

08002e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e9c:	f7ff ffdc 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0b5b      	lsrs	r3, r3, #13
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4903      	ldr	r1, [pc, #12]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	080059f8 	.word	0x080059f8

08002ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e041      	b.n	8002f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe f9f4 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 f95e 	bl	80031c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d001      	beq.n	8002f78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e046      	b.n	8003006 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a23      	ldr	r2, [pc, #140]	; (8003014 <HAL_TIM_Base_Start+0xb4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d022      	beq.n	8002fd0 <HAL_TIM_Base_Start+0x70>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d01d      	beq.n	8002fd0 <HAL_TIM_Base_Start+0x70>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <HAL_TIM_Base_Start+0xb8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d018      	beq.n	8002fd0 <HAL_TIM_Base_Start+0x70>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_TIM_Base_Start+0xbc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <HAL_TIM_Base_Start+0x70>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_TIM_Base_Start+0xc0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00e      	beq.n	8002fd0 <HAL_TIM_Base_Start+0x70>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <HAL_TIM_Base_Start+0xc4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <HAL_TIM_Base_Start+0x70>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	; (8003028 <HAL_TIM_Base_Start+0xc8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIM_Base_Start+0x70>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_TIM_Base_Start+0xcc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d111      	bne.n	8002ff4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d010      	beq.n	8003004 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	e007      	b.n	8003004 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40010000 	.word	0x40010000
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40000c00 	.word	0x40000c00
 8003024:	40010400 	.word	0x40010400
 8003028:	40014000 	.word	0x40014000
 800302c:	40001800 	.word	0x40001800

08003030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIM_ConfigClockSource+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e0b4      	b.n	80031b6 <HAL_TIM_ConfigClockSource+0x186>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003084:	d03e      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0xd4>
 8003086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308a:	f200 8087 	bhi.w	800319c <HAL_TIM_ConfigClockSource+0x16c>
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003092:	f000 8086 	beq.w	80031a2 <HAL_TIM_ConfigClockSource+0x172>
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d87f      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d01a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0xa6>
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d87b      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b60      	cmp	r3, #96	; 0x60
 80030a6:	d050      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x11a>
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d877      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b50      	cmp	r3, #80	; 0x50
 80030ae:	d03c      	beq.n	800312a <HAL_TIM_ConfigClockSource+0xfa>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d873      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d058      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x13a>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d86f      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d064      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d86b      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d060      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d867      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05c      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d05a      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	e062      	b.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f000 f985 	bl	80033f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	609a      	str	r2, [r3, #8]
      break;
 8003102:	e04f      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f000 f96e 	bl	80033f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003126:	609a      	str	r2, [r3, #8]
      break;
 8003128:	e03c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	f000 f8e2 	bl	8003300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2150      	movs	r1, #80	; 0x50
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f93b 	bl	80033be <TIM_ITRx_SetConfig>
      break;
 8003148:	e02c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	461a      	mov	r2, r3
 8003158:	f000 f901 	bl	800335e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2160      	movs	r1, #96	; 0x60
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f92b 	bl	80033be <TIM_ITRx_SetConfig>
      break;
 8003168:	e01c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	461a      	mov	r2, r3
 8003178:	f000 f8c2 	bl	8003300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f91b 	bl	80033be <TIM_ITRx_SetConfig>
      break;
 8003188:	e00c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f000 f912 	bl	80033be <TIM_ITRx_SetConfig>
      break;
 800319a:	e003      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      break;
 80031a0:	e000      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d00f      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a3d      	ldr	r2, [pc, #244]	; (80032d8 <TIM_Base_SetConfig+0x118>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00b      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3c      	ldr	r2, [pc, #240]	; (80032dc <TIM_Base_SetConfig+0x11c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3b      	ldr	r2, [pc, #236]	; (80032e0 <TIM_Base_SetConfig+0x120>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3a      	ldr	r2, [pc, #232]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d108      	bne.n	8003212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2f      	ldr	r2, [pc, #188]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d027      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <TIM_Base_SetConfig+0x118>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d023      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <TIM_Base_SetConfig+0x11c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01f      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <TIM_Base_SetConfig+0x120>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d017      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <TIM_Base_SetConfig+0x128>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <TIM_Base_SetConfig+0x12c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00f      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <TIM_Base_SetConfig+0x130>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <TIM_Base_SetConfig+0x134>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <TIM_Base_SetConfig+0x138>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <TIM_Base_SetConfig+0x13c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0xf8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d103      	bne.n	80032c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	615a      	str	r2, [r3, #20]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40000c00 	.word	0x40000c00
 80032e4:	40010400 	.word	0x40010400
 80032e8:	40014000 	.word	0x40014000
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800
 80032f4:	40001800 	.word	0x40001800
 80032f8:	40001c00 	.word	0x40001c00
 80032fc:	40002000 	.word	0x40002000

08003300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0201 	bic.w	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800332a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f023 030a 	bic.w	r3, r3, #10
 800333c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	621a      	str	r2, [r3, #32]
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800335e:	b480      	push	{r7}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f023 0210 	bic.w	r2, r3, #16
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	031b      	lsls	r3, r3, #12
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800339a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	f043 0307 	orr.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800340e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	021a      	lsls	r2, r3, #8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	431a      	orrs	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003448:	2302      	movs	r3, #2
 800344a:	e05a      	b.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d01d      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d018      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1b      	ldr	r2, [pc, #108]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1a      	ldr	r2, [pc, #104]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a18      	ldr	r2, [pc, #96]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a17      	ldr	r2, [pc, #92]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a15      	ldr	r2, [pc, #84]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10c      	bne.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40000c00 	.word	0x40000c00
 8003520:	40010400 	.word	0x40010400
 8003524:	40014000 	.word	0x40014000
 8003528:	40001800 	.word	0x40001800

0800352c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e03f      	b.n	80035be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fee0 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	; 0x24
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800356e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f9cb 	bl	800390c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b08a      	sub	sp, #40	; 0x28
 80035ca:	af02      	add	r7, sp, #8
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d17c      	bne.n	80036e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_UART_Transmit+0x2c>
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e075      	b.n	80036e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_UART_Transmit+0x3e>
 8003600:	2302      	movs	r3, #2
 8003602:	e06e      	b.n	80036e2 <HAL_UART_Transmit+0x11c>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2221      	movs	r2, #33	; 0x21
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800361a:	f7fe f895 	bl	8001748 <HAL_GetTick>
 800361e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	88fa      	ldrh	r2, [r7, #6]
 800362a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003634:	d108      	bne.n	8003648 <HAL_UART_Transmit+0x82>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d104      	bne.n	8003648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	e003      	b.n	8003650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003658:	e02a      	b.n	80036b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2200      	movs	r2, #0
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f8e2 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e036      	b.n	80036e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	3302      	adds	r3, #2
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e007      	b.n	80036a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	3301      	adds	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1cf      	bne.n	800365a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2140      	movs	r1, #64	; 0x40
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f8b2 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e006      	b.n	80036e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b08a      	sub	sp, #40	; 0x28
 80036ee:	af02      	add	r7, sp, #8
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	f040 808c 	bne.w	8003824 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Receive+0x2e>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e084      	b.n	8003826 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_UART_Receive+0x40>
 8003726:	2302      	movs	r3, #2
 8003728:	e07d      	b.n	8003826 <HAL_UART_Receive+0x13c>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2222      	movs	r2, #34	; 0x22
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003746:	f7fd ffff 	bl	8001748 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d108      	bne.n	8003774 <HAL_UART_Receive+0x8a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e003      	b.n	800377c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003784:	e043      	b.n	800380e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2200      	movs	r2, #0
 800378e:	2120      	movs	r1, #32
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f84c 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e042      	b.n	8003826 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10c      	bne.n	80037c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	3302      	adds	r3, #2
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e01f      	b.n	8003800 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c8:	d007      	beq.n	80037da <HAL_UART_Receive+0xf0>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_UART_Receive+0xfe>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	e008      	b.n	80037fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1b6      	bne.n	8003786 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b090      	sub	sp, #64	; 0x40
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383e:	e050      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d04c      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0x30>
 800384e:	f7fd ff7b 	bl	8001748 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800385a:	429a      	cmp	r2, r3
 800385c:	d241      	bcs.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800387e:	637a      	str	r2, [r7, #52]	; 0x34
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e5      	bne.n	800385e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3314      	adds	r3, #20
 8003898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	613b      	str	r3, [r7, #16]
   return(result);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b2:	623a      	str	r2, [r7, #32]
 80038b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	69f9      	ldr	r1, [r7, #28]
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	61bb      	str	r3, [r7, #24]
   return(result);
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e5      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e00f      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d09f      	beq.n	8003840 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3740      	adds	r7, #64	; 0x40
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003910:	b0c0      	sub	sp, #256	; 0x100
 8003912:	af00      	add	r7, sp, #0
 8003914:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	68d9      	ldr	r1, [r3, #12]
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	ea40 0301 	orr.w	r3, r0, r1
 8003934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	431a      	orrs	r2, r3
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	431a      	orrs	r2, r3
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003964:	f021 010c 	bic.w	r1, r1, #12
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003972:	430b      	orrs	r3, r1
 8003974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003986:	6999      	ldr	r1, [r3, #24]
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	ea40 0301 	orr.w	r3, r0, r1
 8003992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b8f      	ldr	r3, [pc, #572]	; (8003bd8 <UART_SetConfig+0x2cc>)
 800399c:	429a      	cmp	r2, r3
 800399e:	d005      	beq.n	80039ac <UART_SetConfig+0xa0>
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b8d      	ldr	r3, [pc, #564]	; (8003bdc <UART_SetConfig+0x2d0>)
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d104      	bne.n	80039b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ac:	f7ff fa74 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
 80039b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039b4:	e003      	b.n	80039be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039b6:	f7ff fa5b 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 80039ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c8:	f040 810c 	bne.w	8003be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039de:	4622      	mov	r2, r4
 80039e0:	462b      	mov	r3, r5
 80039e2:	1891      	adds	r1, r2, r2
 80039e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80039e6:	415b      	adcs	r3, r3
 80039e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039ee:	4621      	mov	r1, r4
 80039f0:	eb12 0801 	adds.w	r8, r2, r1
 80039f4:	4629      	mov	r1, r5
 80039f6:	eb43 0901 	adc.w	r9, r3, r1
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a0e:	4690      	mov	r8, r2
 8003a10:	4699      	mov	r9, r3
 8003a12:	4623      	mov	r3, r4
 8003a14:	eb18 0303 	adds.w	r3, r8, r3
 8003a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	eb49 0303 	adc.w	r3, r9, r3
 8003a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	18db      	adds	r3, r3, r3
 8003a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a40:	4613      	mov	r3, r2
 8003a42:	eb42 0303 	adc.w	r3, r2, r3
 8003a46:	657b      	str	r3, [r7, #84]	; 0x54
 8003a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a50:	f7fc fc26 	bl	80002a0 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <UART_SetConfig+0x2d4>)
 8003a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	011c      	lsls	r4, r3, #4
 8003a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a74:	4642      	mov	r2, r8
 8003a76:	464b      	mov	r3, r9
 8003a78:	1891      	adds	r1, r2, r2
 8003a7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a7c:	415b      	adcs	r3, r3
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a84:	4641      	mov	r1, r8
 8003a86:	eb12 0a01 	adds.w	sl, r2, r1
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa4:	4692      	mov	sl, r2
 8003aa6:	469b      	mov	fp, r3
 8003aa8:	4643      	mov	r3, r8
 8003aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8003aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	18db      	adds	r3, r3, r3
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	eb42 0303 	adc.w	r3, r2, r3
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ae6:	f7fc fbdb 	bl	80002a0 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <UART_SetConfig+0x2d4>)
 8003af2:	fba3 2301 	umull	r2, r3, r3, r1
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2264      	movs	r2, #100	; 0x64
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	1acb      	subs	r3, r1, r3
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b06:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <UART_SetConfig+0x2d4>)
 8003b08:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b14:	441c      	add	r4, r3
 8003b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	1891      	adds	r1, r2, r2
 8003b2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b30:	415b      	adcs	r3, r3
 8003b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b38:	4641      	mov	r1, r8
 8003b3a:	1851      	adds	r1, r2, r1
 8003b3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b3e:	4649      	mov	r1, r9
 8003b40:	414b      	adcs	r3, r1
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b50:	4659      	mov	r1, fp
 8003b52:	00cb      	lsls	r3, r1, #3
 8003b54:	4651      	mov	r1, sl
 8003b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5a:	4651      	mov	r1, sl
 8003b5c:	00ca      	lsls	r2, r1, #3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	4642      	mov	r2, r8
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	460a      	mov	r2, r1
 8003b70:	eb42 0303 	adc.w	r3, r2, r3
 8003b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	18db      	adds	r3, r3, r3
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b92:	4613      	mov	r3, r2
 8003b94:	eb42 0303 	adc.w	r3, r2, r3
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ba2:	f7fc fb7d 	bl	80002a0 <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <UART_SetConfig+0x2d4>)
 8003bac:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	2164      	movs	r1, #100	; 0x64
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	3332      	adds	r3, #50	; 0x32
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <UART_SetConfig+0x2d4>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 0207 	and.w	r2, r3, #7
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4422      	add	r2, r4
 8003bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bd4:	e105      	b.n	8003de2 <UART_SetConfig+0x4d6>
 8003bd6:	bf00      	nop
 8003bd8:	40011000 	.word	0x40011000
 8003bdc:	40011400 	.word	0x40011400
 8003be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bf6:	4642      	mov	r2, r8
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	1891      	adds	r1, r2, r2
 8003bfc:	6239      	str	r1, [r7, #32]
 8003bfe:	415b      	adcs	r3, r3
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
 8003c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c06:	4641      	mov	r1, r8
 8003c08:	1854      	adds	r4, r2, r1
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	eb43 0501 	adc.w	r5, r3, r1
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	00eb      	lsls	r3, r5, #3
 8003c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c1e:	00e2      	lsls	r2, r4, #3
 8003c20:	4614      	mov	r4, r2
 8003c22:	461d      	mov	r5, r3
 8003c24:	4643      	mov	r3, r8
 8003c26:	18e3      	adds	r3, r4, r3
 8003c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	eb45 0303 	adc.w	r3, r5, r3
 8003c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c52:	4629      	mov	r1, r5
 8003c54:	008b      	lsls	r3, r1, #2
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	008a      	lsls	r2, r1, #2
 8003c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c64:	f7fc fb1c 	bl	80002a0 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4b60      	ldr	r3, [pc, #384]	; (8003df0 <UART_SetConfig+0x4e4>)
 8003c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	011c      	lsls	r4, r3, #4
 8003c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c88:	4642      	mov	r2, r8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	61b9      	str	r1, [r7, #24]
 8003c90:	415b      	adcs	r3, r3
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c98:	4641      	mov	r1, r8
 8003c9a:	1851      	adds	r1, r2, r1
 8003c9c:	6139      	str	r1, [r7, #16]
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	414b      	adcs	r3, r1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb0:	4659      	mov	r1, fp
 8003cb2:	00cb      	lsls	r3, r1, #3
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cba:	4651      	mov	r1, sl
 8003cbc:	00ca      	lsls	r2, r1, #3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ccc:	464b      	mov	r3, r9
 8003cce:	460a      	mov	r2, r1
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ce2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	008b      	lsls	r3, r1, #2
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	008a      	lsls	r2, r1, #2
 8003cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d02:	f7fc facd 	bl	80002a0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <UART_SetConfig+0x4e4>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a34      	ldr	r2, [pc, #208]	; (8003df0 <UART_SetConfig+0x4e4>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2a:	441c      	add	r4, r3
 8003d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d30:	2200      	movs	r2, #0
 8003d32:	673b      	str	r3, [r7, #112]	; 0x70
 8003d34:	677a      	str	r2, [r7, #116]	; 0x74
 8003d36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d3a:	4642      	mov	r2, r8
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	1891      	adds	r1, r2, r2
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	415b      	adcs	r3, r3
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	1851      	adds	r1, r2, r1
 8003d4e:	6039      	str	r1, [r7, #0]
 8003d50:	4649      	mov	r1, r9
 8003d52:	414b      	adcs	r3, r1
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d62:	4659      	mov	r1, fp
 8003d64:	00cb      	lsls	r3, r1, #3
 8003d66:	4651      	mov	r1, sl
 8003d68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6c:	4651      	mov	r1, sl
 8003d6e:	00ca      	lsls	r2, r1, #3
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	4603      	mov	r3, r0
 8003d76:	4642      	mov	r2, r8
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d7c:	464b      	mov	r3, r9
 8003d7e:	460a      	mov	r2, r1
 8003d80:	eb42 0303 	adc.w	r3, r2, r3
 8003d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d90:	667a      	str	r2, [r7, #100]	; 0x64
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d9e:	4649      	mov	r1, r9
 8003da0:	008b      	lsls	r3, r1, #2
 8003da2:	4641      	mov	r1, r8
 8003da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da8:	4641      	mov	r1, r8
 8003daa:	008a      	lsls	r2, r1, #2
 8003dac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003db0:	f7fc fa76 	bl	80002a0 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <UART_SetConfig+0x4e4>)
 8003dba:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2164      	movs	r1, #100	; 0x64
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	3332      	adds	r3, #50	; 0x32
 8003dcc:	4a08      	ldr	r2, [pc, #32]	; (8003df0 <UART_SetConfig+0x4e4>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	f003 020f 	and.w	r2, r3, #15
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4422      	add	r2, r4
 8003de0:	609a      	str	r2, [r3, #8]
}
 8003de2:	bf00      	nop
 8003de4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003de8:	46bd      	mov	sp, r7
 8003dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dee:	bf00      	nop
 8003df0:	51eb851f 	.word	0x51eb851f

08003df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df4:	b084      	sub	sp, #16
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	f107 001c 	add.w	r0, r7, #28
 8003e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d122      	bne.n	8003e52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d105      	bne.n	8003e46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 faa2 	bl	8004390 <USB_CoreReset>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e01a      	b.n	8003e88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa96 	bl	8004390 <USB_CoreReset>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
 8003e7a:	e005      	b.n	8003e88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10b      	bne.n	8003ea6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f043 0206 	orr.w	r2, r3, #6
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eb2:	b004      	add	sp, #16
 8003eb4:	4770      	bx	lr

08003eb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0201 	bic.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d115      	bne.n	8003f26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f06:	2001      	movs	r0, #1
 8003f08:	f7fd fc2a 	bl	8001760 <HAL_Delay>
      ms++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa2e 	bl	8004374 <USB_GetMode>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d01e      	beq.n	8003f5c <USB_SetCurrentMode+0x84>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b31      	cmp	r3, #49	; 0x31
 8003f22:	d9f0      	bls.n	8003f06 <USB_SetCurrentMode+0x2e>
 8003f24:	e01a      	b.n	8003f5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d115      	bne.n	8003f58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f38:	2001      	movs	r0, #1
 8003f3a:	f7fd fc11 	bl	8001760 <HAL_Delay>
      ms++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fa15 	bl	8004374 <USB_GetMode>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <USB_SetCurrentMode+0x84>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b31      	cmp	r3, #49	; 0x31
 8003f54:	d9f0      	bls.n	8003f38 <USB_SetCurrentMode+0x60>
 8003f56:	e001      	b.n	8003f5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e005      	b.n	8003f68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b32      	cmp	r3, #50	; 0x32
 8003f60:	d101      	bne.n	8003f66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f70:	b084      	sub	sp, #16
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	e009      	b.n	8003fa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	3340      	adds	r3, #64	; 0x40
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b0e      	cmp	r3, #14
 8003fa8:	d9f2      	bls.n	8003f90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d11c      	bne.n	8003fea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8003fe8:	e00b      	b.n	8004002 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004008:	461a      	mov	r2, r3
 800400a:	2300      	movs	r3, #0
 800400c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004014:	4619      	mov	r1, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401c:	461a      	mov	r2, r3
 800401e:	680b      	ldr	r3, [r1, #0]
 8004020:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	2b01      	cmp	r3, #1
 8004026:	d10c      	bne.n	8004042 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800402e:	2100      	movs	r1, #0
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f965 	bl	8004300 <USB_SetDevSpeed>
 8004036:	e008      	b.n	800404a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004038:	2101      	movs	r1, #1
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f960 	bl	8004300 <USB_SetDevSpeed>
 8004040:	e003      	b.n	800404a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004042:	2103      	movs	r1, #3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f95b 	bl	8004300 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800404a:	2110      	movs	r1, #16
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f8f3 	bl	8004238 <USB_FlushTxFifo>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f91f 	bl	80042a0 <USB_FlushRxFifo>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	461a      	mov	r2, r3
 8004074:	2300      	movs	r3, #0
 8004076:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407e:	461a      	mov	r2, r3
 8004080:	2300      	movs	r3, #0
 8004082:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	461a      	mov	r2, r3
 800408c:	2300      	movs	r3, #0
 800408e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	e043      	b.n	800411e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ac:	d118      	bne.n	80040e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c0:	461a      	mov	r2, r3
 80040c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e013      	b.n	80040f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	461a      	mov	r2, r3
 80040d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e008      	b.n	80040f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	461a      	mov	r2, r3
 80040ee:	2300      	movs	r3, #0
 80040f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	461a      	mov	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004110:	461a      	mov	r2, r3
 8004112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	3301      	adds	r3, #1
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	429a      	cmp	r2, r3
 8004124:	d3b7      	bcc.n	8004096 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e043      	b.n	80041b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800413e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004142:	d118      	bne.n	8004176 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004156:	461a      	mov	r2, r3
 8004158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e013      	b.n	8004188 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e008      	b.n	8004188 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	461a      	mov	r2, r3
 8004184:	2300      	movs	r3, #0
 8004186:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	461a      	mov	r2, r3
 8004196:	2300      	movs	r3, #0
 8004198:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	461a      	mov	r2, r3
 80041a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3301      	adds	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d3b7      	bcc.n	800412c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d105      	bne.n	80041f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f043 0210 	orr.w	r2, r3, #16
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <USB_DevInit+0x2c4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f043 0208 	orr.w	r2, r3, #8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004230:	b004      	add	sp, #16
 8004232:	4770      	bx	lr
 8004234:	803c3800 	.word	0x803c3800

08004238 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3301      	adds	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a13      	ldr	r2, [pc, #76]	; (800429c <USB_FlushTxFifo+0x64>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e01b      	b.n	8004290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	daf2      	bge.n	8004246 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	019b      	lsls	r3, r3, #6
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a08      	ldr	r2, [pc, #32]	; (800429c <USB_FlushTxFifo+0x64>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e006      	b.n	8004290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	d0f0      	beq.n	8004270 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	00030d40 	.word	0x00030d40

080042a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3301      	adds	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a11      	ldr	r2, [pc, #68]	; (80042fc <USB_FlushRxFifo+0x5c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e018      	b.n	80042f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	daf2      	bge.n	80042ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2210      	movs	r2, #16
 80042ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3301      	adds	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <USB_FlushRxFifo+0x5c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e006      	b.n	80042f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d0f0      	beq.n	80042d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	00030d40 	.word	0x00030d40

08004300 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800434c:	f023 0303 	bic.w	r3, r3, #3
 8004350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004360:	f043 0302 	orr.w	r3, r3, #2
 8004364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f003 0301 	and.w	r3, r3, #1
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <USB_CoreReset+0x64>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e01b      	b.n	80043e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	daf2      	bge.n	800439c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f043 0201 	orr.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3301      	adds	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <USB_CoreReset+0x64>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d0f0      	beq.n	80043c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	00030d40 	.word	0x00030d40

080043f8 <__errno>:
 80043f8:	4b01      	ldr	r3, [pc, #4]	; (8004400 <__errno+0x8>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	2000000c 	.word	0x2000000c

08004404 <__libc_init_array>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4d0d      	ldr	r5, [pc, #52]	; (800443c <__libc_init_array+0x38>)
 8004408:	4c0d      	ldr	r4, [pc, #52]	; (8004440 <__libc_init_array+0x3c>)
 800440a:	1b64      	subs	r4, r4, r5
 800440c:	10a4      	asrs	r4, r4, #2
 800440e:	2600      	movs	r6, #0
 8004410:	42a6      	cmp	r6, r4
 8004412:	d109      	bne.n	8004428 <__libc_init_array+0x24>
 8004414:	4d0b      	ldr	r5, [pc, #44]	; (8004444 <__libc_init_array+0x40>)
 8004416:	4c0c      	ldr	r4, [pc, #48]	; (8004448 <__libc_init_array+0x44>)
 8004418:	f001 fac8 	bl	80059ac <_init>
 800441c:	1b64      	subs	r4, r4, r5
 800441e:	10a4      	asrs	r4, r4, #2
 8004420:	2600      	movs	r6, #0
 8004422:	42a6      	cmp	r6, r4
 8004424:	d105      	bne.n	8004432 <__libc_init_array+0x2e>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	f855 3b04 	ldr.w	r3, [r5], #4
 800442c:	4798      	blx	r3
 800442e:	3601      	adds	r6, #1
 8004430:	e7ee      	b.n	8004410 <__libc_init_array+0xc>
 8004432:	f855 3b04 	ldr.w	r3, [r5], #4
 8004436:	4798      	blx	r3
 8004438:	3601      	adds	r6, #1
 800443a:	e7f2      	b.n	8004422 <__libc_init_array+0x1e>
 800443c:	08005b50 	.word	0x08005b50
 8004440:	08005b50 	.word	0x08005b50
 8004444:	08005b50 	.word	0x08005b50
 8004448:	08005b54 	.word	0x08005b54

0800444c <memset>:
 800444c:	4402      	add	r2, r0
 800444e:	4603      	mov	r3, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	d100      	bne.n	8004456 <memset+0xa>
 8004454:	4770      	bx	lr
 8004456:	f803 1b01 	strb.w	r1, [r3], #1
 800445a:	e7f9      	b.n	8004450 <memset+0x4>

0800445c <_puts_r>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	460e      	mov	r6, r1
 8004460:	4605      	mov	r5, r0
 8004462:	b118      	cbz	r0, 800446c <_puts_r+0x10>
 8004464:	6983      	ldr	r3, [r0, #24]
 8004466:	b90b      	cbnz	r3, 800446c <_puts_r+0x10>
 8004468:	f000 fae2 	bl	8004a30 <__sinit>
 800446c:	69ab      	ldr	r3, [r5, #24]
 800446e:	68ac      	ldr	r4, [r5, #8]
 8004470:	b913      	cbnz	r3, 8004478 <_puts_r+0x1c>
 8004472:	4628      	mov	r0, r5
 8004474:	f000 fadc 	bl	8004a30 <__sinit>
 8004478:	4b2c      	ldr	r3, [pc, #176]	; (800452c <_puts_r+0xd0>)
 800447a:	429c      	cmp	r4, r3
 800447c:	d120      	bne.n	80044c0 <_puts_r+0x64>
 800447e:	686c      	ldr	r4, [r5, #4]
 8004480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004482:	07db      	lsls	r3, r3, #31
 8004484:	d405      	bmi.n	8004492 <_puts_r+0x36>
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	0598      	lsls	r0, r3, #22
 800448a:	d402      	bmi.n	8004492 <_puts_r+0x36>
 800448c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800448e:	f000 fb7f 	bl	8004b90 <__retarget_lock_acquire_recursive>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	0719      	lsls	r1, r3, #28
 8004496:	d51d      	bpl.n	80044d4 <_puts_r+0x78>
 8004498:	6923      	ldr	r3, [r4, #16]
 800449a:	b1db      	cbz	r3, 80044d4 <_puts_r+0x78>
 800449c:	3e01      	subs	r6, #1
 800449e:	68a3      	ldr	r3, [r4, #8]
 80044a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044a4:	3b01      	subs	r3, #1
 80044a6:	60a3      	str	r3, [r4, #8]
 80044a8:	bb39      	cbnz	r1, 80044fa <_puts_r+0x9e>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da38      	bge.n	8004520 <_puts_r+0xc4>
 80044ae:	4622      	mov	r2, r4
 80044b0:	210a      	movs	r1, #10
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 f8c4 	bl	8004640 <__swbuf_r>
 80044b8:	3001      	adds	r0, #1
 80044ba:	d011      	beq.n	80044e0 <_puts_r+0x84>
 80044bc:	250a      	movs	r5, #10
 80044be:	e011      	b.n	80044e4 <_puts_r+0x88>
 80044c0:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <_puts_r+0xd4>)
 80044c2:	429c      	cmp	r4, r3
 80044c4:	d101      	bne.n	80044ca <_puts_r+0x6e>
 80044c6:	68ac      	ldr	r4, [r5, #8]
 80044c8:	e7da      	b.n	8004480 <_puts_r+0x24>
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <_puts_r+0xd8>)
 80044cc:	429c      	cmp	r4, r3
 80044ce:	bf08      	it	eq
 80044d0:	68ec      	ldreq	r4, [r5, #12]
 80044d2:	e7d5      	b.n	8004480 <_puts_r+0x24>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f904 	bl	80046e4 <__swsetup_r>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d0dd      	beq.n	800449c <_puts_r+0x40>
 80044e0:	f04f 35ff 	mov.w	r5, #4294967295
 80044e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044e6:	07da      	lsls	r2, r3, #31
 80044e8:	d405      	bmi.n	80044f6 <_puts_r+0x9a>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	059b      	lsls	r3, r3, #22
 80044ee:	d402      	bmi.n	80044f6 <_puts_r+0x9a>
 80044f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044f2:	f000 fb4e 	bl	8004b92 <__retarget_lock_release_recursive>
 80044f6:	4628      	mov	r0, r5
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da04      	bge.n	8004508 <_puts_r+0xac>
 80044fe:	69a2      	ldr	r2, [r4, #24]
 8004500:	429a      	cmp	r2, r3
 8004502:	dc06      	bgt.n	8004512 <_puts_r+0xb6>
 8004504:	290a      	cmp	r1, #10
 8004506:	d004      	beq.n	8004512 <_puts_r+0xb6>
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	7019      	strb	r1, [r3, #0]
 8004510:	e7c5      	b.n	800449e <_puts_r+0x42>
 8004512:	4622      	mov	r2, r4
 8004514:	4628      	mov	r0, r5
 8004516:	f000 f893 	bl	8004640 <__swbuf_r>
 800451a:	3001      	adds	r0, #1
 800451c:	d1bf      	bne.n	800449e <_puts_r+0x42>
 800451e:	e7df      	b.n	80044e0 <_puts_r+0x84>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	250a      	movs	r5, #10
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	6022      	str	r2, [r4, #0]
 8004528:	701d      	strb	r5, [r3, #0]
 800452a:	e7db      	b.n	80044e4 <_puts_r+0x88>
 800452c:	08005ad4 	.word	0x08005ad4
 8004530:	08005af4 	.word	0x08005af4
 8004534:	08005ab4 	.word	0x08005ab4

08004538 <puts>:
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <puts+0xc>)
 800453a:	4601      	mov	r1, r0
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	f7ff bf8d 	b.w	800445c <_puts_r>
 8004542:	bf00      	nop
 8004544:	2000000c 	.word	0x2000000c

08004548 <siprintf>:
 8004548:	b40e      	push	{r1, r2, r3}
 800454a:	b500      	push	{lr}
 800454c:	b09c      	sub	sp, #112	; 0x70
 800454e:	ab1d      	add	r3, sp, #116	; 0x74
 8004550:	9002      	str	r0, [sp, #8]
 8004552:	9006      	str	r0, [sp, #24]
 8004554:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004558:	4809      	ldr	r0, [pc, #36]	; (8004580 <siprintf+0x38>)
 800455a:	9107      	str	r1, [sp, #28]
 800455c:	9104      	str	r1, [sp, #16]
 800455e:	4909      	ldr	r1, [pc, #36]	; (8004584 <siprintf+0x3c>)
 8004560:	f853 2b04 	ldr.w	r2, [r3], #4
 8004564:	9105      	str	r1, [sp, #20]
 8004566:	6800      	ldr	r0, [r0, #0]
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	a902      	add	r1, sp, #8
 800456c:	f000 fcbc 	bl	8004ee8 <_svfiprintf_r>
 8004570:	9b02      	ldr	r3, [sp, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	b01c      	add	sp, #112	; 0x70
 8004578:	f85d eb04 	ldr.w	lr, [sp], #4
 800457c:	b003      	add	sp, #12
 800457e:	4770      	bx	lr
 8004580:	2000000c 	.word	0x2000000c
 8004584:	ffff0208 	.word	0xffff0208

08004588 <strtok>:
 8004588:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <strtok+0x5c>)
 800458a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800458c:	681e      	ldr	r6, [r3, #0]
 800458e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004590:	4605      	mov	r5, r0
 8004592:	b9fc      	cbnz	r4, 80045d4 <strtok+0x4c>
 8004594:	2050      	movs	r0, #80	; 0x50
 8004596:	9101      	str	r1, [sp, #4]
 8004598:	f000 fb62 	bl	8004c60 <malloc>
 800459c:	9901      	ldr	r1, [sp, #4]
 800459e:	65b0      	str	r0, [r6, #88]	; 0x58
 80045a0:	4602      	mov	r2, r0
 80045a2:	b920      	cbnz	r0, 80045ae <strtok+0x26>
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <strtok+0x60>)
 80045a6:	4811      	ldr	r0, [pc, #68]	; (80045ec <strtok+0x64>)
 80045a8:	2157      	movs	r1, #87	; 0x57
 80045aa:	f000 f909 	bl	80047c0 <__assert_func>
 80045ae:	e9c0 4400 	strd	r4, r4, [r0]
 80045b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80045b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80045ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80045be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80045c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80045c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80045ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80045ce:	6184      	str	r4, [r0, #24]
 80045d0:	7704      	strb	r4, [r0, #28]
 80045d2:	6244      	str	r4, [r0, #36]	; 0x24
 80045d4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80045d6:	2301      	movs	r3, #1
 80045d8:	4628      	mov	r0, r5
 80045da:	b002      	add	sp, #8
 80045dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80045e0:	f000 b806 	b.w	80045f0 <__strtok_r>
 80045e4:	2000000c 	.word	0x2000000c
 80045e8:	08005a04 	.word	0x08005a04
 80045ec:	08005a1b 	.word	0x08005a1b

080045f0 <__strtok_r>:
 80045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f2:	b908      	cbnz	r0, 80045f8 <__strtok_r+0x8>
 80045f4:	6810      	ldr	r0, [r2, #0]
 80045f6:	b188      	cbz	r0, 800461c <__strtok_r+0x2c>
 80045f8:	4604      	mov	r4, r0
 80045fa:	4620      	mov	r0, r4
 80045fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004600:	460f      	mov	r7, r1
 8004602:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004606:	b91e      	cbnz	r6, 8004610 <__strtok_r+0x20>
 8004608:	b965      	cbnz	r5, 8004624 <__strtok_r+0x34>
 800460a:	6015      	str	r5, [r2, #0]
 800460c:	4628      	mov	r0, r5
 800460e:	e005      	b.n	800461c <__strtok_r+0x2c>
 8004610:	42b5      	cmp	r5, r6
 8004612:	d1f6      	bne.n	8004602 <__strtok_r+0x12>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <__strtok_r+0xa>
 8004618:	6014      	str	r4, [r2, #0]
 800461a:	7003      	strb	r3, [r0, #0]
 800461c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461e:	461c      	mov	r4, r3
 8004620:	e00c      	b.n	800463c <__strtok_r+0x4c>
 8004622:	b915      	cbnz	r5, 800462a <__strtok_r+0x3a>
 8004624:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004628:	460e      	mov	r6, r1
 800462a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800462e:	42ab      	cmp	r3, r5
 8004630:	d1f7      	bne.n	8004622 <__strtok_r+0x32>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f3      	beq.n	800461e <__strtok_r+0x2e>
 8004636:	2300      	movs	r3, #0
 8004638:	f804 3c01 	strb.w	r3, [r4, #-1]
 800463c:	6014      	str	r4, [r2, #0]
 800463e:	e7ed      	b.n	800461c <__strtok_r+0x2c>

08004640 <__swbuf_r>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	460e      	mov	r6, r1
 8004644:	4614      	mov	r4, r2
 8004646:	4605      	mov	r5, r0
 8004648:	b118      	cbz	r0, 8004652 <__swbuf_r+0x12>
 800464a:	6983      	ldr	r3, [r0, #24]
 800464c:	b90b      	cbnz	r3, 8004652 <__swbuf_r+0x12>
 800464e:	f000 f9ef 	bl	8004a30 <__sinit>
 8004652:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <__swbuf_r+0x98>)
 8004654:	429c      	cmp	r4, r3
 8004656:	d12b      	bne.n	80046b0 <__swbuf_r+0x70>
 8004658:	686c      	ldr	r4, [r5, #4]
 800465a:	69a3      	ldr	r3, [r4, #24]
 800465c:	60a3      	str	r3, [r4, #8]
 800465e:	89a3      	ldrh	r3, [r4, #12]
 8004660:	071a      	lsls	r2, r3, #28
 8004662:	d52f      	bpl.n	80046c4 <__swbuf_r+0x84>
 8004664:	6923      	ldr	r3, [r4, #16]
 8004666:	b36b      	cbz	r3, 80046c4 <__swbuf_r+0x84>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	1ac0      	subs	r0, r0, r3
 800466e:	6963      	ldr	r3, [r4, #20]
 8004670:	b2f6      	uxtb	r6, r6
 8004672:	4283      	cmp	r3, r0
 8004674:	4637      	mov	r7, r6
 8004676:	dc04      	bgt.n	8004682 <__swbuf_r+0x42>
 8004678:	4621      	mov	r1, r4
 800467a:	4628      	mov	r0, r5
 800467c:	f000 f944 	bl	8004908 <_fflush_r>
 8004680:	bb30      	cbnz	r0, 80046d0 <__swbuf_r+0x90>
 8004682:	68a3      	ldr	r3, [r4, #8]
 8004684:	3b01      	subs	r3, #1
 8004686:	60a3      	str	r3, [r4, #8]
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	6022      	str	r2, [r4, #0]
 800468e:	701e      	strb	r6, [r3, #0]
 8004690:	6963      	ldr	r3, [r4, #20]
 8004692:	3001      	adds	r0, #1
 8004694:	4283      	cmp	r3, r0
 8004696:	d004      	beq.n	80046a2 <__swbuf_r+0x62>
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	07db      	lsls	r3, r3, #31
 800469c:	d506      	bpl.n	80046ac <__swbuf_r+0x6c>
 800469e:	2e0a      	cmp	r6, #10
 80046a0:	d104      	bne.n	80046ac <__swbuf_r+0x6c>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 f92f 	bl	8004908 <_fflush_r>
 80046aa:	b988      	cbnz	r0, 80046d0 <__swbuf_r+0x90>
 80046ac:	4638      	mov	r0, r7
 80046ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <__swbuf_r+0x9c>)
 80046b2:	429c      	cmp	r4, r3
 80046b4:	d101      	bne.n	80046ba <__swbuf_r+0x7a>
 80046b6:	68ac      	ldr	r4, [r5, #8]
 80046b8:	e7cf      	b.n	800465a <__swbuf_r+0x1a>
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <__swbuf_r+0xa0>)
 80046bc:	429c      	cmp	r4, r3
 80046be:	bf08      	it	eq
 80046c0:	68ec      	ldreq	r4, [r5, #12]
 80046c2:	e7ca      	b.n	800465a <__swbuf_r+0x1a>
 80046c4:	4621      	mov	r1, r4
 80046c6:	4628      	mov	r0, r5
 80046c8:	f000 f80c 	bl	80046e4 <__swsetup_r>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d0cb      	beq.n	8004668 <__swbuf_r+0x28>
 80046d0:	f04f 37ff 	mov.w	r7, #4294967295
 80046d4:	e7ea      	b.n	80046ac <__swbuf_r+0x6c>
 80046d6:	bf00      	nop
 80046d8:	08005ad4 	.word	0x08005ad4
 80046dc:	08005af4 	.word	0x08005af4
 80046e0:	08005ab4 	.word	0x08005ab4

080046e4 <__swsetup_r>:
 80046e4:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <__swsetup_r+0xcc>)
 80046e6:	b570      	push	{r4, r5, r6, lr}
 80046e8:	681d      	ldr	r5, [r3, #0]
 80046ea:	4606      	mov	r6, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	b125      	cbz	r5, 80046fa <__swsetup_r+0x16>
 80046f0:	69ab      	ldr	r3, [r5, #24]
 80046f2:	b913      	cbnz	r3, 80046fa <__swsetup_r+0x16>
 80046f4:	4628      	mov	r0, r5
 80046f6:	f000 f99b 	bl	8004a30 <__sinit>
 80046fa:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <__swsetup_r+0xd0>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	d10f      	bne.n	8004720 <__swsetup_r+0x3c>
 8004700:	686c      	ldr	r4, [r5, #4]
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004708:	0719      	lsls	r1, r3, #28
 800470a:	d42c      	bmi.n	8004766 <__swsetup_r+0x82>
 800470c:	06dd      	lsls	r5, r3, #27
 800470e:	d411      	bmi.n	8004734 <__swsetup_r+0x50>
 8004710:	2309      	movs	r3, #9
 8004712:	6033      	str	r3, [r6, #0]
 8004714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	f04f 30ff 	mov.w	r0, #4294967295
 800471e:	e03e      	b.n	800479e <__swsetup_r+0xba>
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <__swsetup_r+0xd4>)
 8004722:	429c      	cmp	r4, r3
 8004724:	d101      	bne.n	800472a <__swsetup_r+0x46>
 8004726:	68ac      	ldr	r4, [r5, #8]
 8004728:	e7eb      	b.n	8004702 <__swsetup_r+0x1e>
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <__swsetup_r+0xd8>)
 800472c:	429c      	cmp	r4, r3
 800472e:	bf08      	it	eq
 8004730:	68ec      	ldreq	r4, [r5, #12]
 8004732:	e7e6      	b.n	8004702 <__swsetup_r+0x1e>
 8004734:	0758      	lsls	r0, r3, #29
 8004736:	d512      	bpl.n	800475e <__swsetup_r+0x7a>
 8004738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473a:	b141      	cbz	r1, 800474e <__swsetup_r+0x6a>
 800473c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004740:	4299      	cmp	r1, r3
 8004742:	d002      	beq.n	800474a <__swsetup_r+0x66>
 8004744:	4630      	mov	r0, r6
 8004746:	f000 fa93 	bl	8004c70 <_free_r>
 800474a:	2300      	movs	r3, #0
 800474c:	6363      	str	r3, [r4, #52]	; 0x34
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	2300      	movs	r3, #0
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	6923      	ldr	r3, [r4, #16]
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	f043 0308 	orr.w	r3, r3, #8
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	b94b      	cbnz	r3, 800477e <__swsetup_r+0x9a>
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004774:	d003      	beq.n	800477e <__swsetup_r+0x9a>
 8004776:	4621      	mov	r1, r4
 8004778:	4630      	mov	r0, r6
 800477a:	f000 fa31 	bl	8004be0 <__smakebuf_r>
 800477e:	89a0      	ldrh	r0, [r4, #12]
 8004780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004784:	f010 0301 	ands.w	r3, r0, #1
 8004788:	d00a      	beq.n	80047a0 <__swsetup_r+0xbc>
 800478a:	2300      	movs	r3, #0
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	6963      	ldr	r3, [r4, #20]
 8004790:	425b      	negs	r3, r3
 8004792:	61a3      	str	r3, [r4, #24]
 8004794:	6923      	ldr	r3, [r4, #16]
 8004796:	b943      	cbnz	r3, 80047aa <__swsetup_r+0xc6>
 8004798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800479c:	d1ba      	bne.n	8004714 <__swsetup_r+0x30>
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	0781      	lsls	r1, r0, #30
 80047a2:	bf58      	it	pl
 80047a4:	6963      	ldrpl	r3, [r4, #20]
 80047a6:	60a3      	str	r3, [r4, #8]
 80047a8:	e7f4      	b.n	8004794 <__swsetup_r+0xb0>
 80047aa:	2000      	movs	r0, #0
 80047ac:	e7f7      	b.n	800479e <__swsetup_r+0xba>
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	08005ad4 	.word	0x08005ad4
 80047b8:	08005af4 	.word	0x08005af4
 80047bc:	08005ab4 	.word	0x08005ab4

080047c0 <__assert_func>:
 80047c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047c2:	4614      	mov	r4, r2
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <__assert_func+0x2c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4605      	mov	r5, r0
 80047cc:	68d8      	ldr	r0, [r3, #12]
 80047ce:	b14c      	cbz	r4, 80047e4 <__assert_func+0x24>
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <__assert_func+0x30>)
 80047d2:	9100      	str	r1, [sp, #0]
 80047d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047d8:	4906      	ldr	r1, [pc, #24]	; (80047f4 <__assert_func+0x34>)
 80047da:	462b      	mov	r3, r5
 80047dc:	f000 f9a6 	bl	8004b2c <fiprintf>
 80047e0:	f000 ffd6 	bl	8005790 <abort>
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <__assert_func+0x38>)
 80047e6:	461c      	mov	r4, r3
 80047e8:	e7f3      	b.n	80047d2 <__assert_func+0x12>
 80047ea:	bf00      	nop
 80047ec:	2000000c 	.word	0x2000000c
 80047f0:	08005a78 	.word	0x08005a78
 80047f4:	08005a85 	.word	0x08005a85
 80047f8:	08005ab3 	.word	0x08005ab3

080047fc <__sflush_r>:
 80047fc:	898a      	ldrh	r2, [r1, #12]
 80047fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004802:	4605      	mov	r5, r0
 8004804:	0710      	lsls	r0, r2, #28
 8004806:	460c      	mov	r4, r1
 8004808:	d458      	bmi.n	80048bc <__sflush_r+0xc0>
 800480a:	684b      	ldr	r3, [r1, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	dc05      	bgt.n	800481c <__sflush_r+0x20>
 8004810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	dc02      	bgt.n	800481c <__sflush_r+0x20>
 8004816:	2000      	movs	r0, #0
 8004818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800481e:	2e00      	cmp	r6, #0
 8004820:	d0f9      	beq.n	8004816 <__sflush_r+0x1a>
 8004822:	2300      	movs	r3, #0
 8004824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004828:	682f      	ldr	r7, [r5, #0]
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	d032      	beq.n	8004894 <__sflush_r+0x98>
 800482e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	075a      	lsls	r2, r3, #29
 8004834:	d505      	bpl.n	8004842 <__sflush_r+0x46>
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	1ac0      	subs	r0, r0, r3
 800483a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800483c:	b10b      	cbz	r3, 8004842 <__sflush_r+0x46>
 800483e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004840:	1ac0      	subs	r0, r0, r3
 8004842:	2300      	movs	r3, #0
 8004844:	4602      	mov	r2, r0
 8004846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004848:	6a21      	ldr	r1, [r4, #32]
 800484a:	4628      	mov	r0, r5
 800484c:	47b0      	blx	r6
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	d106      	bne.n	8004862 <__sflush_r+0x66>
 8004854:	6829      	ldr	r1, [r5, #0]
 8004856:	291d      	cmp	r1, #29
 8004858:	d82c      	bhi.n	80048b4 <__sflush_r+0xb8>
 800485a:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <__sflush_r+0x108>)
 800485c:	40ca      	lsrs	r2, r1
 800485e:	07d6      	lsls	r6, r2, #31
 8004860:	d528      	bpl.n	80048b4 <__sflush_r+0xb8>
 8004862:	2200      	movs	r2, #0
 8004864:	6062      	str	r2, [r4, #4]
 8004866:	04d9      	lsls	r1, r3, #19
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	6022      	str	r2, [r4, #0]
 800486c:	d504      	bpl.n	8004878 <__sflush_r+0x7c>
 800486e:	1c42      	adds	r2, r0, #1
 8004870:	d101      	bne.n	8004876 <__sflush_r+0x7a>
 8004872:	682b      	ldr	r3, [r5, #0]
 8004874:	b903      	cbnz	r3, 8004878 <__sflush_r+0x7c>
 8004876:	6560      	str	r0, [r4, #84]	; 0x54
 8004878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800487a:	602f      	str	r7, [r5, #0]
 800487c:	2900      	cmp	r1, #0
 800487e:	d0ca      	beq.n	8004816 <__sflush_r+0x1a>
 8004880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004884:	4299      	cmp	r1, r3
 8004886:	d002      	beq.n	800488e <__sflush_r+0x92>
 8004888:	4628      	mov	r0, r5
 800488a:	f000 f9f1 	bl	8004c70 <_free_r>
 800488e:	2000      	movs	r0, #0
 8004890:	6360      	str	r0, [r4, #52]	; 0x34
 8004892:	e7c1      	b.n	8004818 <__sflush_r+0x1c>
 8004894:	6a21      	ldr	r1, [r4, #32]
 8004896:	2301      	movs	r3, #1
 8004898:	4628      	mov	r0, r5
 800489a:	47b0      	blx	r6
 800489c:	1c41      	adds	r1, r0, #1
 800489e:	d1c7      	bne.n	8004830 <__sflush_r+0x34>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0c4      	beq.n	8004830 <__sflush_r+0x34>
 80048a6:	2b1d      	cmp	r3, #29
 80048a8:	d001      	beq.n	80048ae <__sflush_r+0xb2>
 80048aa:	2b16      	cmp	r3, #22
 80048ac:	d101      	bne.n	80048b2 <__sflush_r+0xb6>
 80048ae:	602f      	str	r7, [r5, #0]
 80048b0:	e7b1      	b.n	8004816 <__sflush_r+0x1a>
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	e7ad      	b.n	8004818 <__sflush_r+0x1c>
 80048bc:	690f      	ldr	r7, [r1, #16]
 80048be:	2f00      	cmp	r7, #0
 80048c0:	d0a9      	beq.n	8004816 <__sflush_r+0x1a>
 80048c2:	0793      	lsls	r3, r2, #30
 80048c4:	680e      	ldr	r6, [r1, #0]
 80048c6:	bf08      	it	eq
 80048c8:	694b      	ldreq	r3, [r1, #20]
 80048ca:	600f      	str	r7, [r1, #0]
 80048cc:	bf18      	it	ne
 80048ce:	2300      	movne	r3, #0
 80048d0:	eba6 0807 	sub.w	r8, r6, r7
 80048d4:	608b      	str	r3, [r1, #8]
 80048d6:	f1b8 0f00 	cmp.w	r8, #0
 80048da:	dd9c      	ble.n	8004816 <__sflush_r+0x1a>
 80048dc:	6a21      	ldr	r1, [r4, #32]
 80048de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048e0:	4643      	mov	r3, r8
 80048e2:	463a      	mov	r2, r7
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b0      	blx	r6
 80048e8:	2800      	cmp	r0, #0
 80048ea:	dc06      	bgt.n	80048fa <__sflush_r+0xfe>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	e78e      	b.n	8004818 <__sflush_r+0x1c>
 80048fa:	4407      	add	r7, r0
 80048fc:	eba8 0800 	sub.w	r8, r8, r0
 8004900:	e7e9      	b.n	80048d6 <__sflush_r+0xda>
 8004902:	bf00      	nop
 8004904:	20400001 	.word	0x20400001

08004908 <_fflush_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	690b      	ldr	r3, [r1, #16]
 800490c:	4605      	mov	r5, r0
 800490e:	460c      	mov	r4, r1
 8004910:	b913      	cbnz	r3, 8004918 <_fflush_r+0x10>
 8004912:	2500      	movs	r5, #0
 8004914:	4628      	mov	r0, r5
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	b118      	cbz	r0, 8004922 <_fflush_r+0x1a>
 800491a:	6983      	ldr	r3, [r0, #24]
 800491c:	b90b      	cbnz	r3, 8004922 <_fflush_r+0x1a>
 800491e:	f000 f887 	bl	8004a30 <__sinit>
 8004922:	4b14      	ldr	r3, [pc, #80]	; (8004974 <_fflush_r+0x6c>)
 8004924:	429c      	cmp	r4, r3
 8004926:	d11b      	bne.n	8004960 <_fflush_r+0x58>
 8004928:	686c      	ldr	r4, [r5, #4]
 800492a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ef      	beq.n	8004912 <_fflush_r+0xa>
 8004932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004934:	07d0      	lsls	r0, r2, #31
 8004936:	d404      	bmi.n	8004942 <_fflush_r+0x3a>
 8004938:	0599      	lsls	r1, r3, #22
 800493a:	d402      	bmi.n	8004942 <_fflush_r+0x3a>
 800493c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800493e:	f000 f927 	bl	8004b90 <__retarget_lock_acquire_recursive>
 8004942:	4628      	mov	r0, r5
 8004944:	4621      	mov	r1, r4
 8004946:	f7ff ff59 	bl	80047fc <__sflush_r>
 800494a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800494c:	07da      	lsls	r2, r3, #31
 800494e:	4605      	mov	r5, r0
 8004950:	d4e0      	bmi.n	8004914 <_fflush_r+0xc>
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	059b      	lsls	r3, r3, #22
 8004956:	d4dd      	bmi.n	8004914 <_fflush_r+0xc>
 8004958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800495a:	f000 f91a 	bl	8004b92 <__retarget_lock_release_recursive>
 800495e:	e7d9      	b.n	8004914 <_fflush_r+0xc>
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <_fflush_r+0x70>)
 8004962:	429c      	cmp	r4, r3
 8004964:	d101      	bne.n	800496a <_fflush_r+0x62>
 8004966:	68ac      	ldr	r4, [r5, #8]
 8004968:	e7df      	b.n	800492a <_fflush_r+0x22>
 800496a:	4b04      	ldr	r3, [pc, #16]	; (800497c <_fflush_r+0x74>)
 800496c:	429c      	cmp	r4, r3
 800496e:	bf08      	it	eq
 8004970:	68ec      	ldreq	r4, [r5, #12]
 8004972:	e7da      	b.n	800492a <_fflush_r+0x22>
 8004974:	08005ad4 	.word	0x08005ad4
 8004978:	08005af4 	.word	0x08005af4
 800497c:	08005ab4 	.word	0x08005ab4

08004980 <std>:
 8004980:	2300      	movs	r3, #0
 8004982:	b510      	push	{r4, lr}
 8004984:	4604      	mov	r4, r0
 8004986:	e9c0 3300 	strd	r3, r3, [r0]
 800498a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800498e:	6083      	str	r3, [r0, #8]
 8004990:	8181      	strh	r1, [r0, #12]
 8004992:	6643      	str	r3, [r0, #100]	; 0x64
 8004994:	81c2      	strh	r2, [r0, #14]
 8004996:	6183      	str	r3, [r0, #24]
 8004998:	4619      	mov	r1, r3
 800499a:	2208      	movs	r2, #8
 800499c:	305c      	adds	r0, #92	; 0x5c
 800499e:	f7ff fd55 	bl	800444c <memset>
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <std+0x38>)
 80049a4:	6263      	str	r3, [r4, #36]	; 0x24
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <std+0x3c>)
 80049a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <std+0x40>)
 80049ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <std+0x44>)
 80049b0:	6224      	str	r4, [r4, #32]
 80049b2:	6323      	str	r3, [r4, #48]	; 0x30
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	bf00      	nop
 80049b8:	080056e5 	.word	0x080056e5
 80049bc:	08005707 	.word	0x08005707
 80049c0:	0800573f 	.word	0x0800573f
 80049c4:	08005763 	.word	0x08005763

080049c8 <_cleanup_r>:
 80049c8:	4901      	ldr	r1, [pc, #4]	; (80049d0 <_cleanup_r+0x8>)
 80049ca:	f000 b8c1 	b.w	8004b50 <_fwalk_reent>
 80049ce:	bf00      	nop
 80049d0:	08004909 	.word	0x08004909

080049d4 <__sfmoreglue>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	2268      	movs	r2, #104	; 0x68
 80049d8:	1e4d      	subs	r5, r1, #1
 80049da:	4355      	muls	r5, r2
 80049dc:	460e      	mov	r6, r1
 80049de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049e2:	f000 f9b1 	bl	8004d48 <_malloc_r>
 80049e6:	4604      	mov	r4, r0
 80049e8:	b140      	cbz	r0, 80049fc <__sfmoreglue+0x28>
 80049ea:	2100      	movs	r1, #0
 80049ec:	e9c0 1600 	strd	r1, r6, [r0]
 80049f0:	300c      	adds	r0, #12
 80049f2:	60a0      	str	r0, [r4, #8]
 80049f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049f8:	f7ff fd28 	bl	800444c <memset>
 80049fc:	4620      	mov	r0, r4
 80049fe:	bd70      	pop	{r4, r5, r6, pc}

08004a00 <__sfp_lock_acquire>:
 8004a00:	4801      	ldr	r0, [pc, #4]	; (8004a08 <__sfp_lock_acquire+0x8>)
 8004a02:	f000 b8c5 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004a06:	bf00      	nop
 8004a08:	20000861 	.word	0x20000861

08004a0c <__sfp_lock_release>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	; (8004a14 <__sfp_lock_release+0x8>)
 8004a0e:	f000 b8c0 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004a12:	bf00      	nop
 8004a14:	20000861 	.word	0x20000861

08004a18 <__sinit_lock_acquire>:
 8004a18:	4801      	ldr	r0, [pc, #4]	; (8004a20 <__sinit_lock_acquire+0x8>)
 8004a1a:	f000 b8b9 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004a1e:	bf00      	nop
 8004a20:	20000862 	.word	0x20000862

08004a24 <__sinit_lock_release>:
 8004a24:	4801      	ldr	r0, [pc, #4]	; (8004a2c <__sinit_lock_release+0x8>)
 8004a26:	f000 b8b4 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	20000862 	.word	0x20000862

08004a30 <__sinit>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	4604      	mov	r4, r0
 8004a34:	f7ff fff0 	bl	8004a18 <__sinit_lock_acquire>
 8004a38:	69a3      	ldr	r3, [r4, #24]
 8004a3a:	b11b      	cbz	r3, 8004a44 <__sinit+0x14>
 8004a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a40:	f7ff bff0 	b.w	8004a24 <__sinit_lock_release>
 8004a44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a48:	6523      	str	r3, [r4, #80]	; 0x50
 8004a4a:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <__sinit+0x68>)
 8004a4c:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <__sinit+0x6c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	bf04      	itt	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	61a3      	streq	r3, [r4, #24]
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f820 	bl	8004aa0 <__sfp>
 8004a60:	6060      	str	r0, [r4, #4]
 8004a62:	4620      	mov	r0, r4
 8004a64:	f000 f81c 	bl	8004aa0 <__sfp>
 8004a68:	60a0      	str	r0, [r4, #8]
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f000 f818 	bl	8004aa0 <__sfp>
 8004a70:	2200      	movs	r2, #0
 8004a72:	60e0      	str	r0, [r4, #12]
 8004a74:	2104      	movs	r1, #4
 8004a76:	6860      	ldr	r0, [r4, #4]
 8004a78:	f7ff ff82 	bl	8004980 <std>
 8004a7c:	68a0      	ldr	r0, [r4, #8]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	2109      	movs	r1, #9
 8004a82:	f7ff ff7d 	bl	8004980 <std>
 8004a86:	68e0      	ldr	r0, [r4, #12]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	2112      	movs	r1, #18
 8004a8c:	f7ff ff78 	bl	8004980 <std>
 8004a90:	2301      	movs	r3, #1
 8004a92:	61a3      	str	r3, [r4, #24]
 8004a94:	e7d2      	b.n	8004a3c <__sinit+0xc>
 8004a96:	bf00      	nop
 8004a98:	08005a00 	.word	0x08005a00
 8004a9c:	080049c9 	.word	0x080049c9

08004aa0 <__sfp>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	4607      	mov	r7, r0
 8004aa4:	f7ff ffac 	bl	8004a00 <__sfp_lock_acquire>
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <__sfp+0x84>)
 8004aaa:	681e      	ldr	r6, [r3, #0]
 8004aac:	69b3      	ldr	r3, [r6, #24]
 8004aae:	b913      	cbnz	r3, 8004ab6 <__sfp+0x16>
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f7ff ffbd 	bl	8004a30 <__sinit>
 8004ab6:	3648      	adds	r6, #72	; 0x48
 8004ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	d503      	bpl.n	8004ac8 <__sfp+0x28>
 8004ac0:	6833      	ldr	r3, [r6, #0]
 8004ac2:	b30b      	cbz	r3, 8004b08 <__sfp+0x68>
 8004ac4:	6836      	ldr	r6, [r6, #0]
 8004ac6:	e7f7      	b.n	8004ab8 <__sfp+0x18>
 8004ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004acc:	b9d5      	cbnz	r5, 8004b04 <__sfp+0x64>
 8004ace:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <__sfp+0x88>)
 8004ad0:	60e3      	str	r3, [r4, #12]
 8004ad2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ad6:	6665      	str	r5, [r4, #100]	; 0x64
 8004ad8:	f000 f859 	bl	8004b8e <__retarget_lock_init_recursive>
 8004adc:	f7ff ff96 	bl	8004a0c <__sfp_lock_release>
 8004ae0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ae4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ae8:	6025      	str	r5, [r4, #0]
 8004aea:	61a5      	str	r5, [r4, #24]
 8004aec:	2208      	movs	r2, #8
 8004aee:	4629      	mov	r1, r5
 8004af0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004af4:	f7ff fcaa 	bl	800444c <memset>
 8004af8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004afc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b00:	4620      	mov	r0, r4
 8004b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b04:	3468      	adds	r4, #104	; 0x68
 8004b06:	e7d9      	b.n	8004abc <__sfp+0x1c>
 8004b08:	2104      	movs	r1, #4
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f7ff ff62 	bl	80049d4 <__sfmoreglue>
 8004b10:	4604      	mov	r4, r0
 8004b12:	6030      	str	r0, [r6, #0]
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d1d5      	bne.n	8004ac4 <__sfp+0x24>
 8004b18:	f7ff ff78 	bl	8004a0c <__sfp_lock_release>
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	e7ee      	b.n	8004b00 <__sfp+0x60>
 8004b22:	bf00      	nop
 8004b24:	08005a00 	.word	0x08005a00
 8004b28:	ffff0001 	.word	0xffff0001

08004b2c <fiprintf>:
 8004b2c:	b40e      	push	{r1, r2, r3}
 8004b2e:	b503      	push	{r0, r1, lr}
 8004b30:	4601      	mov	r1, r0
 8004b32:	ab03      	add	r3, sp, #12
 8004b34:	4805      	ldr	r0, [pc, #20]	; (8004b4c <fiprintf+0x20>)
 8004b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	f000 fafd 	bl	800513c <_vfiprintf_r>
 8004b42:	b002      	add	sp, #8
 8004b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b48:	b003      	add	sp, #12
 8004b4a:	4770      	bx	lr
 8004b4c:	2000000c 	.word	0x2000000c

08004b50 <_fwalk_reent>:
 8004b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b54:	4606      	mov	r6, r0
 8004b56:	4688      	mov	r8, r1
 8004b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b5c:	2700      	movs	r7, #0
 8004b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b62:	f1b9 0901 	subs.w	r9, r9, #1
 8004b66:	d505      	bpl.n	8004b74 <_fwalk_reent+0x24>
 8004b68:	6824      	ldr	r4, [r4, #0]
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d1f7      	bne.n	8004b5e <_fwalk_reent+0xe>
 8004b6e:	4638      	mov	r0, r7
 8004b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b74:	89ab      	ldrh	r3, [r5, #12]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d907      	bls.n	8004b8a <_fwalk_reent+0x3a>
 8004b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	d003      	beq.n	8004b8a <_fwalk_reent+0x3a>
 8004b82:	4629      	mov	r1, r5
 8004b84:	4630      	mov	r0, r6
 8004b86:	47c0      	blx	r8
 8004b88:	4307      	orrs	r7, r0
 8004b8a:	3568      	adds	r5, #104	; 0x68
 8004b8c:	e7e9      	b.n	8004b62 <_fwalk_reent+0x12>

08004b8e <__retarget_lock_init_recursive>:
 8004b8e:	4770      	bx	lr

08004b90 <__retarget_lock_acquire_recursive>:
 8004b90:	4770      	bx	lr

08004b92 <__retarget_lock_release_recursive>:
 8004b92:	4770      	bx	lr

08004b94 <__swhatbuf_r>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	460e      	mov	r6, r1
 8004b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	b096      	sub	sp, #88	; 0x58
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	da08      	bge.n	8004bb8 <__swhatbuf_r+0x24>
 8004ba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	602a      	str	r2, [r5, #0]
 8004bae:	061a      	lsls	r2, r3, #24
 8004bb0:	d410      	bmi.n	8004bd4 <__swhatbuf_r+0x40>
 8004bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb6:	e00e      	b.n	8004bd6 <__swhatbuf_r+0x42>
 8004bb8:	466a      	mov	r2, sp
 8004bba:	f000 fe01 	bl	80057c0 <_fstat_r>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	dbf1      	blt.n	8004ba6 <__swhatbuf_r+0x12>
 8004bc2:	9a01      	ldr	r2, [sp, #4]
 8004bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bcc:	425a      	negs	r2, r3
 8004bce:	415a      	adcs	r2, r3
 8004bd0:	602a      	str	r2, [r5, #0]
 8004bd2:	e7ee      	b.n	8004bb2 <__swhatbuf_r+0x1e>
 8004bd4:	2340      	movs	r3, #64	; 0x40
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	b016      	add	sp, #88	; 0x58
 8004bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004be0 <__smakebuf_r>:
 8004be0:	898b      	ldrh	r3, [r1, #12]
 8004be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004be4:	079d      	lsls	r5, r3, #30
 8004be6:	4606      	mov	r6, r0
 8004be8:	460c      	mov	r4, r1
 8004bea:	d507      	bpl.n	8004bfc <__smakebuf_r+0x1c>
 8004bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	6123      	str	r3, [r4, #16]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	6163      	str	r3, [r4, #20]
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	ab01      	add	r3, sp, #4
 8004bfe:	466a      	mov	r2, sp
 8004c00:	f7ff ffc8 	bl	8004b94 <__swhatbuf_r>
 8004c04:	9900      	ldr	r1, [sp, #0]
 8004c06:	4605      	mov	r5, r0
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 f89d 	bl	8004d48 <_malloc_r>
 8004c0e:	b948      	cbnz	r0, 8004c24 <__smakebuf_r+0x44>
 8004c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c14:	059a      	lsls	r2, r3, #22
 8004c16:	d4ef      	bmi.n	8004bf8 <__smakebuf_r+0x18>
 8004c18:	f023 0303 	bic.w	r3, r3, #3
 8004c1c:	f043 0302 	orr.w	r3, r3, #2
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	e7e3      	b.n	8004bec <__smakebuf_r+0xc>
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <__smakebuf_r+0x7c>)
 8004c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	6020      	str	r0, [r4, #0]
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c30:	81a3      	strh	r3, [r4, #12]
 8004c32:	9b00      	ldr	r3, [sp, #0]
 8004c34:	6163      	str	r3, [r4, #20]
 8004c36:	9b01      	ldr	r3, [sp, #4]
 8004c38:	6120      	str	r0, [r4, #16]
 8004c3a:	b15b      	cbz	r3, 8004c54 <__smakebuf_r+0x74>
 8004c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 fdcf 	bl	80057e4 <_isatty_r>
 8004c46:	b128      	cbz	r0, 8004c54 <__smakebuf_r+0x74>
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	89a0      	ldrh	r0, [r4, #12]
 8004c56:	4305      	orrs	r5, r0
 8004c58:	81a5      	strh	r5, [r4, #12]
 8004c5a:	e7cd      	b.n	8004bf8 <__smakebuf_r+0x18>
 8004c5c:	080049c9 	.word	0x080049c9

08004c60 <malloc>:
 8004c60:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <malloc+0xc>)
 8004c62:	4601      	mov	r1, r0
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	f000 b86f 	b.w	8004d48 <_malloc_r>
 8004c6a:	bf00      	nop
 8004c6c:	2000000c 	.word	0x2000000c

08004c70 <_free_r>:
 8004c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c72:	2900      	cmp	r1, #0
 8004c74:	d044      	beq.n	8004d00 <_free_r+0x90>
 8004c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c7a:	9001      	str	r0, [sp, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c82:	bfb8      	it	lt
 8004c84:	18e4      	addlt	r4, r4, r3
 8004c86:	f000 fdf7 	bl	8005878 <__malloc_lock>
 8004c8a:	4a1e      	ldr	r2, [pc, #120]	; (8004d04 <_free_r+0x94>)
 8004c8c:	9801      	ldr	r0, [sp, #4]
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	b933      	cbnz	r3, 8004ca0 <_free_r+0x30>
 8004c92:	6063      	str	r3, [r4, #4]
 8004c94:	6014      	str	r4, [r2, #0]
 8004c96:	b003      	add	sp, #12
 8004c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c9c:	f000 bdf2 	b.w	8005884 <__malloc_unlock>
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	d908      	bls.n	8004cb6 <_free_r+0x46>
 8004ca4:	6825      	ldr	r5, [r4, #0]
 8004ca6:	1961      	adds	r1, r4, r5
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	bf01      	itttt	eq
 8004cac:	6819      	ldreq	r1, [r3, #0]
 8004cae:	685b      	ldreq	r3, [r3, #4]
 8004cb0:	1949      	addeq	r1, r1, r5
 8004cb2:	6021      	streq	r1, [r4, #0]
 8004cb4:	e7ed      	b.n	8004c92 <_free_r+0x22>
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b10b      	cbz	r3, 8004cc0 <_free_r+0x50>
 8004cbc:	42a3      	cmp	r3, r4
 8004cbe:	d9fa      	bls.n	8004cb6 <_free_r+0x46>
 8004cc0:	6811      	ldr	r1, [r2, #0]
 8004cc2:	1855      	adds	r5, r2, r1
 8004cc4:	42a5      	cmp	r5, r4
 8004cc6:	d10b      	bne.n	8004ce0 <_free_r+0x70>
 8004cc8:	6824      	ldr	r4, [r4, #0]
 8004cca:	4421      	add	r1, r4
 8004ccc:	1854      	adds	r4, r2, r1
 8004cce:	42a3      	cmp	r3, r4
 8004cd0:	6011      	str	r1, [r2, #0]
 8004cd2:	d1e0      	bne.n	8004c96 <_free_r+0x26>
 8004cd4:	681c      	ldr	r4, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	6053      	str	r3, [r2, #4]
 8004cda:	4421      	add	r1, r4
 8004cdc:	6011      	str	r1, [r2, #0]
 8004cde:	e7da      	b.n	8004c96 <_free_r+0x26>
 8004ce0:	d902      	bls.n	8004ce8 <_free_r+0x78>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	6003      	str	r3, [r0, #0]
 8004ce6:	e7d6      	b.n	8004c96 <_free_r+0x26>
 8004ce8:	6825      	ldr	r5, [r4, #0]
 8004cea:	1961      	adds	r1, r4, r5
 8004cec:	428b      	cmp	r3, r1
 8004cee:	bf04      	itt	eq
 8004cf0:	6819      	ldreq	r1, [r3, #0]
 8004cf2:	685b      	ldreq	r3, [r3, #4]
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	bf04      	itt	eq
 8004cf8:	1949      	addeq	r1, r1, r5
 8004cfa:	6021      	streq	r1, [r4, #0]
 8004cfc:	6054      	str	r4, [r2, #4]
 8004cfe:	e7ca      	b.n	8004c96 <_free_r+0x26>
 8004d00:	b003      	add	sp, #12
 8004d02:	bd30      	pop	{r4, r5, pc}
 8004d04:	20000864 	.word	0x20000864

08004d08 <sbrk_aligned>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4e0e      	ldr	r6, [pc, #56]	; (8004d44 <sbrk_aligned+0x3c>)
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	6831      	ldr	r1, [r6, #0]
 8004d10:	4605      	mov	r5, r0
 8004d12:	b911      	cbnz	r1, 8004d1a <sbrk_aligned+0x12>
 8004d14:	f000 fcd6 	bl	80056c4 <_sbrk_r>
 8004d18:	6030      	str	r0, [r6, #0]
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 fcd1 	bl	80056c4 <_sbrk_r>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d00a      	beq.n	8004d3c <sbrk_aligned+0x34>
 8004d26:	1cc4      	adds	r4, r0, #3
 8004d28:	f024 0403 	bic.w	r4, r4, #3
 8004d2c:	42a0      	cmp	r0, r4
 8004d2e:	d007      	beq.n	8004d40 <sbrk_aligned+0x38>
 8004d30:	1a21      	subs	r1, r4, r0
 8004d32:	4628      	mov	r0, r5
 8004d34:	f000 fcc6 	bl	80056c4 <_sbrk_r>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d101      	bne.n	8004d40 <sbrk_aligned+0x38>
 8004d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004d40:	4620      	mov	r0, r4
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	20000868 	.word	0x20000868

08004d48 <_malloc_r>:
 8004d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	1ccd      	adds	r5, r1, #3
 8004d4e:	f025 0503 	bic.w	r5, r5, #3
 8004d52:	3508      	adds	r5, #8
 8004d54:	2d0c      	cmp	r5, #12
 8004d56:	bf38      	it	cc
 8004d58:	250c      	movcc	r5, #12
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	db01      	blt.n	8004d64 <_malloc_r+0x1c>
 8004d60:	42a9      	cmp	r1, r5
 8004d62:	d905      	bls.n	8004d70 <_malloc_r+0x28>
 8004d64:	230c      	movs	r3, #12
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	2600      	movs	r6, #0
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d70:	4e2e      	ldr	r6, [pc, #184]	; (8004e2c <_malloc_r+0xe4>)
 8004d72:	f000 fd81 	bl	8005878 <__malloc_lock>
 8004d76:	6833      	ldr	r3, [r6, #0]
 8004d78:	461c      	mov	r4, r3
 8004d7a:	bb34      	cbnz	r4, 8004dca <_malloc_r+0x82>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4638      	mov	r0, r7
 8004d80:	f7ff ffc2 	bl	8004d08 <sbrk_aligned>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	4604      	mov	r4, r0
 8004d88:	d14d      	bne.n	8004e26 <_malloc_r+0xde>
 8004d8a:	6834      	ldr	r4, [r6, #0]
 8004d8c:	4626      	mov	r6, r4
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d140      	bne.n	8004e14 <_malloc_r+0xcc>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	4631      	mov	r1, r6
 8004d96:	4638      	mov	r0, r7
 8004d98:	eb04 0803 	add.w	r8, r4, r3
 8004d9c:	f000 fc92 	bl	80056c4 <_sbrk_r>
 8004da0:	4580      	cmp	r8, r0
 8004da2:	d13a      	bne.n	8004e1a <_malloc_r+0xd2>
 8004da4:	6821      	ldr	r1, [r4, #0]
 8004da6:	3503      	adds	r5, #3
 8004da8:	1a6d      	subs	r5, r5, r1
 8004daa:	f025 0503 	bic.w	r5, r5, #3
 8004dae:	3508      	adds	r5, #8
 8004db0:	2d0c      	cmp	r5, #12
 8004db2:	bf38      	it	cc
 8004db4:	250c      	movcc	r5, #12
 8004db6:	4629      	mov	r1, r5
 8004db8:	4638      	mov	r0, r7
 8004dba:	f7ff ffa5 	bl	8004d08 <sbrk_aligned>
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d02b      	beq.n	8004e1a <_malloc_r+0xd2>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	442b      	add	r3, r5
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	e00e      	b.n	8004de8 <_malloc_r+0xa0>
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	1b52      	subs	r2, r2, r5
 8004dce:	d41e      	bmi.n	8004e0e <_malloc_r+0xc6>
 8004dd0:	2a0b      	cmp	r2, #11
 8004dd2:	d916      	bls.n	8004e02 <_malloc_r+0xba>
 8004dd4:	1961      	adds	r1, r4, r5
 8004dd6:	42a3      	cmp	r3, r4
 8004dd8:	6025      	str	r5, [r4, #0]
 8004dda:	bf18      	it	ne
 8004ddc:	6059      	strne	r1, [r3, #4]
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	bf08      	it	eq
 8004de2:	6031      	streq	r1, [r6, #0]
 8004de4:	5162      	str	r2, [r4, r5]
 8004de6:	604b      	str	r3, [r1, #4]
 8004de8:	4638      	mov	r0, r7
 8004dea:	f104 060b 	add.w	r6, r4, #11
 8004dee:	f000 fd49 	bl	8005884 <__malloc_unlock>
 8004df2:	f026 0607 	bic.w	r6, r6, #7
 8004df6:	1d23      	adds	r3, r4, #4
 8004df8:	1af2      	subs	r2, r6, r3
 8004dfa:	d0b6      	beq.n	8004d6a <_malloc_r+0x22>
 8004dfc:	1b9b      	subs	r3, r3, r6
 8004dfe:	50a3      	str	r3, [r4, r2]
 8004e00:	e7b3      	b.n	8004d6a <_malloc_r+0x22>
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	bf0c      	ite	eq
 8004e08:	6032      	streq	r2, [r6, #0]
 8004e0a:	605a      	strne	r2, [r3, #4]
 8004e0c:	e7ec      	b.n	8004de8 <_malloc_r+0xa0>
 8004e0e:	4623      	mov	r3, r4
 8004e10:	6864      	ldr	r4, [r4, #4]
 8004e12:	e7b2      	b.n	8004d7a <_malloc_r+0x32>
 8004e14:	4634      	mov	r4, r6
 8004e16:	6876      	ldr	r6, [r6, #4]
 8004e18:	e7b9      	b.n	8004d8e <_malloc_r+0x46>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f000 fd30 	bl	8005884 <__malloc_unlock>
 8004e24:	e7a1      	b.n	8004d6a <_malloc_r+0x22>
 8004e26:	6025      	str	r5, [r4, #0]
 8004e28:	e7de      	b.n	8004de8 <_malloc_r+0xa0>
 8004e2a:	bf00      	nop
 8004e2c:	20000864 	.word	0x20000864

08004e30 <__ssputs_r>:
 8004e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	688e      	ldr	r6, [r1, #8]
 8004e36:	429e      	cmp	r6, r3
 8004e38:	4682      	mov	sl, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4690      	mov	r8, r2
 8004e3e:	461f      	mov	r7, r3
 8004e40:	d838      	bhi.n	8004eb4 <__ssputs_r+0x84>
 8004e42:	898a      	ldrh	r2, [r1, #12]
 8004e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e48:	d032      	beq.n	8004eb0 <__ssputs_r+0x80>
 8004e4a:	6825      	ldr	r5, [r4, #0]
 8004e4c:	6909      	ldr	r1, [r1, #16]
 8004e4e:	eba5 0901 	sub.w	r9, r5, r1
 8004e52:	6965      	ldr	r5, [r4, #20]
 8004e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	444b      	add	r3, r9
 8004e60:	106d      	asrs	r5, r5, #1
 8004e62:	429d      	cmp	r5, r3
 8004e64:	bf38      	it	cc
 8004e66:	461d      	movcc	r5, r3
 8004e68:	0553      	lsls	r3, r2, #21
 8004e6a:	d531      	bpl.n	8004ed0 <__ssputs_r+0xa0>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7ff ff6b 	bl	8004d48 <_malloc_r>
 8004e72:	4606      	mov	r6, r0
 8004e74:	b950      	cbnz	r0, 8004e8c <__ssputs_r+0x5c>
 8004e76:	230c      	movs	r3, #12
 8004e78:	f8ca 3000 	str.w	r3, [sl]
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	6921      	ldr	r1, [r4, #16]
 8004e8e:	464a      	mov	r2, r9
 8004e90:	f000 fcca 	bl	8005828 <memcpy>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	6126      	str	r6, [r4, #16]
 8004ea2:	6165      	str	r5, [r4, #20]
 8004ea4:	444e      	add	r6, r9
 8004ea6:	eba5 0509 	sub.w	r5, r5, r9
 8004eaa:	6026      	str	r6, [r4, #0]
 8004eac:	60a5      	str	r5, [r4, #8]
 8004eae:	463e      	mov	r6, r7
 8004eb0:	42be      	cmp	r6, r7
 8004eb2:	d900      	bls.n	8004eb6 <__ssputs_r+0x86>
 8004eb4:	463e      	mov	r6, r7
 8004eb6:	6820      	ldr	r0, [r4, #0]
 8004eb8:	4632      	mov	r2, r6
 8004eba:	4641      	mov	r1, r8
 8004ebc:	f000 fcc2 	bl	8005844 <memmove>
 8004ec0:	68a3      	ldr	r3, [r4, #8]
 8004ec2:	1b9b      	subs	r3, r3, r6
 8004ec4:	60a3      	str	r3, [r4, #8]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	4433      	add	r3, r6
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	2000      	movs	r0, #0
 8004ece:	e7db      	b.n	8004e88 <__ssputs_r+0x58>
 8004ed0:	462a      	mov	r2, r5
 8004ed2:	f000 fcdd 	bl	8005890 <_realloc_r>
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d1e1      	bne.n	8004ea0 <__ssputs_r+0x70>
 8004edc:	6921      	ldr	r1, [r4, #16]
 8004ede:	4650      	mov	r0, sl
 8004ee0:	f7ff fec6 	bl	8004c70 <_free_r>
 8004ee4:	e7c7      	b.n	8004e76 <__ssputs_r+0x46>
	...

08004ee8 <_svfiprintf_r>:
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	4698      	mov	r8, r3
 8004eee:	898b      	ldrh	r3, [r1, #12]
 8004ef0:	061b      	lsls	r3, r3, #24
 8004ef2:	b09d      	sub	sp, #116	; 0x74
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	460d      	mov	r5, r1
 8004ef8:	4614      	mov	r4, r2
 8004efa:	d50e      	bpl.n	8004f1a <_svfiprintf_r+0x32>
 8004efc:	690b      	ldr	r3, [r1, #16]
 8004efe:	b963      	cbnz	r3, 8004f1a <_svfiprintf_r+0x32>
 8004f00:	2140      	movs	r1, #64	; 0x40
 8004f02:	f7ff ff21 	bl	8004d48 <_malloc_r>
 8004f06:	6028      	str	r0, [r5, #0]
 8004f08:	6128      	str	r0, [r5, #16]
 8004f0a:	b920      	cbnz	r0, 8004f16 <_svfiprintf_r+0x2e>
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e0d1      	b.n	80050ba <_svfiprintf_r+0x1d2>
 8004f16:	2340      	movs	r3, #64	; 0x40
 8004f18:	616b      	str	r3, [r5, #20]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f1e:	2320      	movs	r3, #32
 8004f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f28:	2330      	movs	r3, #48	; 0x30
 8004f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050d4 <_svfiprintf_r+0x1ec>
 8004f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f32:	f04f 0901 	mov.w	r9, #1
 8004f36:	4623      	mov	r3, r4
 8004f38:	469a      	mov	sl, r3
 8004f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f3e:	b10a      	cbz	r2, 8004f44 <_svfiprintf_r+0x5c>
 8004f40:	2a25      	cmp	r2, #37	; 0x25
 8004f42:	d1f9      	bne.n	8004f38 <_svfiprintf_r+0x50>
 8004f44:	ebba 0b04 	subs.w	fp, sl, r4
 8004f48:	d00b      	beq.n	8004f62 <_svfiprintf_r+0x7a>
 8004f4a:	465b      	mov	r3, fp
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4638      	mov	r0, r7
 8004f52:	f7ff ff6d 	bl	8004e30 <__ssputs_r>
 8004f56:	3001      	adds	r0, #1
 8004f58:	f000 80aa 	beq.w	80050b0 <_svfiprintf_r+0x1c8>
 8004f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f5e:	445a      	add	r2, fp
 8004f60:	9209      	str	r2, [sp, #36]	; 0x24
 8004f62:	f89a 3000 	ldrb.w	r3, [sl]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80a2 	beq.w	80050b0 <_svfiprintf_r+0x1c8>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f76:	f10a 0a01 	add.w	sl, sl, #1
 8004f7a:	9304      	str	r3, [sp, #16]
 8004f7c:	9307      	str	r3, [sp, #28]
 8004f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f82:	931a      	str	r3, [sp, #104]	; 0x68
 8004f84:	4654      	mov	r4, sl
 8004f86:	2205      	movs	r2, #5
 8004f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8c:	4851      	ldr	r0, [pc, #324]	; (80050d4 <_svfiprintf_r+0x1ec>)
 8004f8e:	f7fb f937 	bl	8000200 <memchr>
 8004f92:	9a04      	ldr	r2, [sp, #16]
 8004f94:	b9d8      	cbnz	r0, 8004fce <_svfiprintf_r+0xe6>
 8004f96:	06d0      	lsls	r0, r2, #27
 8004f98:	bf44      	itt	mi
 8004f9a:	2320      	movmi	r3, #32
 8004f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fa0:	0711      	lsls	r1, r2, #28
 8004fa2:	bf44      	itt	mi
 8004fa4:	232b      	movmi	r3, #43	; 0x2b
 8004fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004faa:	f89a 3000 	ldrb.w	r3, [sl]
 8004fae:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb0:	d015      	beq.n	8004fde <_svfiprintf_r+0xf6>
 8004fb2:	9a07      	ldr	r2, [sp, #28]
 8004fb4:	4654      	mov	r4, sl
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f04f 0c0a 	mov.w	ip, #10
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fc2:	3b30      	subs	r3, #48	; 0x30
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d94e      	bls.n	8005066 <_svfiprintf_r+0x17e>
 8004fc8:	b1b0      	cbz	r0, 8004ff8 <_svfiprintf_r+0x110>
 8004fca:	9207      	str	r2, [sp, #28]
 8004fcc:	e014      	b.n	8004ff8 <_svfiprintf_r+0x110>
 8004fce:	eba0 0308 	sub.w	r3, r0, r8
 8004fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	46a2      	mov	sl, r4
 8004fdc:	e7d2      	b.n	8004f84 <_svfiprintf_r+0x9c>
 8004fde:	9b03      	ldr	r3, [sp, #12]
 8004fe0:	1d19      	adds	r1, r3, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	9103      	str	r1, [sp, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfbb      	ittet	lt
 8004fea:	425b      	neglt	r3, r3
 8004fec:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff0:	9307      	strge	r3, [sp, #28]
 8004ff2:	9307      	strlt	r3, [sp, #28]
 8004ff4:	bfb8      	it	lt
 8004ff6:	9204      	strlt	r2, [sp, #16]
 8004ff8:	7823      	ldrb	r3, [r4, #0]
 8004ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8004ffc:	d10c      	bne.n	8005018 <_svfiprintf_r+0x130>
 8004ffe:	7863      	ldrb	r3, [r4, #1]
 8005000:	2b2a      	cmp	r3, #42	; 0x2a
 8005002:	d135      	bne.n	8005070 <_svfiprintf_r+0x188>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	9203      	str	r2, [sp, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	bfb8      	it	lt
 8005010:	f04f 33ff 	movlt.w	r3, #4294967295
 8005014:	3402      	adds	r4, #2
 8005016:	9305      	str	r3, [sp, #20]
 8005018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050e4 <_svfiprintf_r+0x1fc>
 800501c:	7821      	ldrb	r1, [r4, #0]
 800501e:	2203      	movs	r2, #3
 8005020:	4650      	mov	r0, sl
 8005022:	f7fb f8ed 	bl	8000200 <memchr>
 8005026:	b140      	cbz	r0, 800503a <_svfiprintf_r+0x152>
 8005028:	2340      	movs	r3, #64	; 0x40
 800502a:	eba0 000a 	sub.w	r0, r0, sl
 800502e:	fa03 f000 	lsl.w	r0, r3, r0
 8005032:	9b04      	ldr	r3, [sp, #16]
 8005034:	4303      	orrs	r3, r0
 8005036:	3401      	adds	r4, #1
 8005038:	9304      	str	r3, [sp, #16]
 800503a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503e:	4826      	ldr	r0, [pc, #152]	; (80050d8 <_svfiprintf_r+0x1f0>)
 8005040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005044:	2206      	movs	r2, #6
 8005046:	f7fb f8db 	bl	8000200 <memchr>
 800504a:	2800      	cmp	r0, #0
 800504c:	d038      	beq.n	80050c0 <_svfiprintf_r+0x1d8>
 800504e:	4b23      	ldr	r3, [pc, #140]	; (80050dc <_svfiprintf_r+0x1f4>)
 8005050:	bb1b      	cbnz	r3, 800509a <_svfiprintf_r+0x1b2>
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	3307      	adds	r3, #7
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	3308      	adds	r3, #8
 800505c:	9303      	str	r3, [sp, #12]
 800505e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005060:	4433      	add	r3, r6
 8005062:	9309      	str	r3, [sp, #36]	; 0x24
 8005064:	e767      	b.n	8004f36 <_svfiprintf_r+0x4e>
 8005066:	fb0c 3202 	mla	r2, ip, r2, r3
 800506a:	460c      	mov	r4, r1
 800506c:	2001      	movs	r0, #1
 800506e:	e7a5      	b.n	8004fbc <_svfiprintf_r+0xd4>
 8005070:	2300      	movs	r3, #0
 8005072:	3401      	adds	r4, #1
 8005074:	9305      	str	r3, [sp, #20]
 8005076:	4619      	mov	r1, r3
 8005078:	f04f 0c0a 	mov.w	ip, #10
 800507c:	4620      	mov	r0, r4
 800507e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005082:	3a30      	subs	r2, #48	; 0x30
 8005084:	2a09      	cmp	r2, #9
 8005086:	d903      	bls.n	8005090 <_svfiprintf_r+0x1a8>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0c5      	beq.n	8005018 <_svfiprintf_r+0x130>
 800508c:	9105      	str	r1, [sp, #20]
 800508e:	e7c3      	b.n	8005018 <_svfiprintf_r+0x130>
 8005090:	fb0c 2101 	mla	r1, ip, r1, r2
 8005094:	4604      	mov	r4, r0
 8005096:	2301      	movs	r3, #1
 8005098:	e7f0      	b.n	800507c <_svfiprintf_r+0x194>
 800509a:	ab03      	add	r3, sp, #12
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	462a      	mov	r2, r5
 80050a0:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <_svfiprintf_r+0x1f8>)
 80050a2:	a904      	add	r1, sp, #16
 80050a4:	4638      	mov	r0, r7
 80050a6:	f3af 8000 	nop.w
 80050aa:	1c42      	adds	r2, r0, #1
 80050ac:	4606      	mov	r6, r0
 80050ae:	d1d6      	bne.n	800505e <_svfiprintf_r+0x176>
 80050b0:	89ab      	ldrh	r3, [r5, #12]
 80050b2:	065b      	lsls	r3, r3, #25
 80050b4:	f53f af2c 	bmi.w	8004f10 <_svfiprintf_r+0x28>
 80050b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ba:	b01d      	add	sp, #116	; 0x74
 80050bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c0:	ab03      	add	r3, sp, #12
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	462a      	mov	r2, r5
 80050c6:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <_svfiprintf_r+0x1f8>)
 80050c8:	a904      	add	r1, sp, #16
 80050ca:	4638      	mov	r0, r7
 80050cc:	f000 f9d4 	bl	8005478 <_printf_i>
 80050d0:	e7eb      	b.n	80050aa <_svfiprintf_r+0x1c2>
 80050d2:	bf00      	nop
 80050d4:	08005b14 	.word	0x08005b14
 80050d8:	08005b1e 	.word	0x08005b1e
 80050dc:	00000000 	.word	0x00000000
 80050e0:	08004e31 	.word	0x08004e31
 80050e4:	08005b1a 	.word	0x08005b1a

080050e8 <__sfputc_r>:
 80050e8:	6893      	ldr	r3, [r2, #8]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	b410      	push	{r4}
 80050f0:	6093      	str	r3, [r2, #8]
 80050f2:	da08      	bge.n	8005106 <__sfputc_r+0x1e>
 80050f4:	6994      	ldr	r4, [r2, #24]
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	db01      	blt.n	80050fe <__sfputc_r+0x16>
 80050fa:	290a      	cmp	r1, #10
 80050fc:	d103      	bne.n	8005106 <__sfputc_r+0x1e>
 80050fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005102:	f7ff ba9d 	b.w	8004640 <__swbuf_r>
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	1c58      	adds	r0, r3, #1
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	7019      	strb	r1, [r3, #0]
 800510e:	4608      	mov	r0, r1
 8005110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005114:	4770      	bx	lr

08005116 <__sfputs_r>:
 8005116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005118:	4606      	mov	r6, r0
 800511a:	460f      	mov	r7, r1
 800511c:	4614      	mov	r4, r2
 800511e:	18d5      	adds	r5, r2, r3
 8005120:	42ac      	cmp	r4, r5
 8005122:	d101      	bne.n	8005128 <__sfputs_r+0x12>
 8005124:	2000      	movs	r0, #0
 8005126:	e007      	b.n	8005138 <__sfputs_r+0x22>
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	463a      	mov	r2, r7
 800512e:	4630      	mov	r0, r6
 8005130:	f7ff ffda 	bl	80050e8 <__sfputc_r>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d1f3      	bne.n	8005120 <__sfputs_r+0xa>
 8005138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800513c <_vfiprintf_r>:
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	460d      	mov	r5, r1
 8005142:	b09d      	sub	sp, #116	; 0x74
 8005144:	4614      	mov	r4, r2
 8005146:	4698      	mov	r8, r3
 8005148:	4606      	mov	r6, r0
 800514a:	b118      	cbz	r0, 8005154 <_vfiprintf_r+0x18>
 800514c:	6983      	ldr	r3, [r0, #24]
 800514e:	b90b      	cbnz	r3, 8005154 <_vfiprintf_r+0x18>
 8005150:	f7ff fc6e 	bl	8004a30 <__sinit>
 8005154:	4b89      	ldr	r3, [pc, #548]	; (800537c <_vfiprintf_r+0x240>)
 8005156:	429d      	cmp	r5, r3
 8005158:	d11b      	bne.n	8005192 <_vfiprintf_r+0x56>
 800515a:	6875      	ldr	r5, [r6, #4]
 800515c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800515e:	07d9      	lsls	r1, r3, #31
 8005160:	d405      	bmi.n	800516e <_vfiprintf_r+0x32>
 8005162:	89ab      	ldrh	r3, [r5, #12]
 8005164:	059a      	lsls	r2, r3, #22
 8005166:	d402      	bmi.n	800516e <_vfiprintf_r+0x32>
 8005168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800516a:	f7ff fd11 	bl	8004b90 <__retarget_lock_acquire_recursive>
 800516e:	89ab      	ldrh	r3, [r5, #12]
 8005170:	071b      	lsls	r3, r3, #28
 8005172:	d501      	bpl.n	8005178 <_vfiprintf_r+0x3c>
 8005174:	692b      	ldr	r3, [r5, #16]
 8005176:	b9eb      	cbnz	r3, 80051b4 <_vfiprintf_r+0x78>
 8005178:	4629      	mov	r1, r5
 800517a:	4630      	mov	r0, r6
 800517c:	f7ff fab2 	bl	80046e4 <__swsetup_r>
 8005180:	b1c0      	cbz	r0, 80051b4 <_vfiprintf_r+0x78>
 8005182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005184:	07dc      	lsls	r4, r3, #31
 8005186:	d50e      	bpl.n	80051a6 <_vfiprintf_r+0x6a>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	b01d      	add	sp, #116	; 0x74
 800518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005192:	4b7b      	ldr	r3, [pc, #492]	; (8005380 <_vfiprintf_r+0x244>)
 8005194:	429d      	cmp	r5, r3
 8005196:	d101      	bne.n	800519c <_vfiprintf_r+0x60>
 8005198:	68b5      	ldr	r5, [r6, #8]
 800519a:	e7df      	b.n	800515c <_vfiprintf_r+0x20>
 800519c:	4b79      	ldr	r3, [pc, #484]	; (8005384 <_vfiprintf_r+0x248>)
 800519e:	429d      	cmp	r5, r3
 80051a0:	bf08      	it	eq
 80051a2:	68f5      	ldreq	r5, [r6, #12]
 80051a4:	e7da      	b.n	800515c <_vfiprintf_r+0x20>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	0598      	lsls	r0, r3, #22
 80051aa:	d4ed      	bmi.n	8005188 <_vfiprintf_r+0x4c>
 80051ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ae:	f7ff fcf0 	bl	8004b92 <__retarget_lock_release_recursive>
 80051b2:	e7e9      	b.n	8005188 <_vfiprintf_r+0x4c>
 80051b4:	2300      	movs	r3, #0
 80051b6:	9309      	str	r3, [sp, #36]	; 0x24
 80051b8:	2320      	movs	r3, #32
 80051ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051be:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c2:	2330      	movs	r3, #48	; 0x30
 80051c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005388 <_vfiprintf_r+0x24c>
 80051c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051cc:	f04f 0901 	mov.w	r9, #1
 80051d0:	4623      	mov	r3, r4
 80051d2:	469a      	mov	sl, r3
 80051d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051d8:	b10a      	cbz	r2, 80051de <_vfiprintf_r+0xa2>
 80051da:	2a25      	cmp	r2, #37	; 0x25
 80051dc:	d1f9      	bne.n	80051d2 <_vfiprintf_r+0x96>
 80051de:	ebba 0b04 	subs.w	fp, sl, r4
 80051e2:	d00b      	beq.n	80051fc <_vfiprintf_r+0xc0>
 80051e4:	465b      	mov	r3, fp
 80051e6:	4622      	mov	r2, r4
 80051e8:	4629      	mov	r1, r5
 80051ea:	4630      	mov	r0, r6
 80051ec:	f7ff ff93 	bl	8005116 <__sfputs_r>
 80051f0:	3001      	adds	r0, #1
 80051f2:	f000 80aa 	beq.w	800534a <_vfiprintf_r+0x20e>
 80051f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f8:	445a      	add	r2, fp
 80051fa:	9209      	str	r2, [sp, #36]	; 0x24
 80051fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80a2 	beq.w	800534a <_vfiprintf_r+0x20e>
 8005206:	2300      	movs	r3, #0
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005210:	f10a 0a01 	add.w	sl, sl, #1
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	9307      	str	r3, [sp, #28]
 8005218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800521c:	931a      	str	r3, [sp, #104]	; 0x68
 800521e:	4654      	mov	r4, sl
 8005220:	2205      	movs	r2, #5
 8005222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005226:	4858      	ldr	r0, [pc, #352]	; (8005388 <_vfiprintf_r+0x24c>)
 8005228:	f7fa ffea 	bl	8000200 <memchr>
 800522c:	9a04      	ldr	r2, [sp, #16]
 800522e:	b9d8      	cbnz	r0, 8005268 <_vfiprintf_r+0x12c>
 8005230:	06d1      	lsls	r1, r2, #27
 8005232:	bf44      	itt	mi
 8005234:	2320      	movmi	r3, #32
 8005236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800523a:	0713      	lsls	r3, r2, #28
 800523c:	bf44      	itt	mi
 800523e:	232b      	movmi	r3, #43	; 0x2b
 8005240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005244:	f89a 3000 	ldrb.w	r3, [sl]
 8005248:	2b2a      	cmp	r3, #42	; 0x2a
 800524a:	d015      	beq.n	8005278 <_vfiprintf_r+0x13c>
 800524c:	9a07      	ldr	r2, [sp, #28]
 800524e:	4654      	mov	r4, sl
 8005250:	2000      	movs	r0, #0
 8005252:	f04f 0c0a 	mov.w	ip, #10
 8005256:	4621      	mov	r1, r4
 8005258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525c:	3b30      	subs	r3, #48	; 0x30
 800525e:	2b09      	cmp	r3, #9
 8005260:	d94e      	bls.n	8005300 <_vfiprintf_r+0x1c4>
 8005262:	b1b0      	cbz	r0, 8005292 <_vfiprintf_r+0x156>
 8005264:	9207      	str	r2, [sp, #28]
 8005266:	e014      	b.n	8005292 <_vfiprintf_r+0x156>
 8005268:	eba0 0308 	sub.w	r3, r0, r8
 800526c:	fa09 f303 	lsl.w	r3, r9, r3
 8005270:	4313      	orrs	r3, r2
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	46a2      	mov	sl, r4
 8005276:	e7d2      	b.n	800521e <_vfiprintf_r+0xe2>
 8005278:	9b03      	ldr	r3, [sp, #12]
 800527a:	1d19      	adds	r1, r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	9103      	str	r1, [sp, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	bfbb      	ittet	lt
 8005284:	425b      	neglt	r3, r3
 8005286:	f042 0202 	orrlt.w	r2, r2, #2
 800528a:	9307      	strge	r3, [sp, #28]
 800528c:	9307      	strlt	r3, [sp, #28]
 800528e:	bfb8      	it	lt
 8005290:	9204      	strlt	r2, [sp, #16]
 8005292:	7823      	ldrb	r3, [r4, #0]
 8005294:	2b2e      	cmp	r3, #46	; 0x2e
 8005296:	d10c      	bne.n	80052b2 <_vfiprintf_r+0x176>
 8005298:	7863      	ldrb	r3, [r4, #1]
 800529a:	2b2a      	cmp	r3, #42	; 0x2a
 800529c:	d135      	bne.n	800530a <_vfiprintf_r+0x1ce>
 800529e:	9b03      	ldr	r3, [sp, #12]
 80052a0:	1d1a      	adds	r2, r3, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	9203      	str	r2, [sp, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfb8      	it	lt
 80052aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80052ae:	3402      	adds	r4, #2
 80052b0:	9305      	str	r3, [sp, #20]
 80052b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005398 <_vfiprintf_r+0x25c>
 80052b6:	7821      	ldrb	r1, [r4, #0]
 80052b8:	2203      	movs	r2, #3
 80052ba:	4650      	mov	r0, sl
 80052bc:	f7fa ffa0 	bl	8000200 <memchr>
 80052c0:	b140      	cbz	r0, 80052d4 <_vfiprintf_r+0x198>
 80052c2:	2340      	movs	r3, #64	; 0x40
 80052c4:	eba0 000a 	sub.w	r0, r0, sl
 80052c8:	fa03 f000 	lsl.w	r0, r3, r0
 80052cc:	9b04      	ldr	r3, [sp, #16]
 80052ce:	4303      	orrs	r3, r0
 80052d0:	3401      	adds	r4, #1
 80052d2:	9304      	str	r3, [sp, #16]
 80052d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d8:	482c      	ldr	r0, [pc, #176]	; (800538c <_vfiprintf_r+0x250>)
 80052da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052de:	2206      	movs	r2, #6
 80052e0:	f7fa ff8e 	bl	8000200 <memchr>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d03f      	beq.n	8005368 <_vfiprintf_r+0x22c>
 80052e8:	4b29      	ldr	r3, [pc, #164]	; (8005390 <_vfiprintf_r+0x254>)
 80052ea:	bb1b      	cbnz	r3, 8005334 <_vfiprintf_r+0x1f8>
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	3307      	adds	r3, #7
 80052f0:	f023 0307 	bic.w	r3, r3, #7
 80052f4:	3308      	adds	r3, #8
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fa:	443b      	add	r3, r7
 80052fc:	9309      	str	r3, [sp, #36]	; 0x24
 80052fe:	e767      	b.n	80051d0 <_vfiprintf_r+0x94>
 8005300:	fb0c 3202 	mla	r2, ip, r2, r3
 8005304:	460c      	mov	r4, r1
 8005306:	2001      	movs	r0, #1
 8005308:	e7a5      	b.n	8005256 <_vfiprintf_r+0x11a>
 800530a:	2300      	movs	r3, #0
 800530c:	3401      	adds	r4, #1
 800530e:	9305      	str	r3, [sp, #20]
 8005310:	4619      	mov	r1, r3
 8005312:	f04f 0c0a 	mov.w	ip, #10
 8005316:	4620      	mov	r0, r4
 8005318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800531c:	3a30      	subs	r2, #48	; 0x30
 800531e:	2a09      	cmp	r2, #9
 8005320:	d903      	bls.n	800532a <_vfiprintf_r+0x1ee>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0c5      	beq.n	80052b2 <_vfiprintf_r+0x176>
 8005326:	9105      	str	r1, [sp, #20]
 8005328:	e7c3      	b.n	80052b2 <_vfiprintf_r+0x176>
 800532a:	fb0c 2101 	mla	r1, ip, r1, r2
 800532e:	4604      	mov	r4, r0
 8005330:	2301      	movs	r3, #1
 8005332:	e7f0      	b.n	8005316 <_vfiprintf_r+0x1da>
 8005334:	ab03      	add	r3, sp, #12
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	462a      	mov	r2, r5
 800533a:	4b16      	ldr	r3, [pc, #88]	; (8005394 <_vfiprintf_r+0x258>)
 800533c:	a904      	add	r1, sp, #16
 800533e:	4630      	mov	r0, r6
 8005340:	f3af 8000 	nop.w
 8005344:	4607      	mov	r7, r0
 8005346:	1c78      	adds	r0, r7, #1
 8005348:	d1d6      	bne.n	80052f8 <_vfiprintf_r+0x1bc>
 800534a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800534c:	07d9      	lsls	r1, r3, #31
 800534e:	d405      	bmi.n	800535c <_vfiprintf_r+0x220>
 8005350:	89ab      	ldrh	r3, [r5, #12]
 8005352:	059a      	lsls	r2, r3, #22
 8005354:	d402      	bmi.n	800535c <_vfiprintf_r+0x220>
 8005356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005358:	f7ff fc1b 	bl	8004b92 <__retarget_lock_release_recursive>
 800535c:	89ab      	ldrh	r3, [r5, #12]
 800535e:	065b      	lsls	r3, r3, #25
 8005360:	f53f af12 	bmi.w	8005188 <_vfiprintf_r+0x4c>
 8005364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005366:	e711      	b.n	800518c <_vfiprintf_r+0x50>
 8005368:	ab03      	add	r3, sp, #12
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	462a      	mov	r2, r5
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <_vfiprintf_r+0x258>)
 8005370:	a904      	add	r1, sp, #16
 8005372:	4630      	mov	r0, r6
 8005374:	f000 f880 	bl	8005478 <_printf_i>
 8005378:	e7e4      	b.n	8005344 <_vfiprintf_r+0x208>
 800537a:	bf00      	nop
 800537c:	08005ad4 	.word	0x08005ad4
 8005380:	08005af4 	.word	0x08005af4
 8005384:	08005ab4 	.word	0x08005ab4
 8005388:	08005b14 	.word	0x08005b14
 800538c:	08005b1e 	.word	0x08005b1e
 8005390:	00000000 	.word	0x00000000
 8005394:	08005117 	.word	0x08005117
 8005398:	08005b1a 	.word	0x08005b1a

0800539c <_printf_common>:
 800539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	4616      	mov	r6, r2
 80053a2:	4699      	mov	r9, r3
 80053a4:	688a      	ldr	r2, [r1, #8]
 80053a6:	690b      	ldr	r3, [r1, #16]
 80053a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053ac:	4293      	cmp	r3, r2
 80053ae:	bfb8      	it	lt
 80053b0:	4613      	movlt	r3, r2
 80053b2:	6033      	str	r3, [r6, #0]
 80053b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b8:	4607      	mov	r7, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	b10a      	cbz	r2, 80053c2 <_printf_common+0x26>
 80053be:	3301      	adds	r3, #1
 80053c0:	6033      	str	r3, [r6, #0]
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	0699      	lsls	r1, r3, #26
 80053c6:	bf42      	ittt	mi
 80053c8:	6833      	ldrmi	r3, [r6, #0]
 80053ca:	3302      	addmi	r3, #2
 80053cc:	6033      	strmi	r3, [r6, #0]
 80053ce:	6825      	ldr	r5, [r4, #0]
 80053d0:	f015 0506 	ands.w	r5, r5, #6
 80053d4:	d106      	bne.n	80053e4 <_printf_common+0x48>
 80053d6:	f104 0a19 	add.w	sl, r4, #25
 80053da:	68e3      	ldr	r3, [r4, #12]
 80053dc:	6832      	ldr	r2, [r6, #0]
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	42ab      	cmp	r3, r5
 80053e2:	dc26      	bgt.n	8005432 <_printf_common+0x96>
 80053e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e8:	1e13      	subs	r3, r2, #0
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	bf18      	it	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	0692      	lsls	r2, r2, #26
 80053f2:	d42b      	bmi.n	800544c <_printf_common+0xb0>
 80053f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f8:	4649      	mov	r1, r9
 80053fa:	4638      	mov	r0, r7
 80053fc:	47c0      	blx	r8
 80053fe:	3001      	adds	r0, #1
 8005400:	d01e      	beq.n	8005440 <_printf_common+0xa4>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	68e5      	ldr	r5, [r4, #12]
 8005406:	6832      	ldr	r2, [r6, #0]
 8005408:	f003 0306 	and.w	r3, r3, #6
 800540c:	2b04      	cmp	r3, #4
 800540e:	bf08      	it	eq
 8005410:	1aad      	subeq	r5, r5, r2
 8005412:	68a3      	ldr	r3, [r4, #8]
 8005414:	6922      	ldr	r2, [r4, #16]
 8005416:	bf0c      	ite	eq
 8005418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800541c:	2500      	movne	r5, #0
 800541e:	4293      	cmp	r3, r2
 8005420:	bfc4      	itt	gt
 8005422:	1a9b      	subgt	r3, r3, r2
 8005424:	18ed      	addgt	r5, r5, r3
 8005426:	2600      	movs	r6, #0
 8005428:	341a      	adds	r4, #26
 800542a:	42b5      	cmp	r5, r6
 800542c:	d11a      	bne.n	8005464 <_printf_common+0xc8>
 800542e:	2000      	movs	r0, #0
 8005430:	e008      	b.n	8005444 <_printf_common+0xa8>
 8005432:	2301      	movs	r3, #1
 8005434:	4652      	mov	r2, sl
 8005436:	4649      	mov	r1, r9
 8005438:	4638      	mov	r0, r7
 800543a:	47c0      	blx	r8
 800543c:	3001      	adds	r0, #1
 800543e:	d103      	bne.n	8005448 <_printf_common+0xac>
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005448:	3501      	adds	r5, #1
 800544a:	e7c6      	b.n	80053da <_printf_common+0x3e>
 800544c:	18e1      	adds	r1, r4, r3
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	2030      	movs	r0, #48	; 0x30
 8005452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005456:	4422      	add	r2, r4
 8005458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800545c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005460:	3302      	adds	r3, #2
 8005462:	e7c7      	b.n	80053f4 <_printf_common+0x58>
 8005464:	2301      	movs	r3, #1
 8005466:	4622      	mov	r2, r4
 8005468:	4649      	mov	r1, r9
 800546a:	4638      	mov	r0, r7
 800546c:	47c0      	blx	r8
 800546e:	3001      	adds	r0, #1
 8005470:	d0e6      	beq.n	8005440 <_printf_common+0xa4>
 8005472:	3601      	adds	r6, #1
 8005474:	e7d9      	b.n	800542a <_printf_common+0x8e>
	...

08005478 <_printf_i>:
 8005478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	7e0f      	ldrb	r7, [r1, #24]
 800547e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005480:	2f78      	cmp	r7, #120	; 0x78
 8005482:	4691      	mov	r9, r2
 8005484:	4680      	mov	r8, r0
 8005486:	460c      	mov	r4, r1
 8005488:	469a      	mov	sl, r3
 800548a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800548e:	d807      	bhi.n	80054a0 <_printf_i+0x28>
 8005490:	2f62      	cmp	r7, #98	; 0x62
 8005492:	d80a      	bhi.n	80054aa <_printf_i+0x32>
 8005494:	2f00      	cmp	r7, #0
 8005496:	f000 80d8 	beq.w	800564a <_printf_i+0x1d2>
 800549a:	2f58      	cmp	r7, #88	; 0x58
 800549c:	f000 80a3 	beq.w	80055e6 <_printf_i+0x16e>
 80054a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a8:	e03a      	b.n	8005520 <_printf_i+0xa8>
 80054aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ae:	2b15      	cmp	r3, #21
 80054b0:	d8f6      	bhi.n	80054a0 <_printf_i+0x28>
 80054b2:	a101      	add	r1, pc, #4	; (adr r1, 80054b8 <_printf_i+0x40>)
 80054b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b8:	08005511 	.word	0x08005511
 80054bc:	08005525 	.word	0x08005525
 80054c0:	080054a1 	.word	0x080054a1
 80054c4:	080054a1 	.word	0x080054a1
 80054c8:	080054a1 	.word	0x080054a1
 80054cc:	080054a1 	.word	0x080054a1
 80054d0:	08005525 	.word	0x08005525
 80054d4:	080054a1 	.word	0x080054a1
 80054d8:	080054a1 	.word	0x080054a1
 80054dc:	080054a1 	.word	0x080054a1
 80054e0:	080054a1 	.word	0x080054a1
 80054e4:	08005631 	.word	0x08005631
 80054e8:	08005555 	.word	0x08005555
 80054ec:	08005613 	.word	0x08005613
 80054f0:	080054a1 	.word	0x080054a1
 80054f4:	080054a1 	.word	0x080054a1
 80054f8:	08005653 	.word	0x08005653
 80054fc:	080054a1 	.word	0x080054a1
 8005500:	08005555 	.word	0x08005555
 8005504:	080054a1 	.word	0x080054a1
 8005508:	080054a1 	.word	0x080054a1
 800550c:	0800561b 	.word	0x0800561b
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	1d1a      	adds	r2, r3, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	602a      	str	r2, [r5, #0]
 8005518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800551c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005520:	2301      	movs	r3, #1
 8005522:	e0a3      	b.n	800566c <_printf_i+0x1f4>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	6829      	ldr	r1, [r5, #0]
 8005528:	0606      	lsls	r6, r0, #24
 800552a:	f101 0304 	add.w	r3, r1, #4
 800552e:	d50a      	bpl.n	8005546 <_printf_i+0xce>
 8005530:	680e      	ldr	r6, [r1, #0]
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	2e00      	cmp	r6, #0
 8005536:	da03      	bge.n	8005540 <_printf_i+0xc8>
 8005538:	232d      	movs	r3, #45	; 0x2d
 800553a:	4276      	negs	r6, r6
 800553c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005540:	485e      	ldr	r0, [pc, #376]	; (80056bc <_printf_i+0x244>)
 8005542:	230a      	movs	r3, #10
 8005544:	e019      	b.n	800557a <_printf_i+0x102>
 8005546:	680e      	ldr	r6, [r1, #0]
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800554e:	bf18      	it	ne
 8005550:	b236      	sxthne	r6, r6
 8005552:	e7ef      	b.n	8005534 <_printf_i+0xbc>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	1d19      	adds	r1, r3, #4
 800555a:	6029      	str	r1, [r5, #0]
 800555c:	0601      	lsls	r1, r0, #24
 800555e:	d501      	bpl.n	8005564 <_printf_i+0xec>
 8005560:	681e      	ldr	r6, [r3, #0]
 8005562:	e002      	b.n	800556a <_printf_i+0xf2>
 8005564:	0646      	lsls	r6, r0, #25
 8005566:	d5fb      	bpl.n	8005560 <_printf_i+0xe8>
 8005568:	881e      	ldrh	r6, [r3, #0]
 800556a:	4854      	ldr	r0, [pc, #336]	; (80056bc <_printf_i+0x244>)
 800556c:	2f6f      	cmp	r7, #111	; 0x6f
 800556e:	bf0c      	ite	eq
 8005570:	2308      	moveq	r3, #8
 8005572:	230a      	movne	r3, #10
 8005574:	2100      	movs	r1, #0
 8005576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800557a:	6865      	ldr	r5, [r4, #4]
 800557c:	60a5      	str	r5, [r4, #8]
 800557e:	2d00      	cmp	r5, #0
 8005580:	bfa2      	ittt	ge
 8005582:	6821      	ldrge	r1, [r4, #0]
 8005584:	f021 0104 	bicge.w	r1, r1, #4
 8005588:	6021      	strge	r1, [r4, #0]
 800558a:	b90e      	cbnz	r6, 8005590 <_printf_i+0x118>
 800558c:	2d00      	cmp	r5, #0
 800558e:	d04d      	beq.n	800562c <_printf_i+0x1b4>
 8005590:	4615      	mov	r5, r2
 8005592:	fbb6 f1f3 	udiv	r1, r6, r3
 8005596:	fb03 6711 	mls	r7, r3, r1, r6
 800559a:	5dc7      	ldrb	r7, [r0, r7]
 800559c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055a0:	4637      	mov	r7, r6
 80055a2:	42bb      	cmp	r3, r7
 80055a4:	460e      	mov	r6, r1
 80055a6:	d9f4      	bls.n	8005592 <_printf_i+0x11a>
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d10b      	bne.n	80055c4 <_printf_i+0x14c>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	07de      	lsls	r6, r3, #31
 80055b0:	d508      	bpl.n	80055c4 <_printf_i+0x14c>
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	6861      	ldr	r1, [r4, #4]
 80055b6:	4299      	cmp	r1, r3
 80055b8:	bfde      	ittt	le
 80055ba:	2330      	movle	r3, #48	; 0x30
 80055bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055c4:	1b52      	subs	r2, r2, r5
 80055c6:	6122      	str	r2, [r4, #16]
 80055c8:	f8cd a000 	str.w	sl, [sp]
 80055cc:	464b      	mov	r3, r9
 80055ce:	aa03      	add	r2, sp, #12
 80055d0:	4621      	mov	r1, r4
 80055d2:	4640      	mov	r0, r8
 80055d4:	f7ff fee2 	bl	800539c <_printf_common>
 80055d8:	3001      	adds	r0, #1
 80055da:	d14c      	bne.n	8005676 <_printf_i+0x1fe>
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	b004      	add	sp, #16
 80055e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e6:	4835      	ldr	r0, [pc, #212]	; (80056bc <_printf_i+0x244>)
 80055e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055ec:	6829      	ldr	r1, [r5, #0]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80055f4:	6029      	str	r1, [r5, #0]
 80055f6:	061d      	lsls	r5, r3, #24
 80055f8:	d514      	bpl.n	8005624 <_printf_i+0x1ac>
 80055fa:	07df      	lsls	r7, r3, #31
 80055fc:	bf44      	itt	mi
 80055fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005602:	6023      	strmi	r3, [r4, #0]
 8005604:	b91e      	cbnz	r6, 800560e <_printf_i+0x196>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	f023 0320 	bic.w	r3, r3, #32
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	2310      	movs	r3, #16
 8005610:	e7b0      	b.n	8005574 <_printf_i+0xfc>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	f043 0320 	orr.w	r3, r3, #32
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	2378      	movs	r3, #120	; 0x78
 800561c:	4828      	ldr	r0, [pc, #160]	; (80056c0 <_printf_i+0x248>)
 800561e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005622:	e7e3      	b.n	80055ec <_printf_i+0x174>
 8005624:	0659      	lsls	r1, r3, #25
 8005626:	bf48      	it	mi
 8005628:	b2b6      	uxthmi	r6, r6
 800562a:	e7e6      	b.n	80055fa <_printf_i+0x182>
 800562c:	4615      	mov	r5, r2
 800562e:	e7bb      	b.n	80055a8 <_printf_i+0x130>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	6826      	ldr	r6, [r4, #0]
 8005634:	6961      	ldr	r1, [r4, #20]
 8005636:	1d18      	adds	r0, r3, #4
 8005638:	6028      	str	r0, [r5, #0]
 800563a:	0635      	lsls	r5, r6, #24
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	d501      	bpl.n	8005644 <_printf_i+0x1cc>
 8005640:	6019      	str	r1, [r3, #0]
 8005642:	e002      	b.n	800564a <_printf_i+0x1d2>
 8005644:	0670      	lsls	r0, r6, #25
 8005646:	d5fb      	bpl.n	8005640 <_printf_i+0x1c8>
 8005648:	8019      	strh	r1, [r3, #0]
 800564a:	2300      	movs	r3, #0
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	4615      	mov	r5, r2
 8005650:	e7ba      	b.n	80055c8 <_printf_i+0x150>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	1d1a      	adds	r2, r3, #4
 8005656:	602a      	str	r2, [r5, #0]
 8005658:	681d      	ldr	r5, [r3, #0]
 800565a:	6862      	ldr	r2, [r4, #4]
 800565c:	2100      	movs	r1, #0
 800565e:	4628      	mov	r0, r5
 8005660:	f7fa fdce 	bl	8000200 <memchr>
 8005664:	b108      	cbz	r0, 800566a <_printf_i+0x1f2>
 8005666:	1b40      	subs	r0, r0, r5
 8005668:	6060      	str	r0, [r4, #4]
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	2300      	movs	r3, #0
 8005670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005674:	e7a8      	b.n	80055c8 <_printf_i+0x150>
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	462a      	mov	r2, r5
 800567a:	4649      	mov	r1, r9
 800567c:	4640      	mov	r0, r8
 800567e:	47d0      	blx	sl
 8005680:	3001      	adds	r0, #1
 8005682:	d0ab      	beq.n	80055dc <_printf_i+0x164>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	079b      	lsls	r3, r3, #30
 8005688:	d413      	bmi.n	80056b2 <_printf_i+0x23a>
 800568a:	68e0      	ldr	r0, [r4, #12]
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	4298      	cmp	r0, r3
 8005690:	bfb8      	it	lt
 8005692:	4618      	movlt	r0, r3
 8005694:	e7a4      	b.n	80055e0 <_printf_i+0x168>
 8005696:	2301      	movs	r3, #1
 8005698:	4632      	mov	r2, r6
 800569a:	4649      	mov	r1, r9
 800569c:	4640      	mov	r0, r8
 800569e:	47d0      	blx	sl
 80056a0:	3001      	adds	r0, #1
 80056a2:	d09b      	beq.n	80055dc <_printf_i+0x164>
 80056a4:	3501      	adds	r5, #1
 80056a6:	68e3      	ldr	r3, [r4, #12]
 80056a8:	9903      	ldr	r1, [sp, #12]
 80056aa:	1a5b      	subs	r3, r3, r1
 80056ac:	42ab      	cmp	r3, r5
 80056ae:	dcf2      	bgt.n	8005696 <_printf_i+0x21e>
 80056b0:	e7eb      	b.n	800568a <_printf_i+0x212>
 80056b2:	2500      	movs	r5, #0
 80056b4:	f104 0619 	add.w	r6, r4, #25
 80056b8:	e7f5      	b.n	80056a6 <_printf_i+0x22e>
 80056ba:	bf00      	nop
 80056bc:	08005b25 	.word	0x08005b25
 80056c0:	08005b36 	.word	0x08005b36

080056c4 <_sbrk_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4d06      	ldr	r5, [pc, #24]	; (80056e0 <_sbrk_r+0x1c>)
 80056c8:	2300      	movs	r3, #0
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	f7fb ff62 	bl	8001598 <_sbrk>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_sbrk_r+0x1a>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b103      	cbz	r3, 80056de <_sbrk_r+0x1a>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	2000086c 	.word	0x2000086c

080056e4 <__sread>:
 80056e4:	b510      	push	{r4, lr}
 80056e6:	460c      	mov	r4, r1
 80056e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ec:	f000 f900 	bl	80058f0 <_read_r>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	bfab      	itete	ge
 80056f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056f6:	89a3      	ldrhlt	r3, [r4, #12]
 80056f8:	181b      	addge	r3, r3, r0
 80056fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056fe:	bfac      	ite	ge
 8005700:	6563      	strge	r3, [r4, #84]	; 0x54
 8005702:	81a3      	strhlt	r3, [r4, #12]
 8005704:	bd10      	pop	{r4, pc}

08005706 <__swrite>:
 8005706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570a:	461f      	mov	r7, r3
 800570c:	898b      	ldrh	r3, [r1, #12]
 800570e:	05db      	lsls	r3, r3, #23
 8005710:	4605      	mov	r5, r0
 8005712:	460c      	mov	r4, r1
 8005714:	4616      	mov	r6, r2
 8005716:	d505      	bpl.n	8005724 <__swrite+0x1e>
 8005718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800571c:	2302      	movs	r3, #2
 800571e:	2200      	movs	r2, #0
 8005720:	f000 f870 	bl	8005804 <_lseek_r>
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800572a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800572e:	81a3      	strh	r3, [r4, #12]
 8005730:	4632      	mov	r2, r6
 8005732:	463b      	mov	r3, r7
 8005734:	4628      	mov	r0, r5
 8005736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800573a:	f000 b817 	b.w	800576c <_write_r>

0800573e <__sseek>:
 800573e:	b510      	push	{r4, lr}
 8005740:	460c      	mov	r4, r1
 8005742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005746:	f000 f85d 	bl	8005804 <_lseek_r>
 800574a:	1c43      	adds	r3, r0, #1
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	bf15      	itete	ne
 8005750:	6560      	strne	r0, [r4, #84]	; 0x54
 8005752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800575a:	81a3      	strheq	r3, [r4, #12]
 800575c:	bf18      	it	ne
 800575e:	81a3      	strhne	r3, [r4, #12]
 8005760:	bd10      	pop	{r4, pc}

08005762 <__sclose>:
 8005762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005766:	f000 b81b 	b.w	80057a0 <_close_r>
	...

0800576c <_write_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d07      	ldr	r5, [pc, #28]	; (800578c <_write_r+0x20>)
 8005770:	4604      	mov	r4, r0
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	2200      	movs	r2, #0
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fa ff12 	bl	80005a4 <_write>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_write_r+0x1e>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_write_r+0x1e>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	2000086c 	.word	0x2000086c

08005790 <abort>:
 8005790:	b508      	push	{r3, lr}
 8005792:	2006      	movs	r0, #6
 8005794:	f000 f8e6 	bl	8005964 <raise>
 8005798:	2001      	movs	r0, #1
 800579a:	f7fb fea1 	bl	80014e0 <_exit>
	...

080057a0 <_close_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d06      	ldr	r5, [pc, #24]	; (80057bc <_close_r+0x1c>)
 80057a4:	2300      	movs	r3, #0
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	602b      	str	r3, [r5, #0]
 80057ac:	f7fb febf 	bl	800152e <_close>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d102      	bne.n	80057ba <_close_r+0x1a>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	b103      	cbz	r3, 80057ba <_close_r+0x1a>
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	2000086c 	.word	0x2000086c

080057c0 <_fstat_r>:
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4d07      	ldr	r5, [pc, #28]	; (80057e0 <_fstat_r+0x20>)
 80057c4:	2300      	movs	r3, #0
 80057c6:	4604      	mov	r4, r0
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	f7fb feba 	bl	8001546 <_fstat>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	d102      	bne.n	80057dc <_fstat_r+0x1c>
 80057d6:	682b      	ldr	r3, [r5, #0]
 80057d8:	b103      	cbz	r3, 80057dc <_fstat_r+0x1c>
 80057da:	6023      	str	r3, [r4, #0]
 80057dc:	bd38      	pop	{r3, r4, r5, pc}
 80057de:	bf00      	nop
 80057e0:	2000086c 	.word	0x2000086c

080057e4 <_isatty_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4d06      	ldr	r5, [pc, #24]	; (8005800 <_isatty_r+0x1c>)
 80057e8:	2300      	movs	r3, #0
 80057ea:	4604      	mov	r4, r0
 80057ec:	4608      	mov	r0, r1
 80057ee:	602b      	str	r3, [r5, #0]
 80057f0:	f7fb feb9 	bl	8001566 <_isatty>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_isatty_r+0x1a>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_isatty_r+0x1a>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	2000086c 	.word	0x2000086c

08005804 <_lseek_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d07      	ldr	r5, [pc, #28]	; (8005824 <_lseek_r+0x20>)
 8005808:	4604      	mov	r4, r0
 800580a:	4608      	mov	r0, r1
 800580c:	4611      	mov	r1, r2
 800580e:	2200      	movs	r2, #0
 8005810:	602a      	str	r2, [r5, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	f7fb feb2 	bl	800157c <_lseek>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_lseek_r+0x1e>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_lseek_r+0x1e>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	2000086c 	.word	0x2000086c

08005828 <memcpy>:
 8005828:	440a      	add	r2, r1
 800582a:	4291      	cmp	r1, r2
 800582c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005830:	d100      	bne.n	8005834 <memcpy+0xc>
 8005832:	4770      	bx	lr
 8005834:	b510      	push	{r4, lr}
 8005836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800583a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800583e:	4291      	cmp	r1, r2
 8005840:	d1f9      	bne.n	8005836 <memcpy+0xe>
 8005842:	bd10      	pop	{r4, pc}

08005844 <memmove>:
 8005844:	4288      	cmp	r0, r1
 8005846:	b510      	push	{r4, lr}
 8005848:	eb01 0402 	add.w	r4, r1, r2
 800584c:	d902      	bls.n	8005854 <memmove+0x10>
 800584e:	4284      	cmp	r4, r0
 8005850:	4623      	mov	r3, r4
 8005852:	d807      	bhi.n	8005864 <memmove+0x20>
 8005854:	1e43      	subs	r3, r0, #1
 8005856:	42a1      	cmp	r1, r4
 8005858:	d008      	beq.n	800586c <memmove+0x28>
 800585a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800585e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005862:	e7f8      	b.n	8005856 <memmove+0x12>
 8005864:	4402      	add	r2, r0
 8005866:	4601      	mov	r1, r0
 8005868:	428a      	cmp	r2, r1
 800586a:	d100      	bne.n	800586e <memmove+0x2a>
 800586c:	bd10      	pop	{r4, pc}
 800586e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005876:	e7f7      	b.n	8005868 <memmove+0x24>

08005878 <__malloc_lock>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__malloc_lock+0x8>)
 800587a:	f7ff b989 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 800587e:	bf00      	nop
 8005880:	20000860 	.word	0x20000860

08005884 <__malloc_unlock>:
 8005884:	4801      	ldr	r0, [pc, #4]	; (800588c <__malloc_unlock+0x8>)
 8005886:	f7ff b984 	b.w	8004b92 <__retarget_lock_release_recursive>
 800588a:	bf00      	nop
 800588c:	20000860 	.word	0x20000860

08005890 <_realloc_r>:
 8005890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005894:	4680      	mov	r8, r0
 8005896:	4614      	mov	r4, r2
 8005898:	460e      	mov	r6, r1
 800589a:	b921      	cbnz	r1, 80058a6 <_realloc_r+0x16>
 800589c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a0:	4611      	mov	r1, r2
 80058a2:	f7ff ba51 	b.w	8004d48 <_malloc_r>
 80058a6:	b92a      	cbnz	r2, 80058b4 <_realloc_r+0x24>
 80058a8:	f7ff f9e2 	bl	8004c70 <_free_r>
 80058ac:	4625      	mov	r5, r4
 80058ae:	4628      	mov	r0, r5
 80058b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b4:	f000 f872 	bl	800599c <_malloc_usable_size_r>
 80058b8:	4284      	cmp	r4, r0
 80058ba:	4607      	mov	r7, r0
 80058bc:	d802      	bhi.n	80058c4 <_realloc_r+0x34>
 80058be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058c2:	d812      	bhi.n	80058ea <_realloc_r+0x5a>
 80058c4:	4621      	mov	r1, r4
 80058c6:	4640      	mov	r0, r8
 80058c8:	f7ff fa3e 	bl	8004d48 <_malloc_r>
 80058cc:	4605      	mov	r5, r0
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d0ed      	beq.n	80058ae <_realloc_r+0x1e>
 80058d2:	42bc      	cmp	r4, r7
 80058d4:	4622      	mov	r2, r4
 80058d6:	4631      	mov	r1, r6
 80058d8:	bf28      	it	cs
 80058da:	463a      	movcs	r2, r7
 80058dc:	f7ff ffa4 	bl	8005828 <memcpy>
 80058e0:	4631      	mov	r1, r6
 80058e2:	4640      	mov	r0, r8
 80058e4:	f7ff f9c4 	bl	8004c70 <_free_r>
 80058e8:	e7e1      	b.n	80058ae <_realloc_r+0x1e>
 80058ea:	4635      	mov	r5, r6
 80058ec:	e7df      	b.n	80058ae <_realloc_r+0x1e>
	...

080058f0 <_read_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4d07      	ldr	r5, [pc, #28]	; (8005910 <_read_r+0x20>)
 80058f4:	4604      	mov	r4, r0
 80058f6:	4608      	mov	r0, r1
 80058f8:	4611      	mov	r1, r2
 80058fa:	2200      	movs	r2, #0
 80058fc:	602a      	str	r2, [r5, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	f7fb fdf8 	bl	80014f4 <_read>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_read_r+0x1e>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_read_r+0x1e>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	2000086c 	.word	0x2000086c

08005914 <_raise_r>:
 8005914:	291f      	cmp	r1, #31
 8005916:	b538      	push	{r3, r4, r5, lr}
 8005918:	4604      	mov	r4, r0
 800591a:	460d      	mov	r5, r1
 800591c:	d904      	bls.n	8005928 <_raise_r+0x14>
 800591e:	2316      	movs	r3, #22
 8005920:	6003      	str	r3, [r0, #0]
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800592a:	b112      	cbz	r2, 8005932 <_raise_r+0x1e>
 800592c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005930:	b94b      	cbnz	r3, 8005946 <_raise_r+0x32>
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f830 	bl	8005998 <_getpid_r>
 8005938:	462a      	mov	r2, r5
 800593a:	4601      	mov	r1, r0
 800593c:	4620      	mov	r0, r4
 800593e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005942:	f000 b817 	b.w	8005974 <_kill_r>
 8005946:	2b01      	cmp	r3, #1
 8005948:	d00a      	beq.n	8005960 <_raise_r+0x4c>
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	d103      	bne.n	8005956 <_raise_r+0x42>
 800594e:	2316      	movs	r3, #22
 8005950:	6003      	str	r3, [r0, #0]
 8005952:	2001      	movs	r0, #1
 8005954:	e7e7      	b.n	8005926 <_raise_r+0x12>
 8005956:	2400      	movs	r4, #0
 8005958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800595c:	4628      	mov	r0, r5
 800595e:	4798      	blx	r3
 8005960:	2000      	movs	r0, #0
 8005962:	e7e0      	b.n	8005926 <_raise_r+0x12>

08005964 <raise>:
 8005964:	4b02      	ldr	r3, [pc, #8]	; (8005970 <raise+0xc>)
 8005966:	4601      	mov	r1, r0
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	f7ff bfd3 	b.w	8005914 <_raise_r>
 800596e:	bf00      	nop
 8005970:	2000000c 	.word	0x2000000c

08005974 <_kill_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	; (8005994 <_kill_r+0x20>)
 8005978:	2300      	movs	r3, #0
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	4611      	mov	r1, r2
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	f7fb fd9d 	bl	80014c0 <_kill>
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	d102      	bne.n	8005990 <_kill_r+0x1c>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	b103      	cbz	r3, 8005990 <_kill_r+0x1c>
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	bd38      	pop	{r3, r4, r5, pc}
 8005992:	bf00      	nop
 8005994:	2000086c 	.word	0x2000086c

08005998 <_getpid_r>:
 8005998:	f7fb bd8a 	b.w	80014b0 <_getpid>

0800599c <_malloc_usable_size_r>:
 800599c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a0:	1f18      	subs	r0, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bfbc      	itt	lt
 80059a6:	580b      	ldrlt	r3, [r1, r0]
 80059a8:	18c0      	addlt	r0, r0, r3
 80059aa:	4770      	bx	lr

080059ac <_init>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	bf00      	nop
 80059b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b2:	bc08      	pop	{r3}
 80059b4:	469e      	mov	lr, r3
 80059b6:	4770      	bx	lr

080059b8 <_fini>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr
