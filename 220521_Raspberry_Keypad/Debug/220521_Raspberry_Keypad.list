
220521_Raspberry_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08007364  08007364  00017364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007690  08007690  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007698  08007698  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080076a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000854  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ebb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c2  00000000  00000000  00037f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003a920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  0003bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002651e  00000000  00000000  0003d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177a9  00000000  00000000  0006371e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e70aa  00000000  00000000  0007aec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161f71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000666c  00000000  00000000  00161fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800734c 	.word	0x0800734c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800734c 	.word	0x0800734c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f023 030f 	bic.w	r3, r3, #15
 80005b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	f043 030c 	orr.w	r3, r3, #12
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	f043 0308 	orr.w	r3, r3, #8
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	f043 030c 	orr.w	r3, r3, #12
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005e4:	f107 0208 	add.w	r2, r7, #8
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2304      	movs	r3, #4
 80005ee:	214e      	movs	r1, #78	; 0x4e
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <lcd_send_cmd+0x5c>)
 80005f2:	f002 fc29 	bl	8002e48 <HAL_I2C_Master_Transmit>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200002b4 	.word	0x200002b4

08000604 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af02      	add	r7, sp, #8
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f023 030f 	bic.w	r3, r3, #15
 8000614:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	f043 030d 	orr.w	r3, r3, #13
 8000622:	b2db      	uxtb	r3, r3
 8000624:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f043 0309 	orr.w	r3, r3, #9
 800062c:	b2db      	uxtb	r3, r3
 800062e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000630:	7bbb      	ldrb	r3, [r7, #14]
 8000632:	f043 030d 	orr.w	r3, r3, #13
 8000636:	b2db      	uxtb	r3, r3
 8000638:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	f043 0309 	orr.w	r3, r3, #9
 8000640:	b2db      	uxtb	r3, r3
 8000642:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000644:	f107 0208 	add.w	r2, r7, #8
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2304      	movs	r3, #4
 800064e:	214e      	movs	r1, #78	; 0x4e
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <lcd_send_data+0x5c>)
 8000652:	f002 fbf9 	bl	8002e48 <HAL_I2C_Master_Transmit>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200002b4 	.word	0x200002b4

08000664 <lcd_clear>:

void lcd_clear (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	f7ff ff9a 	bl	80005a4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	e005      	b.n	8000682 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000676:	2020      	movs	r0, #32
 8000678:	f7ff ffc4 	bl	8000604 <lcd_send_data>
	for (int i=0; i<70; i++)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b45      	cmp	r3, #69	; 0x45
 8000686:	ddf6      	ble.n	8000676 <lcd_clear+0x12>
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
    switch (row)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <lcd_put_cur+0x18>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d005      	beq.n	80006b4 <lcd_put_cur+0x22>
 80006a8:	e009      	b.n	80006be <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	603b      	str	r3, [r7, #0]
            break;
 80006b2:	e004      	b.n	80006be <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006ba:	603b      	str	r3, [r7, #0]
            break;
 80006bc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff6e 	bl	80005a4 <lcd_send_cmd>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_init>:


void lcd_init (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006d4:	2032      	movs	r0, #50	; 0x32
 80006d6:	f001 fc77 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006da:	2030      	movs	r0, #48	; 0x30
 80006dc:	f7ff ff62 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006e0:	2005      	movs	r0, #5
 80006e2:	f001 fc71 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006e6:	2030      	movs	r0, #48	; 0x30
 80006e8:	f7ff ff5c 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006ec:	2001      	movs	r0, #1
 80006ee:	f001 fc6b 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006f2:	2030      	movs	r0, #48	; 0x30
 80006f4:	f7ff ff56 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f001 fc65 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006fe:	2020      	movs	r0, #32
 8000700:	f7ff ff50 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(10);
 8000704:	200a      	movs	r0, #10
 8000706:	f001 fc5f 	bl	8001fc8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800070a:	2028      	movs	r0, #40	; 0x28
 800070c:	f7ff ff4a 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f001 fc59 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000716:	2008      	movs	r0, #8
 8000718:	f7ff ff44 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f001 fc53 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ff3e 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fc4d 	bl	8001fc8 <HAL_Delay>
	HAL_Delay(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 fc4a 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000734:	2006      	movs	r0, #6
 8000736:	f7ff ff35 	bl	80005a4 <lcd_send_cmd>
	HAL_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f001 fc44 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff ff2f 	bl	80005a4 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}

0800074a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000752:	e006      	b.n	8000762 <lcd_send_string+0x18>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff51 	bl	8000604 <lcd_send_data>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f4      	bne.n	8000754 <lcd_send_string+0xa>
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <delay_us>:

char *pArray[10] = {0};
char * pToken;

void delay_us(uint16_t delay)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	80fb      	strh	r3, [r7, #6]
	TIM3->CNT =0;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <delay_us+0x2c>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM3->CNT < delay );
 8000784:	bf00      	nop
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <delay_us+0x2c>)
 8000788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3fa      	bcc.n	8000786 <delay_us+0x12>
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40000400 	.word	0x40000400

080007a4 <getKeyNumber>:

int getKeyNumber()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
	int scanValue = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<4; i++ ){
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	e055      	b.n	8000860 <getKeyNumber+0xbc>
		uint16_t out_pin= 0x1 << (8+i);
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	3308      	adds	r3, #8
 80007b8:	2201      	movs	r2, #1
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(GPIOC, out_pin, GPIO_PIN_RESET);
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	482c      	ldr	r0, [pc, #176]	; (8000878 <getKeyNumber+0xd4>)
 80007c8:	f002 f9e0 	bl	8002b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, ~(out_pin), GPIO_PIN_SET);
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	43db      	mvns	r3, r3
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	4828      	ldr	r0, [pc, #160]	; (8000878 <getKeyNumber+0xd4>)
 80007d8:	f002 f9d8 	bl	8002b8c <HAL_GPIO_WritePin>

		HAL_Delay(30);
 80007dc:	201e      	movs	r0, #30
 80007de:	f001 fbf3 	bl	8001fc8 <HAL_Delay>

		uint8_t in_pin = 0x10;
 80007e2:	2310      	movs	r3, #16
 80007e4:	717b      	strb	r3, [r7, #5]
		if(HAL_GPIO_ReadPin(GPIOD,in_pin) == GPIO_PIN_RESET) {scanValue = i+1; break;}
 80007e6:	797b      	ldrb	r3, [r7, #5]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	4823      	ldr	r0, [pc, #140]	; (800087c <getKeyNumber+0xd8>)
 80007ee:	f002 f9b5 	bl	8002b5c <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d103      	bne.n	8000800 <getKeyNumber+0x5c>
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	e032      	b.n	8000866 <getKeyNumber+0xc2>
		else if(HAL_GPIO_ReadPin(GPIOD,in_pin<<1) == GPIO_PIN_RESET) {scanValue = i+5; break;}
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	b29b      	uxth	r3, r3
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	b29b      	uxth	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	481c      	ldr	r0, [pc, #112]	; (800087c <getKeyNumber+0xd8>)
 800080c:	f002 f9a6 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d103      	bne.n	800081e <getKeyNumber+0x7a>
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	3305      	adds	r3, #5
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e023      	b.n	8000866 <getKeyNumber+0xc2>
		else if(HAL_GPIO_ReadPin(GPIOD,in_pin<<2) == GPIO_PIN_RESET) {scanValue = i+9; break;}
 800081e:	797b      	ldrb	r3, [r7, #5]
 8000820:	b29b      	uxth	r3, r3
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	b29b      	uxth	r3, r3
 8000826:	4619      	mov	r1, r3
 8000828:	4814      	ldr	r0, [pc, #80]	; (800087c <getKeyNumber+0xd8>)
 800082a:	f002 f997 	bl	8002b5c <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d103      	bne.n	800083c <getKeyNumber+0x98>
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	3309      	adds	r3, #9
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e014      	b.n	8000866 <getKeyNumber+0xc2>
		else if(HAL_GPIO_ReadPin(GPIOD,in_pin<<3) == GPIO_PIN_RESET) {scanValue = i+13; break;}
 800083c:	797b      	ldrb	r3, [r7, #5]
 800083e:	b29b      	uxth	r3, r3
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	b29b      	uxth	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <getKeyNumber+0xd8>)
 8000848:	f002 f988 	bl	8002b5c <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d103      	bne.n	800085a <getKeyNumber+0xb6>
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	330d      	adds	r3, #13
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	e005      	b.n	8000866 <getKeyNumber+0xc2>
	for(int i = 0; i<4; i++ ){
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	3301      	adds	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2b03      	cmp	r3, #3
 8000864:	dda6      	ble.n	80007b4 <getKeyNumber+0x10>

	}
	HAL_Delay(300);
 8000866:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800086a:	f001 fbad 	bl	8001fc8 <HAL_Delay>
	return scanValue;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40020800 	.word	0x40020800
 800087c:	40020c00 	.word	0x40020c00

08000880 <WriteString>:

int WriteString(int num, char* id, char * pass,int idx,int flag){
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	603b      	str	r3, [r7, #0]
	if(flag == 0){	// ID
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	2b00      	cmp	r3, #0
 8000892:	f040 80a2 	bne.w	80009da <WriteString+0x15a>
		if(num == 1) { id[idx] = 'a'; return flag;}
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d106      	bne.n	80008aa <WriteString+0x2a>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	4413      	add	r3, r2
 80008a2:	2261      	movs	r2, #97	; 0x61
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	e139      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 2) { id[idx] = 'b'; return flag;}
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d106      	bne.n	80008be <WriteString+0x3e>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	4413      	add	r3, r2
 80008b6:	2262      	movs	r2, #98	; 0x62
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	e12f      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 3) { id[idx] = 'c'; return flag;}
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d106      	bne.n	80008d2 <WriteString+0x52>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	4413      	add	r3, r2
 80008ca:	2263      	movs	r2, #99	; 0x63
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	e125      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 4) { id[idx] = ' '; return -1;}
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d107      	bne.n	80008e8 <WriteString+0x68>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	4413      	add	r3, r2
 80008de:	2220      	movs	r2, #32
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	e11a      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 5) { id[idx] = 'd'; return flag;}
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d106      	bne.n	80008fc <WriteString+0x7c>
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	2264      	movs	r2, #100	; 0x64
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	e110      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 6) { id[idx] = 'e'; return flag;}
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d106      	bne.n	8000910 <WriteString+0x90>
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	4413      	add	r3, r2
 8000908:	2265      	movs	r2, #101	; 0x65
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	e106      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 7) { id[idx] = 'f'; return flag;}
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b07      	cmp	r3, #7
 8000914:	d106      	bne.n	8000924 <WriteString+0xa4>
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	4413      	add	r3, r2
 800091c:	2266      	movs	r2, #102	; 0x66
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	e0fc      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 8) { id[idx] = 'g'; return flag;}
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b08      	cmp	r3, #8
 8000928:	d106      	bne.n	8000938 <WriteString+0xb8>
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	4413      	add	r3, r2
 8000930:	2267      	movs	r2, #103	; 0x67
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	e0f2      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 9) { id[idx] = '1'; return flag;}
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b09      	cmp	r3, #9
 800093c:	d106      	bne.n	800094c <WriteString+0xcc>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	4413      	add	r3, r2
 8000944:	2231      	movs	r2, #49	; 0x31
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	e0e8      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 10) { id[idx] = '2'; return flag;}
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b0a      	cmp	r3, #10
 8000950:	d106      	bne.n	8000960 <WriteString+0xe0>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	2232      	movs	r2, #50	; 0x32
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	e0de      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 11) { id[idx] = '3'; return flag;}
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b0b      	cmp	r3, #11
 8000964:	d106      	bne.n	8000974 <WriteString+0xf4>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	4413      	add	r3, r2
 800096c:	2233      	movs	r2, #51	; 0x33
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	e0d4      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 12) { id[idx] = '4'; return flag;}
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b0c      	cmp	r3, #12
 8000978:	d106      	bne.n	8000988 <WriteString+0x108>
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	4413      	add	r3, r2
 8000980:	2234      	movs	r2, #52	; 0x34
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	e0ca      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 13) { id[idx] = '5'; return flag;}
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b0d      	cmp	r3, #13
 800098c:	d106      	bne.n	800099c <WriteString+0x11c>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	4413      	add	r3, r2
 8000994:	2235      	movs	r2, #53	; 0x35
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	e0c0      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 14) { id[idx] = '6'; return flag;}
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b0e      	cmp	r3, #14
 80009a0:	d106      	bne.n	80009b0 <WriteString+0x130>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	4413      	add	r3, r2
 80009a8:	2236      	movs	r2, #54	; 0x36
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	e0b6      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 15) { id[idx] = '7'; return flag;}
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d106      	bne.n	80009c4 <WriteString+0x144>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	2237      	movs	r2, #55	; 0x37
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	e0ac      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 16) { id[idx] = '\0'; return 1;}
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b10      	cmp	r3, #16
 80009c8:	f040 80a8 	bne.w	8000b1c <WriteString+0x29c>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	2301      	movs	r3, #1
 80009d8:	e0a1      	b.n	8000b1e <WriteString+0x29e>
	}
	else {			// password
		if(num == 1) { pass[idx] = 'a'; return 3;}
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d106      	bne.n	80009ee <WriteString+0x16e>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	2261      	movs	r2, #97	; 0x61
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	2303      	movs	r3, #3
 80009ec:	e097      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 2) { pass[idx] = 'b'; return 3;}
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d106      	bne.n	8000a02 <WriteString+0x182>
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	2262      	movs	r2, #98	; 0x62
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	2303      	movs	r3, #3
 8000a00:	e08d      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 3) { pass[idx] = 'c'; return 3;}
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d106      	bne.n	8000a16 <WriteString+0x196>
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2263      	movs	r2, #99	; 0x63
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	2303      	movs	r3, #3
 8000a14:	e083      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 4) { pass[idx] = ' '; return -1;}
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d107      	bne.n	8000a2c <WriteString+0x1ac>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	2220      	movs	r2, #32
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e078      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 5) { pass[idx] = 'd'; return 3;}
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b05      	cmp	r3, #5
 8000a30:	d106      	bne.n	8000a40 <WriteString+0x1c0>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	2264      	movs	r2, #100	; 0x64
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e06e      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 6) { pass[idx] = 'e'; return 3;}
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d106      	bne.n	8000a54 <WriteString+0x1d4>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2265      	movs	r2, #101	; 0x65
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	2303      	movs	r3, #3
 8000a52:	e064      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 7) { pass[idx] = 'f'; return 3;}
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d106      	bne.n	8000a68 <WriteString+0x1e8>
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	2266      	movs	r2, #102	; 0x66
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	2303      	movs	r3, #3
 8000a66:	e05a      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 8) { pass[idx] = 'g'; return 3;}
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	d106      	bne.n	8000a7c <WriteString+0x1fc>
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	2267      	movs	r2, #103	; 0x67
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	2303      	movs	r3, #3
 8000a7a:	e050      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 9) { pass[idx] = '1'; return 3;}
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b09      	cmp	r3, #9
 8000a80:	d106      	bne.n	8000a90 <WriteString+0x210>
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	2231      	movs	r2, #49	; 0x31
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	e046      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 10) { pass[idx] = '2'; return 3;}
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b0a      	cmp	r3, #10
 8000a94:	d106      	bne.n	8000aa4 <WriteString+0x224>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2232      	movs	r2, #50	; 0x32
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e03c      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 11) { pass[idx] = '3'; return 3;}
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b0b      	cmp	r3, #11
 8000aa8:	d106      	bne.n	8000ab8 <WriteString+0x238>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2233      	movs	r2, #51	; 0x33
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e032      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 12) { pass[idx] = '4'; return 3;}
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b0c      	cmp	r3, #12
 8000abc:	d106      	bne.n	8000acc <WriteString+0x24c>
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2234      	movs	r2, #52	; 0x34
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	2303      	movs	r3, #3
 8000aca:	e028      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 13) { pass[idx] = '5'; return 3;}
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b0d      	cmp	r3, #13
 8000ad0:	d106      	bne.n	8000ae0 <WriteString+0x260>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	2235      	movs	r2, #53	; 0x35
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	2303      	movs	r3, #3
 8000ade:	e01e      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 14) { pass[idx] = '6'; return 3;}
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b0e      	cmp	r3, #14
 8000ae4:	d106      	bne.n	8000af4 <WriteString+0x274>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	2236      	movs	r2, #54	; 0x36
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	2303      	movs	r3, #3
 8000af2:	e014      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 15) { pass[idx] = '7'; return 3;}
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	d106      	bne.n	8000b08 <WriteString+0x288>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	2237      	movs	r2, #55	; 0x37
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	2303      	movs	r3, #3
 8000b06:	e00a      	b.n	8000b1e <WriteString+0x29e>
		else if(num == 16) { pass[idx] = '\0'; return 2;}
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b10      	cmp	r3, #16
 8000b0c:	d106      	bne.n	8000b1c <WriteString+0x29c>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e000      	b.n	8000b1e <WriteString+0x29e>
	}
	return 10;
 8000b1c:	230a      	movs	r3, #10
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <Missile>:

void Missile()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2108      	movs	r1, #8
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <Missile+0x24>)
 8000b36:	f002 f829 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000b3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b3e:	f001 fa43 	bl	8001fc8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2108      	movs	r1, #8
 8000b46:	4802      	ldr	r0, [pc, #8]	; (8000b50 <Missile+0x24>)
 8000b48:	f002 f820 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021400 	.word	0x40021400

08000b54 <LCDMain>:

void LCDMain(void) // Main LCD
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	lcd_clear();
 8000b58:	f7ff fd84 	bl	8000664 <lcd_clear>
	lcd_put_cur(0, 4);
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fd97 	bl	8000692 <lcd_put_cur>
	lcd_send_string("WELCOME!");
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <LCDMain+0x28>)
 8000b66:	f7ff fdf0 	bl	800074a <lcd_send_string>
	lcd_put_cur(1, 0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fd90 	bl	8000692 <lcd_put_cur>
	lcd_send_string("8:C 12:L 16:R");
 8000b72:	4803      	ldr	r0, [pc, #12]	; (8000b80 <LCDMain+0x2c>)
 8000b74:	f7ff fde9 	bl	800074a <lcd_send_string>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	08007364 	.word	0x08007364
 8000b80:	08007370 	.word	0x08007370

08000b84 <LCD_LogIn>:
void LCD_LogIn(char*ID, char* PASS)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	lcd_clear();
 8000b8e:	f7ff fd69 	bl	8000664 <lcd_clear>
	lcd_put_cur(0, 0);	lcd_send_string("ID : ");	lcd_send_string(ID);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fd7c 	bl	8000692 <lcd_put_cur>
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <LCD_LogIn+0x40>)
 8000b9c:	f7ff fdd5 	bl	800074a <lcd_send_string>
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fdd2 	bl	800074a <lcd_send_string>
	lcd_put_cur(1, 0);	lcd_send_string("PW : ");	lcd_send_string(PASS);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fd72 	bl	8000692 <lcd_put_cur>
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <LCD_LogIn+0x44>)
 8000bb0:	f7ff fdcb 	bl	800074a <lcd_send_string>
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f7ff fdc8 	bl	800074a <lcd_send_string>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08007380 	.word	0x08007380
 8000bc8:	08007388 	.word	0x08007388

08000bcc <LCD_LogInTrue>:

// LCD 로그?�� ?���??????? ?�� ?���???????
void LCD_LogInTrue(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	lcd_clear();
 8000bd0:	f7ff fd48 	bl	8000664 <lcd_clear>
	lcd_put_cur(0, 4);	lcd_send_string("SUCCESS!");
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fd5b 	bl	8000692 <lcd_put_cur>
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LCD_LogInTrue+0x48>)
 8000bde:	f7ff fdb4 	bl	800074a <lcd_send_string>
	lcd_put_cur(1, 3);	lcd_send_string("DOOR OPEN");
 8000be2:	2103      	movs	r1, #3
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fd54 	bl	8000692 <lcd_put_cur>
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <LCD_LogInTrue+0x4c>)
 8000bec:	f7ff fdad 	bl	800074a <lcd_send_string>
	TIM3->CCR1 = 2000;	HAL_Delay(2000);
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <LCD_LogInTrue+0x50>)
 8000bf2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bfc:	f001 f9e4 	bl	8001fc8 <HAL_Delay>
	TIM3->CCR1 = 1000;	HAL_Delay(2000);
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <LCD_LogInTrue+0x50>)
 8000c02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
 8000c08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c0c:	f001 f9dc 	bl	8001fc8 <HAL_Delay>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	08007390 	.word	0x08007390
 8000c18:	0800739c 	.word	0x0800739c
 8000c1c:	40000400 	.word	0x40000400

08000c20 <LCD_LogInFalse_Missile>:

void LCD_LogInFalse_Missile(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	lcd_clear();
 8000c24:	f7ff fd1e 	bl	8000664 <lcd_clear>
	lcd_put_cur(0, 4);	lcd_send_string("FAILURE!");
 8000c28:	2104      	movs	r1, #4
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fd31 	bl	8000692 <lcd_put_cur>
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <LCD_LogInFalse_Missile+0x2c>)
 8000c32:	f7ff fd8a 	bl	800074a <lcd_send_string>
	lcd_put_cur(1, 1);	lcd_send_string("Missile Launch");
 8000c36:	2101      	movs	r1, #1
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fd2a 	bl	8000692 <lcd_put_cur>
 8000c3e:	4804      	ldr	r0, [pc, #16]	; (8000c50 <LCD_LogInFalse_Missile+0x30>)
 8000c40:	f7ff fd83 	bl	800074a <lcd_send_string>
	Missile();
 8000c44:	f7ff ff72 	bl	8000b2c <Missile>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	080073a8 	.word	0x080073a8
 8000c50:	080073b4 	.word	0x080073b4

08000c54 <LCD_LogInFalse>:

void LCD_LogInFalse(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	lcd_clear();
 8000c58:	f7ff fd04 	bl	8000664 <lcd_clear>
	lcd_put_cur(0, 4);	lcd_send_string("FAILURE!");
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fd17 	bl	8000692 <lcd_put_cur>
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <LCD_LogInFalse+0x30>)
 8000c66:	f7ff fd70 	bl	800074a <lcd_send_string>
	lcd_put_cur(1, 1);	lcd_send_string("Please Retry..");
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fd10 	bl	8000692 <lcd_put_cur>
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <LCD_LogInFalse+0x34>)
 8000c74:	f7ff fd69 	bl	800074a <lcd_send_string>
	HAL_Delay(2000);
 8000c78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c7c:	f001 f9a4 	bl	8001fc8 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	080073a8 	.word	0x080073a8
 8000c88:	080073c4 	.word	0x080073c4

08000c8c <LCD_User_data>:

void LCD_User_data(char** ID,int line){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	lcd_clear();
 8000c96:	f7ff fce5 	bl	8000664 <lcd_clear>
	lcd_put_cur(0, 0);	lcd_send_string("ID :");	lcd_send_string(ID[line]); lcd_send_string("▲");
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fcf8 	bl	8000692 <lcd_put_cur>
 8000ca2:	4812      	ldr	r0, [pc, #72]	; (8000cec <LCD_User_data+0x60>)
 8000ca4:	f7ff fd51 	bl	800074a <lcd_send_string>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fd49 	bl	800074a <lcd_send_string>
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LCD_User_data+0x64>)
 8000cba:	f7ff fd46 	bl	800074a <lcd_send_string>
	lcd_put_cur(1, 0);	lcd_send_string("ID :");	lcd_send_string(ID[line+1]);	lcd_send_string("▼");
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fce6 	bl	8000692 <lcd_put_cur>
 8000cc6:	4809      	ldr	r0, [pc, #36]	; (8000cec <LCD_User_data+0x60>)
 8000cc8:	f7ff fd3f 	bl	800074a <lcd_send_string>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd36 	bl	800074a <lcd_send_string>
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <LCD_User_data+0x68>)
 8000ce0:	f7ff fd33 	bl	800074a <lcd_send_string>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	080073d4 	.word	0x080073d4
 8000cf0:	080073dc 	.word	0x080073dc
 8000cf4:	080073e0 	.word	0x080073e0

08000cf8 <LCD_Register_Success>:


void LCD_Register_Success(void) // ID, PW
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	lcd_clear();
 8000cfc:	f7ff fcb2 	bl	8000664 <lcd_clear>
	lcd_put_cur(0, 3);	lcd_send_string("Register");
 8000d00:	2103      	movs	r1, #3
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fcc5 	bl	8000692 <lcd_put_cur>
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <LCD_Register_Success+0x30>)
 8000d0a:	f7ff fd1e 	bl	800074a <lcd_send_string>
	lcd_put_cur(1, 3);	lcd_send_string("Success!!");
 8000d0e:	2103      	movs	r1, #3
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fcbe 	bl	8000692 <lcd_put_cur>
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <LCD_Register_Success+0x34>)
 8000d18:	f7ff fd17 	bl	800074a <lcd_send_string>
	HAL_Delay(2000);
 8000d1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d20:	f001 f952 	bl	8001fc8 <HAL_Delay>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	080073e4 	.word	0x080073e4
 8000d2c:	080073f0 	.word	0x080073f0

08000d30 <RegisterData>:

void RegisterData(void){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09a      	sub	sp, #104	; 0x68
 8000d34:	af02      	add	r7, sp, #8

	char id[20] = "";
 8000d36:	2300      	movs	r3, #0
 8000d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
	char pass[20]= "";
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
	int flag = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
	int idx = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58

	while(1){
		int pressedKey = getKeyNumber();
 8000d62:	f7ff fd1f 	bl	80007a4 <getKeyNumber>
 8000d66:	6578      	str	r0, [r7, #84]	; 0x54
		int result = WriteString(pressedKey, id, pass, idx, flag);
 8000d68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d6c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000d78:	f7ff fd82 	bl	8000880 <WriteString>
 8000d7c:	6538      	str	r0, [r7, #80]	; 0x50
		LCD_LogIn(id,pass);
 8000d7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fefb 	bl	8000b84 <LCD_LogIn>
		if(result == -1){
 8000d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d116      	bne.n	8000dc4 <RegisterData+0x94>
			if(idx!=0){
 8000d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0e2      	beq.n	8000d62 <RegisterData+0x32>
				idx--;
 8000d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	65bb      	str	r3, [r7, #88]	; 0x58
				if(flag == 0) id[idx]= ' ';
 8000da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d106      	bne.n	8000db6 <RegisterData+0x86>
 8000da8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dae:	4413      	add	r3, r2
 8000db0:	2220      	movs	r2, #32
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e7d5      	b.n	8000d62 <RegisterData+0x32>
				else pass[idx] = ' ';
 8000db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e7ce      	b.n	8000d62 <RegisterData+0x32>
			}
		}
		else if(result == 1){
 8000dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d104      	bne.n	8000dd4 <RegisterData+0xa4>
			flag = 1; idx =0;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000dce:	2300      	movs	r3, #0
 8000dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dd2:	e7c6      	b.n	8000d62 <RegisterData+0x32>
		}
		else if(result == 2){
 8000dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d11a      	bne.n	8000e10 <RegisterData+0xe0>
			char temp[40];
			sprintf(temp,"100:%s:%sL",id,pass);
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000de2:	4638      	mov	r0, r7
 8000de4:	4910      	ldr	r1, [pc, #64]	; (8000e28 <RegisterData+0xf8>)
 8000de6:	f004 fff3 	bl	8005dd0 <siprintf>
			HAL_UART_Transmit(&huart3, temp, strlen(temp), 20);
 8000dea:	463b      	mov	r3, r7
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff f9ff 	bl	80001f0 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4639      	mov	r1, r7
 8000df8:	2314      	movs	r3, #20
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <RegisterData+0xfc>)
 8000dfc:	f004 f899 	bl	8004f32 <HAL_UART_Transmit>
			LCD_Register_Success();
 8000e00:	f7ff ff7a 	bl	8000cf8 <LCD_Register_Success>
			break;
 8000e04:	bf00      	nop
		}
		else if(result == 10) continue;
		else idx++;
	}
	HAL_Delay(300);
 8000e06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e0a:	f001 f8dd 	bl	8001fc8 <HAL_Delay>
}
 8000e0e:	e008      	b.n	8000e22 <RegisterData+0xf2>
		else if(result == 10) continue;
 8000e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	d003      	beq.n	8000e1e <RegisterData+0xee>
		else idx++;
 8000e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e18:	3301      	adds	r3, #1
 8000e1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e1c:	e7a1      	b.n	8000d62 <RegisterData+0x32>
		else if(result == 10) continue;
 8000e1e:	bf00      	nop
	while(1){
 8000e20:	e79f      	b.n	8000d62 <RegisterData+0x32>
}
 8000e22:	3760      	adds	r7, #96	; 0x60
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	080073fc 	.word	0x080073fc
 8000e2c:	20000350 	.word	0x20000350

08000e30 <ID_Check>:

void ID_Check(void){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0ba      	sub	sp, #232	; 0xe8
 8000e34:	af00      	add	r7, sp, #0

	char temp[10];
	sprintf(temp,"%dL",200);
	HAL_UART_Transmit(&huart3, temp, strlen(temp), 10);
*/
	HAL_UART_Transmit(&huart3, "200L", strlen("200L"), 10);
 8000e36:	230a      	movs	r3, #10
 8000e38:	2204      	movs	r2, #4
 8000e3a:	494b      	ldr	r1, [pc, #300]	; (8000f68 <ID_Check+0x138>)
 8000e3c:	484b      	ldr	r0, [pc, #300]	; (8000f6c <ID_Check+0x13c>)
 8000e3e:	f004 f878 	bl	8004f32 <HAL_UART_Transmit>

	uint8_t RxBuffer[100];
	uint8_t Rx_temp;
	int str_len;
	char* ID[30]={0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2278      	movs	r2, #120	; 0x78
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 ffb9 	bl	8005dc0 <memset>
	int idx = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	delay_us(10);
 8000e54:	200a      	movs	r0, #10
 8000e56:	f7ff fc8d 	bl	8000774 <delay_us>
	while(1){
		if(HAL_UART_Receive(&huart3, &Rx_temp, 1, 10)==HAL_OK){
 8000e5a:	f107 017b 	add.w	r1, r7, #123	; 0x7b
 8000e5e:	230a      	movs	r3, #10
 8000e60:	2201      	movs	r2, #1
 8000e62:	4842      	ldr	r0, [pc, #264]	; (8000f6c <ID_Check+0x13c>)
 8000e64:	f004 f8f7 	bl	8005056 <HAL_UART_Receive>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f5      	bne.n	8000e5a <ID_Check+0x2a>
			RxBuffer[idx++] = Rx_temp;
 8000e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000e78:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8000e7c:	33e8      	adds	r3, #232	; 0xe8
 8000e7e:	443b      	add	r3, r7
 8000e80:	f803 2c6c 	strb.w	r2, [r3, #-108]
			delay_us(10);
 8000e84:	200a      	movs	r0, #10
 8000e86:	f7ff fc75 	bl	8000774 <delay_us>
			if(Rx_temp == 'L') break;
 8000e8a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000e8e:	2b4c      	cmp	r3, #76	; 0x4c
 8000e90:	d000      	beq.n	8000e94 <ID_Check+0x64>
		if(HAL_UART_Receive(&huart3, &Rx_temp, 1, 10)==HAL_OK){
 8000e92:	e7e2      	b.n	8000e5a <ID_Check+0x2a>
			if(Rx_temp == 'L') break;
 8000e94:	bf00      	nop
		}
	}
	RxBuffer[idx-1] = '\0';
 8000e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	33e8      	adds	r3, #232	; 0xe8
 8000e9e:	443b      	add	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f803 2c6c 	strb.w	r2, [r3, #-108]
	//str_len = strlen(RxBuffer);

	pToken = strtok(RxBuffer,":");
 8000ea6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eaa:	4931      	ldr	r1, [pc, #196]	; (8000f70 <ID_Check+0x140>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 ffaf 	bl	8005e10 <strtok>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <ID_Check+0x144>)
 8000eb6:	6013      	str	r3, [r2, #0]
	//int i = 0;
	idx = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	while(pToken !=NULL){
 8000ebe:	e018      	b.n	8000ef2 <ID_Check+0xc2>
		ID[idx] = pToken;
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <ID_Check+0x144>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	33e8      	adds	r3, #232	; 0xe8
 8000ecc:	443b      	add	r3, r7
 8000ece:	f843 2ce8 	str.w	r2, [r3, #-232]
		if(++idx>10)	break;
 8000ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ee0:	2b0a      	cmp	r3, #10
 8000ee2:	dc0b      	bgt.n	8000efc <ID_Check+0xcc>
		pToken = strtok(NULL,":");
 8000ee4:	4922      	ldr	r1, [pc, #136]	; (8000f70 <ID_Check+0x140>)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f004 ff92 	bl	8005e10 <strtok>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <ID_Check+0x144>)
 8000ef0:	6013      	str	r3, [r2, #0]
	while(pToken !=NULL){
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <ID_Check+0x144>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1e2      	bne.n	8000ec0 <ID_Check+0x90>
 8000efa:	e000      	b.n	8000efe <ID_Check+0xce>
		if(++idx>10)	break;
 8000efc:	bf00      	nop
	}

	int line = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1){
		LCD_User_data(ID, line);
 8000f04:	463b      	mov	r3, r7
 8000f06:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff febe 	bl	8000c8c <LCD_User_data>
		if(getKeyNumber()==1){ //up
 8000f10:	f7ff fc48 	bl	80007a4 <getKeyNumber>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d109      	bne.n	8000f2e <ID_Check+0xfe>
			if(line !=0) line--;
 8000f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f0      	beq.n	8000f04 <ID_Check+0xd4>
 8000f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f2c:	e7ea      	b.n	8000f04 <ID_Check+0xd4>
		}
		else if(getKeyNumber()==2){
 8000f2e:	f7ff fc39 	bl	80007a4 <getKeyNumber>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d10c      	bne.n	8000f52 <ID_Check+0x122>
			if(line<idx-1) line ++;
 8000f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dade      	bge.n	8000f04 <ID_Check+0xd4>
 8000f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f50:	e7d8      	b.n	8000f04 <ID_Check+0xd4>
		}
		else if(getKeyNumber()==4) break;
 8000f52:	f7ff fc27 	bl	80007a4 <getKeyNumber>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d000      	beq.n	8000f5e <ID_Check+0x12e>
		LCD_User_data(ID, line);
 8000f5c:	e7d2      	b.n	8000f04 <ID_Check+0xd4>
		else if(getKeyNumber()==4) break;
 8000f5e:	bf00      	nop
	}
}
 8000f60:	bf00      	nop
 8000f62:	37e8      	adds	r7, #232	; 0xe8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	08007408 	.word	0x08007408
 8000f6c:	20000350 	.word	0x20000350
 8000f70:	08007410 	.word	0x08007410
 8000f74:	200008a0 	.word	0x200008a0

08000f78 <LogIn>:

void LogIn(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09c      	sub	sp, #112	; 0x70
 8000f7c:	af02      	add	r7, sp, #8
	char id[20] = "";
 8000f7e:	2300      	movs	r3, #0
 8000f80:	643b      	str	r3, [r7, #64]	; 0x40
 8000f82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
	char pass[20] = "";
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
	int flag = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
	int idx = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	663b      	str	r3, [r7, #96]	; 0x60
	int count = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(1){
		int pressedKey = getKeyNumber();
 8000fae:	f7ff fbf9 	bl	80007a4 <getKeyNumber>
 8000fb2:	65b8      	str	r0, [r7, #88]	; 0x58
		int result = WriteString(pressedKey, id, pass, idx, flag);
 8000fb4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fb8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fc2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000fc4:	f7ff fc5c 	bl	8000880 <WriteString>
 8000fc8:	6578      	str	r0, [r7, #84]	; 0x54
		LCD_LogIn(id,pass);
 8000fca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fdd5 	bl	8000b84 <LCD_LogIn>
		if(result == -1){
 8000fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d116      	bne.n	8001010 <LogIn+0x98>
			if(idx!=0){
 8000fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0e2      	beq.n	8000fae <LogIn+0x36>
				idx--;
 8000fe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fea:	3b01      	subs	r3, #1
 8000fec:	663b      	str	r3, [r7, #96]	; 0x60
				if(flag == 0) id[idx]= ' ';
 8000fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d106      	bne.n	8001002 <LogIn+0x8a>
 8000ff4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e7d5      	b.n	8000fae <LogIn+0x36>
				else pass[idx] = ' ';
 8001002:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001008:	4413      	add	r3, r2
 800100a:	2220      	movs	r2, #32
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	e7ce      	b.n	8000fae <LogIn+0x36>
			}
		}
		else if(result == 1){
 8001010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001012:	2b01      	cmp	r3, #1
 8001014:	d104      	bne.n	8001020 <LogIn+0xa8>
			flag = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	667b      	str	r3, [r7, #100]	; 0x64
			idx =0;
 800101a:	2300      	movs	r3, #0
 800101c:	663b      	str	r3, [r7, #96]	; 0x60
 800101e:	e7c6      	b.n	8000fae <LogIn+0x36>
		}
		else if(result == 2){
 8001020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001022:	2b02      	cmp	r3, #2
 8001024:	d157      	bne.n	80010d6 <LogIn+0x15e>
			char temp[40];
			sprintf(temp,"300:%s:%sL",id,pass);
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800102e:	4638      	mov	r0, r7
 8001030:	492f      	ldr	r1, [pc, #188]	; (80010f0 <LogIn+0x178>)
 8001032:	f004 fecd 	bl	8005dd0 <siprintf>
			HAL_UART_Transmit(&huart3, temp, strlen(temp), 20);
 8001036:	463b      	mov	r3, r7
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8d9 	bl	80001f0 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	4639      	mov	r1, r7
 8001044:	2314      	movs	r3, #20
 8001046:	482b      	ldr	r0, [pc, #172]	; (80010f4 <LogIn+0x17c>)
 8001048:	f003 ff73 	bl	8004f32 <HAL_UART_Transmit>

			delay_us(10);
 800104c:	200a      	movs	r0, #10
 800104e:	f7ff fb91 	bl	8000774 <delay_us>
			char exist = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			while(1){
				if(HAL_UART_Receive(&huart3, &exist, 1, 10)==HAL_OK)	break;
 8001058:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800105c:	230a      	movs	r3, #10
 800105e:	2201      	movs	r2, #1
 8001060:	4824      	ldr	r0, [pc, #144]	; (80010f4 <LogIn+0x17c>)
 8001062:	f003 fff8 	bl	8005056 <HAL_UART_Receive>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d000      	beq.n	800106e <LogIn+0xf6>
 800106c:	e7f4      	b.n	8001058 <LogIn+0xe0>
 800106e:	bf00      	nop
			}

			if(exist == '0'){
 8001070:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001074:	2b30      	cmp	r3, #48	; 0x30
 8001076:	d125      	bne.n	80010c4 <LogIn+0x14c>
				if(count ==2) {
 8001078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800107a:	2b02      	cmp	r3, #2
 800107c:	d108      	bne.n	8001090 <LogIn+0x118>
				//	char missile[30];
				//	sprintf(missile,"%dL",400);
				//	HAL_UART_Transmit(&huart3, missile, strlen(missile), 20);
					HAL_UART_Transmit(&huart3,"400L",strlen("400L"),20);
 800107e:	2314      	movs	r3, #20
 8001080:	2204      	movs	r2, #4
 8001082:	491d      	ldr	r1, [pc, #116]	; (80010f8 <LogIn+0x180>)
 8001084:	481b      	ldr	r0, [pc, #108]	; (80010f4 <LogIn+0x17c>)
 8001086:	f003 ff54 	bl	8004f32 <HAL_UART_Transmit>
					LCD_LogInFalse_Missile();
 800108a:	f7ff fdc9 	bl	8000c20 <LCD_LogInFalse_Missile>
				//	delay_us(10);
					break;
 800108e:	e021      	b.n	80010d4 <LogIn+0x15c>
				}
				else{
					LCD_LogInFalse();
 8001090:	f7ff fde0 	bl	8000c54 <LCD_LogInFalse>
					flag = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	667b      	str	r3, [r7, #100]	; 0x64
					idx = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	663b      	str	r3, [r7, #96]	; 0x60
					sprintf(id," ");
 800109c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a0:	4916      	ldr	r1, [pc, #88]	; (80010fc <LogIn+0x184>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f004 fe94 	bl	8005dd0 <siprintf>
					sprintf(pass," ");
 80010a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ac:	4913      	ldr	r1, [pc, #76]	; (80010fc <LogIn+0x184>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fe8e 	bl	8005dd0 <siprintf>
					count++;
 80010b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b6:	3301      	adds	r3, #1
 80010b8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				HAL_Delay(500);
 80010ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010be:	f000 ff83 	bl	8001fc8 <HAL_Delay>
 80010c2:	e774      	b.n	8000fae <LogIn+0x36>
			}
			else if(exist == '1'){
 80010c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010c8:	2b31      	cmp	r3, #49	; 0x31
 80010ca:	f47f af70 	bne.w	8000fae <LogIn+0x36>
				LCD_LogInTrue();
 80010ce:	f7ff fd7d 	bl	8000bcc <LCD_LogInTrue>
				break;
 80010d2:	bf00      	nop
			}
		}
		else if(result == 10) continue;
		else idx++;
	}
}
 80010d4:	e008      	b.n	80010e8 <LogIn+0x170>
		else if(result == 10) continue;
 80010d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d8:	2b0a      	cmp	r3, #10
 80010da:	d003      	beq.n	80010e4 <LogIn+0x16c>
		else idx++;
 80010dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010de:	3301      	adds	r3, #1
 80010e0:	663b      	str	r3, [r7, #96]	; 0x60
 80010e2:	e764      	b.n	8000fae <LogIn+0x36>
		else if(result == 10) continue;
 80010e4:	bf00      	nop
	while(1){
 80010e6:	e762      	b.n	8000fae <LogIn+0x36>
}
 80010e8:	3768      	adds	r7, #104	; 0x68
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08007414 	.word	0x08007414
 80010f4:	20000350 	.word	0x20000350
 80010f8:	08007420 	.word	0x08007420
 80010fc:	08007428 	.word	0x08007428

08001100 <Camera_Control>:


void Camera_Control(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

	uint8_t RxBuffer[10];
	uint8_t Rx_temp;
	int idx = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, "CL", strlen("CL"), 20);
 800110a:	2314      	movs	r3, #20
 800110c:	2202      	movs	r2, #2
 800110e:	491e      	ldr	r1, [pc, #120]	; (8001188 <Camera_Control+0x88>)
 8001110:	481e      	ldr	r0, [pc, #120]	; (800118c <Camera_Control+0x8c>)
 8001112:	f003 ff0e 	bl	8004f32 <HAL_UART_Transmit>

	delay_us(10);
 8001116:	200a      	movs	r0, #10
 8001118:	f7ff fb2c 	bl	8000774 <delay_us>

	while(1){
		if(HAL_UART_Receive(&huart3, &Rx_temp, 1, 10)==HAL_OK){
 800111c:	1cf9      	adds	r1, r7, #3
 800111e:	230a      	movs	r3, #10
 8001120:	2201      	movs	r2, #1
 8001122:	481a      	ldr	r0, [pc, #104]	; (800118c <Camera_Control+0x8c>)
 8001124:	f003 ff97 	bl	8005056 <HAL_UART_Receive>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f6      	bne.n	800111c <Camera_Control+0x1c>
			if(Rx_temp == 'C') break;
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	2b43      	cmp	r3, #67	; 0x43
 8001132:	d00e      	beq.n	8001152 <Camera_Control+0x52>
			RxBuffer[idx++] = Rx_temp;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	617a      	str	r2, [r7, #20]
 800113a:	78fa      	ldrb	r2, [r7, #3]
 800113c:	3318      	adds	r3, #24
 800113e:	443b      	add	r3, r7
 8001140:	f803 2c14 	strb.w	r2, [r3, #-20]
			delay_us(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f7ff fb15 	bl	8000774 <delay_us>
			if(Rx_temp == 'L') break;
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	2b4c      	cmp	r3, #76	; 0x4c
 800114e:	d002      	beq.n	8001156 <Camera_Control+0x56>
		if(HAL_UART_Receive(&huart3, &Rx_temp, 1, 10)==HAL_OK){
 8001150:	e7e4      	b.n	800111c <Camera_Control+0x1c>
			if(Rx_temp == 'C') break;
 8001152:	bf00      	nop
 8001154:	e000      	b.n	8001158 <Camera_Control+0x58>
			if(Rx_temp == 'L') break;
 8001156:	bf00      	nop
		}
	}
	RxBuffer[idx-1] = '\0';
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3b01      	subs	r3, #1
 800115c:	3318      	adds	r3, #24
 800115e:	443b      	add	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	f803 2c14 	strb.w	r2, [r3, #-20]

	int angle = atoi(RxBuffer);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fdfb 	bl	8005d64 <atoi>
 800116e:	6138      	str	r0, [r7, #16]

	TIM3->CCR2 = angle*10; // 60~240
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	461a      	mov	r2, r3
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <Camera_Control+0x90>)
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800742c 	.word	0x0800742c
 800118c:	20000350 	.word	0x20000350
 8001190:	40000400 	.word	0x40000400

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f000 fea3 	bl	8001ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 f841 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 fa11 	bl	80015c8 <MX_GPIO_Init>
  MX_ETH_Init();
 80011a6:	f000 f8a7 	bl	80012f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80011aa:	f000 f9b5 	bl	8001518 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011ae:	f000 f9dd 	bl	800156c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80011b2:	f000 f92f 	bl	8001414 <MX_TIM3_Init>
  MX_I2C1_Init();
 80011b6:	f000 f8ed 	bl	8001394 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int pressedKey;
  HAL_TIM_Base_Start(&htim3);
 80011ba:	4818      	ldr	r0, [pc, #96]	; (800121c <main+0x88>)
 80011bc:	f002 ffcc 	bl	8004158 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011c0:	2100      	movs	r1, #0
 80011c2:	4816      	ldr	r0, [pc, #88]	; (800121c <main+0x88>)
 80011c4:	f003 f88a 	bl	80042dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011c8:	2104      	movs	r1, #4
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <main+0x88>)
 80011cc:	f003 f886 	bl	80042dc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2120      	movs	r1, #32
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <main+0x8c>)
 80011d6:	f001 fcd9 	bl	8002b8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2108      	movs	r1, #8
 80011de:	4810      	ldr	r0, [pc, #64]	; (8001220 <main+0x8c>)
 80011e0:	f001 fcd4 	bl	8002b8c <HAL_GPIO_WritePin>
  lcd_init();
 80011e4:	f7ff fa74 	bl	80006d0 <lcd_init>
  // 12 :
  // 16 :  ?��?��

  while (1)
  {
	  pressedKey = getKeyNumber();
 80011e8:	f7ff fadc 	bl	80007a4 <getKeyNumber>
 80011ec:	6078      	str	r0, [r7, #4]


	  if(pressedKey == 16)  RegisterData();
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d102      	bne.n	80011fa <main+0x66>
 80011f4:	f7ff fd9c 	bl	8000d30 <RegisterData>
 80011f8:	e00d      	b.n	8001216 <main+0x82>

	  else if(pressedKey == 12) ID_Check();
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0c      	cmp	r3, #12
 80011fe:	d102      	bne.n	8001206 <main+0x72>
 8001200:	f7ff fe16 	bl	8000e30 <ID_Check>
 8001204:	e007      	b.n	8001216 <main+0x82>

	  else if(pressedKey == 8) LogIn();
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b08      	cmp	r3, #8
 800120a:	d102      	bne.n	8001212 <main+0x7e>
 800120c:	f7ff feb4 	bl	8000f78 <LogIn>
 8001210:	e001      	b.n	8001216 <main+0x82>

	  else  LCDMain();
 8001212:	f7ff fc9f 	bl	8000b54 <LCDMain>
	  Camera_Control();
 8001216:	f7ff ff73 	bl	8001100 <Camera_Control>
	  pressedKey = getKeyNumber();
 800121a:	e7e5      	b.n	80011e8 <main+0x54>
 800121c:	20000308 	.word	0x20000308
 8001220:	40021400 	.word	0x40021400

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	; 0x50
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	; 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f004 fdc4 	bl	8005dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <SystemClock_Config+0xcc>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	; 0x40
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <SystemClock_Config+0xcc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <SystemClock_Config+0xd0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <SystemClock_Config+0xd0>)
 800126e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <SystemClock_Config+0xd0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001280:	2301      	movs	r3, #1
 8001282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001284:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001298:	23a8      	movs	r3, #168	; 0xa8
 800129a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012a0:	2307      	movs	r3, #7
 80012a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fa6d 	bl	8003788 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b4:	f000 fa90 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2105      	movs	r1, #5
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fcce 	bl	8003c78 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012e2:	f000 fa79 	bl	80017d8 <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	; 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MX_ETH_Init+0x84>)
 80012fe:	4a20      	ldr	r2, [pc, #128]	; (8001380 <MX_ETH_Init+0x88>)
 8001300:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_ETH_Init+0x8c>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_ETH_Init+0x8c>)
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_ETH_Init+0x8c>)
 8001310:	22e1      	movs	r2, #225	; 0xe1
 8001312:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_ETH_Init+0x8c>)
 8001316:	2200      	movs	r2, #0
 8001318:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_ETH_Init+0x8c>)
 800131c:	2200      	movs	r2, #0
 800131e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_ETH_Init+0x8c>)
 8001322:	2200      	movs	r2, #0
 8001324:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_ETH_Init+0x84>)
 8001328:	4a16      	ldr	r2, [pc, #88]	; (8001384 <MX_ETH_Init+0x8c>)
 800132a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_ETH_Init+0x84>)
 800132e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001332:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_ETH_Init+0x84>)
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <MX_ETH_Init+0x90>)
 8001338:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_ETH_Init+0x84>)
 800133c:	4a13      	ldr	r2, [pc, #76]	; (800138c <MX_ETH_Init+0x94>)
 800133e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_ETH_Init+0x84>)
 8001342:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001346:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <MX_ETH_Init+0x84>)
 800134a:	f000 ff47 	bl	80021dc <HAL_ETH_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001354:	f000 fa40 	bl	80017d8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001358:	2238      	movs	r2, #56	; 0x38
 800135a:	2100      	movs	r1, #0
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <MX_ETH_Init+0x98>)
 800135e:	f004 fd2f 	bl	8005dc0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_ETH_Init+0x98>)
 8001364:	2221      	movs	r2, #33	; 0x21
 8001366:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_ETH_Init+0x98>)
 800136a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800136e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_ETH_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000204 	.word	0x20000204
 8001380:	40028000 	.word	0x40028000
 8001384:	200008a4 	.word	0x200008a4
 8001388:	20000164 	.word	0x20000164
 800138c:	200000c4 	.word	0x200000c4
 8001390:	2000008c 	.word	0x2000008c

08001394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_I2C1_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <MX_I2C1_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_I2C1_Init+0x74>)
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <MX_I2C1_Init+0x7c>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_I2C1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_I2C1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_I2C1_Init+0x74>)
 80013b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_I2C1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_I2C1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_I2C1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_I2C1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_I2C1_Init+0x74>)
 80013d2:	f001 fbf5 	bl	8002bc0 <HAL_I2C_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013dc:	f000 f9fc 	bl	80017d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013e0:	2100      	movs	r1, #0
 80013e2:	4809      	ldr	r0, [pc, #36]	; (8001408 <MX_I2C1_Init+0x74>)
 80013e4:	f002 f837 	bl	8003456 <HAL_I2CEx_ConfigAnalogFilter>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013ee:	f000 f9f3 	bl	80017d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_I2C1_Init+0x74>)
 80013f6:	f002 f86a 	bl	80034ce <HAL_I2CEx_ConfigDigitalFilter>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001400:	f000 f9ea 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200002b4 	.word	0x200002b4
 800140c:	40005400 	.word	0x40005400
 8001410:	000186a0 	.word	0x000186a0

08001414 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	; 0x38
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001444:	4b32      	ldr	r3, [pc, #200]	; (8001510 <MX_TIM3_Init+0xfc>)
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <MX_TIM3_Init+0x100>)
 8001448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_TIM3_Init+0xfc>)
 800144c:	2253      	movs	r2, #83	; 0x53
 800144e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <MX_TIM3_Init+0xfc>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_TIM3_Init+0xfc>)
 8001458:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800145c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM3_Init+0xfc>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM3_Init+0xfc>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146a:	4829      	ldr	r0, [pc, #164]	; (8001510 <MX_TIM3_Init+0xfc>)
 800146c:	f002 fe24 	bl	80040b8 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001476:	f000 f9af 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001484:	4619      	mov	r1, r3
 8001486:	4822      	ldr	r0, [pc, #136]	; (8001510 <MX_TIM3_Init+0xfc>)
 8001488:	f003 f8b2 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001492:	f000 f9a1 	bl	80017d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001496:	481e      	ldr	r0, [pc, #120]	; (8001510 <MX_TIM3_Init+0xfc>)
 8001498:	f002 fec6 	bl	8004228 <HAL_TIM_PWM_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014a2:	f000 f999 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	4619      	mov	r1, r3
 80014b4:	4816      	ldr	r0, [pc, #88]	; (8001510 <MX_TIM3_Init+0xfc>)
 80014b6:	f003 fc73 	bl	8004da0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014c0:	f000 f98a 	bl	80017d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	2360      	movs	r3, #96	; 0x60
 80014c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_TIM3_Init+0xfc>)
 80014dc:	f002 ffc6 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014e6:	f000 f977 	bl	80017d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2204      	movs	r2, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM3_Init+0xfc>)
 80014f2:	f002 ffbb 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014fc:	f000 f96c 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM3_Init+0xfc>)
 8001502:	f000 fac7 	bl	8001a94 <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000308 	.word	0x20000308
 8001514:	40000400 	.word	0x40000400

08001518 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART3_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 8001524:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001528:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART3_UART_Init+0x4c>)
 8001550:	f003 fca2 	bl	8004e98 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f000 f93d 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000350 	.word	0x20000350
 8001568:	40004800 	.word	0x40004800

0800156c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001576:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157a:	2204      	movs	r2, #4
 800157c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001580:	2202      	movs	r2, #2
 8001582:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158c:	2202      	movs	r2, #2
 800158e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001592:	2201      	movs	r2, #1
 8001594:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b0:	f001 ffcc 	bl	800354c <HAL_PCD_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015ba:	f000 f90d 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000394 	.word	0x20000394

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a76      	ldr	r2, [pc, #472]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a6f      	ldr	r2, [pc, #444]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b69      	ldr	r3, [pc, #420]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a68      	ldr	r2, [pc, #416]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b62      	ldr	r3, [pc, #392]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a61      	ldr	r2, [pc, #388]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b5b      	ldr	r3, [pc, #364]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a5a      	ldr	r2, [pc, #360]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b58      	ldr	r3, [pc, #352]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a53      	ldr	r2, [pc, #332]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <MX_GPIO_Init+0x1f8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2128      	movs	r1, #40	; 0x28
 80016a6:	4847      	ldr	r0, [pc, #284]	; (80017c4 <MX_GPIO_Init+0x1fc>)
 80016a8:	f001 fa70 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f244 0181 	movw	r1, #16513	; 0x4081
 80016b2:	4845      	ldr	r0, [pc, #276]	; (80017c8 <MX_GPIO_Init+0x200>)
 80016b4:	f001 fa6a 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80016be:	4843      	ldr	r0, [pc, #268]	; (80017cc <MX_GPIO_Init+0x204>)
 80016c0:	f001 fa64 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2140      	movs	r1, #64	; 0x40
 80016c8:	4841      	ldr	r0, [pc, #260]	; (80017d0 <MX_GPIO_Init+0x208>)
 80016ca:	f001 fa5f 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80016d4:	483f      	ldr	r0, [pc, #252]	; (80017d4 <MX_GPIO_Init+0x20c>)
 80016d6:	f001 fa59 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4838      	ldr	r0, [pc, #224]	; (80017d4 <MX_GPIO_Init+0x20c>)
 80016f2:	f001 f887 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80016f6:	2328      	movs	r3, #40	; 0x28
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	482d      	ldr	r0, [pc, #180]	; (80017c4 <MX_GPIO_Init+0x1fc>)
 800170e:	f001 f879 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001712:	f244 0381 	movw	r3, #16513	; 0x4081
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <MX_GPIO_Init+0x200>)
 800172c:	f001 f86a 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001730:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4820      	ldr	r0, [pc, #128]	; (80017cc <MX_GPIO_Init+0x204>)
 800174a:	f001 f85b 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800174e:	2340      	movs	r3, #64	; 0x40
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	481a      	ldr	r0, [pc, #104]	; (80017d0 <MX_GPIO_Init+0x208>)
 8001766:	f001 f84d 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4814      	ldr	r0, [pc, #80]	; (80017d0 <MX_GPIO_Init+0x208>)
 800177e:	f001 f841 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001782:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <MX_GPIO_Init+0x20c>)
 800179c:	f001 f832 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017a0:	23f0      	movs	r3, #240	; 0xf0
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <MX_GPIO_Init+0x204>)
 80017b4:	f001 f826 	bl	8002804 <HAL_GPIO_Init>

}
 80017b8:	bf00      	nop
 80017ba:	3730      	adds	r7, #48	; 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40021400 	.word	0x40021400
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40020800 	.word	0x40020800

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>
	...

080017e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_MspInit+0x4c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	; 0x38
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a55      	ldr	r2, [pc, #340]	; (80019a8 <HAL_ETH_MspInit+0x174>)
 8001852:	4293      	cmp	r3, r2
 8001854:	f040 80a4 	bne.w	80019a0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_ETH_MspInit+0x178>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_ETH_MspInit+0x178>)
 8001862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001866:	6313      	str	r3, [r2, #48]	; 0x30
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_ETH_MspInit+0x178>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	623b      	str	r3, [r7, #32]
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <HAL_ETH_MspInit+0x178>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_ETH_MspInit+0x178>)
 800187e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001882:	6313      	str	r3, [r2, #48]	; 0x30
 8001884:	4b49      	ldr	r3, [pc, #292]	; (80019ac <HAL_ETH_MspInit+0x178>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	4b45      	ldr	r3, [pc, #276]	; (80019ac <HAL_ETH_MspInit+0x178>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4a44      	ldr	r2, [pc, #272]	; (80019ac <HAL_ETH_MspInit+0x178>)
 800189a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800189e:	6313      	str	r3, [r2, #48]	; 0x30
 80018a0:	4b42      	ldr	r3, [pc, #264]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6313      	str	r3, [r2, #48]	; 0x30
 80018bc:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	4b37      	ldr	r3, [pc, #220]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a36      	ldr	r2, [pc, #216]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	6313      	str	r3, [r2, #48]	; 0x30
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_ETH_MspInit+0x178>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_ETH_MspInit+0x178>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4a28      	ldr	r2, [pc, #160]	; (80019ac <HAL_ETH_MspInit+0x178>)
 800190a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800190e:	6313      	str	r3, [r2, #48]	; 0x30
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_ETH_MspInit+0x178>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800191c:	2332      	movs	r3, #50	; 0x32
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800192c:	230b      	movs	r3, #11
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	481e      	ldr	r0, [pc, #120]	; (80019b0 <HAL_ETH_MspInit+0x17c>)
 8001938:	f000 ff64 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800193c:	2386      	movs	r3, #134	; 0x86
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800194c:	230b      	movs	r3, #11
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	4817      	ldr	r0, [pc, #92]	; (80019b4 <HAL_ETH_MspInit+0x180>)
 8001958:	f000 ff54 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800195c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800196e:	230b      	movs	r3, #11
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	480f      	ldr	r0, [pc, #60]	; (80019b8 <HAL_ETH_MspInit+0x184>)
 800197a:	f000 ff43 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800197e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001990:	230b      	movs	r3, #11
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <HAL_ETH_MspInit+0x188>)
 800199c:	f000 ff32 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3738      	adds	r7, #56	; 0x38
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40028000 	.word	0x40028000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40021800 	.word	0x40021800

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_I2C_MspInit+0x84>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d12c      	bne.n	8001a3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80019fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a04:	2312      	movs	r3, #18
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a10:	2304      	movs	r3, #4
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480c      	ldr	r0, [pc, #48]	; (8001a4c <HAL_I2C_MspInit+0x8c>)
 8001a1c:	f000 fef2 	bl	8002804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40005400 	.word	0x40005400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020400 	.word	0x40020400

08001a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_TIM_Base_MspInit+0x3c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10d      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40000400 	.word	0x40000400
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <HAL_TIM_MspPostInit+0xa4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d13b      	bne.n	8001b2e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_TIM_MspPostInit+0xa8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_TIM_MspPostInit+0xa8>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_TIM_MspPostInit+0xa8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_TIM_MspPostInit+0xa8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_TIM_MspPostInit+0xa8>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_TIM_MspPostInit+0xa8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aee:	2340      	movs	r3, #64	; 0x40
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001afe:	2302      	movs	r3, #2
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <HAL_TIM_MspPostInit+0xac>)
 8001b0a:	f000 fe7b 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4806      	ldr	r0, [pc, #24]	; (8001b44 <HAL_TIM_MspPostInit+0xb0>)
 8001b2a:	f000 fe6b 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	; 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020800 	.word	0x40020800

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <HAL_UART_MspInit+0x84>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d12c      	bne.n	8001bc4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_UART_MspInit+0x8c>)
 8001bc0:	f000 fe20 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40004800 	.word	0x40004800
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020c00 	.word	0x40020c00

08001bd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf8:	d13f      	bne.n	8001c7a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_PCD_MspInit+0xac>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <HAL_PCD_MspInit+0xac>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_PCD_MspInit+0xac>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c28:	230a      	movs	r3, #10
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4815      	ldr	r0, [pc, #84]	; (8001c88 <HAL_PCD_MspInit+0xb0>)
 8001c34:	f000 fde6 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480e      	ldr	r0, [pc, #56]	; (8001c88 <HAL_PCD_MspInit+0xb0>)
 8001c4e:	f000 fdd9 	bl	8002804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_PCD_MspInit+0xac>)
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <HAL_PCD_MspInit+0xac>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5c:	6353      	str	r3, [r2, #52]	; 0x34
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_PCD_MspInit+0xac>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_PCD_MspInit+0xac>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_PCD_MspInit+0xac>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 f956 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	return 1;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_kill>:

int _kill(int pid, int sig)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cfa:	f004 f837 	bl	8005d6c <__errno>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2216      	movs	r2, #22
 8001d02:	601a      	str	r2, [r3, #0]
	return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_exit>:

void _exit (int status)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ffe7 	bl	8001cf0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d22:	e7fe      	b.n	8001d22 <_exit+0x12>

08001d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e00a      	b.n	8001d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d36:	f3af 8000 	nop.w
 8001d3a:	4601      	mov	r1, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbf0      	blt.n	8001d36 <_read+0x12>
	}

return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e009      	b.n	8001d84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	60ba      	str	r2, [r7, #8]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf1      	blt.n	8001d70 <_write+0x12>
	}
	return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_close>:

int _close(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_isatty>:

int _isatty(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
	return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f003 ff9c 	bl	8005d6c <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20030000 	.word	0x20030000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	200008ac 	.word	0x200008ac
 8001e68:	200008c8 	.word	0x200008c8

08001e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <SystemInit+0x20>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <SystemInit+0x20>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e96:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e98:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eac:	4c0b      	ldr	r4, [pc, #44]	; (8001edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eba:	f7ff ffd7 	bl	8001e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f003 ff5b 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec2:	f7ff f967 	bl	8001194 <main>
  bx  lr    
 8001ec6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ec8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ed4:	080076a0 	.word	0x080076a0
  ldr r2, =_sbss
 8001ed8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001edc:	200008c4 	.word	0x200008c4

08001ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>
	...

08001ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_Init+0x40>)
 8001eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_Init+0x40>)
 8001efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_Init+0x40>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f931 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f808 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7ff fc64 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x54>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x58>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f93b 	bl	80021c2 <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f000 f911 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_InitTick+0x5c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_IncTick+0x24>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_IncTick+0x24>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	200008b0 	.word	0x200008b0

08001fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_GetTick+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	200008b0 	.word	0x200008b0

08001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff ffee 	bl	8001fb0 <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fee:	bf00      	nop
 8001ff0:	f7ff ffde 	bl	8001fb0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	; (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff8e 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff47 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff5c 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ff8e 	bl	80020c8 <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffb0 	bl	8002130 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e06c      	b.n	80022c8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2223      	movs	r2, #35	; 0x23
 80021fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fb17 	bl	8001834 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_ETH_Init+0xf4>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <HAL_ETH_Init+0xf4>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_ETH_Init+0xf4>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_ETH_Init+0xf8>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <HAL_ETH_Init+0xf8>)
 8002228:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800222c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_ETH_Init+0xf8>)
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4927      	ldr	r1, [pc, #156]	; (80022d4 <HAL_ETH_Init+0xf8>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <HAL_ETH_Init+0xf8>)
 800223e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002256:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002258:	f7ff feaa 	bl	8001fb0 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800225e:	e011      	b.n	8002284 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002260:	f7ff fea6 	bl	8001fb0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800226e:	d909      	bls.n	8002284 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2204      	movs	r2, #4
 8002274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	22e0      	movs	r2, #224	; 0xe0
 800227c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e021      	b.n	80022c8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e4      	bne.n	8002260 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f944 	bl	8002524 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f9eb 	bl	8002678 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fa41 	bl	800272a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	461a      	mov	r2, r3
 80022ae:	2100      	movs	r1, #0
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9a9 	bl	8002608 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2210      	movs	r2, #16
 80022c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40013800 	.word	0x40013800

080022d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4b47      	ldr	r3, [pc, #284]	; (800240c <ETH_SetMACConfig+0x134>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	7c1b      	ldrb	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <ETH_SetMACConfig+0x28>
 80022fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022fe:	e000      	b.n	8002302 <ETH_SetMACConfig+0x2a>
 8002300:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	7c5b      	ldrb	r3, [r3, #17]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <ETH_SetMACConfig+0x38>
 800230a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800230e:	e000      	b.n	8002312 <ETH_SetMACConfig+0x3a>
 8002310:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002312:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002318:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	7fdb      	ldrb	r3, [r3, #31]
 800231e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002320:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002326:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	7f92      	ldrb	r2, [r2, #30]
 800232c:	2a00      	cmp	r2, #0
 800232e:	d102      	bne.n	8002336 <ETH_SetMACConfig+0x5e>
 8002330:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002334:	e000      	b.n	8002338 <ETH_SetMACConfig+0x60>
 8002336:	2200      	movs	r2, #0
                        macconf->Speed |
 8002338:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	7f1b      	ldrb	r3, [r3, #28]
 800233e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002340:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002346:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	791b      	ldrb	r3, [r3, #4]
 800234c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800234e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002356:	2a00      	cmp	r2, #0
 8002358:	d102      	bne.n	8002360 <ETH_SetMACConfig+0x88>
 800235a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800235e:	e000      	b.n	8002362 <ETH_SetMACConfig+0x8a>
 8002360:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002362:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	7bdb      	ldrb	r3, [r3, #15]
 8002368:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800236a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002370:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002378:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800237a:	4313      	orrs	r3, r2
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff fe18 	bl	8001fc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023be:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80023c4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80023cc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80023d4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023dc:	4313      	orrs	r3, r2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7ff fde7 	bl	8001fc8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	ff20810f 	.word	0xff20810f

08002410 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <ETH_SetDMAConfig+0x110>)
 800242a:	4013      	ands	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7b1b      	ldrb	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <ETH_SetDMAConfig+0x2c>
 8002436:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800243a:	e000      	b.n	800243e <ETH_SetDMAConfig+0x2e>
 800243c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7b5b      	ldrb	r3, [r3, #13]
 8002442:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002444:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	7f52      	ldrb	r2, [r2, #29]
 800244a:	2a00      	cmp	r2, #0
 800244c:	d102      	bne.n	8002454 <ETH_SetDMAConfig+0x44>
 800244e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002452:	e000      	b.n	8002456 <ETH_SetDMAConfig+0x46>
 8002454:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002456:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7b9b      	ldrb	r3, [r3, #14]
 800245c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800245e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002464:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	7f1b      	ldrb	r3, [r3, #28]
 800246a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800246c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	7f9b      	ldrb	r3, [r3, #30]
 8002472:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002474:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800247a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002482:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002484:	4313      	orrs	r3, r2
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002494:	461a      	mov	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7ff fd8e 	bl	8001fc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	461a      	mov	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	791b      	ldrb	r3, [r3, #4]
 80024be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002504:	2001      	movs	r0, #1
 8002506:	f7ff fd5f 	bl	8001fc8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	f8de3f23 	.word	0xf8de3f23

08002524 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0a6      	sub	sp, #152	; 0x98
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002542:	2301      	movs	r3, #1
 8002544:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002560:	2300      	movs	r3, #0
 8002562:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800256a:	2300      	movs	r3, #0
 800256c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800258a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800258c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002598:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800259c:	4619      	mov	r1, r3
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fe9a 	bl	80022d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ff08 	bl	8002410 <ETH_SetDMAConfig>
}
 8002600:	bf00      	nop
 8002602:	3798      	adds	r7, #152	; 0x98
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3305      	adds	r3, #5
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	3204      	adds	r2, #4
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <ETH_MACAddressConfig+0x68>)
 800262a:	4413      	add	r3, r2
 800262c:	461a      	mov	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3303      	adds	r3, #3
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	061a      	lsls	r2, r3, #24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3302      	adds	r3, #2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3301      	adds	r3, #1
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	4313      	orrs	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	7812      	ldrb	r2, [r2, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <ETH_MACAddressConfig+0x6c>)
 800265a:	4413      	add	r3, r2
 800265c:	461a      	mov	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6013      	str	r3, [r2, #0]
}
 8002662:	bf00      	nop
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40028040 	.word	0x40028040
 8002674:	40028044 	.word	0x40028044

08002678 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e03e      	b.n	8002704 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68d9      	ldr	r1, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	3206      	adds	r2, #6
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d80c      	bhi.n	80026e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68d9      	ldr	r1, [r3, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	e004      	b.n	80026f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d9bd      	bls.n	8002686 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	611a      	str	r2, [r3, #16]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e046      	b.n	80027c6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6919      	ldr	r1, [r3, #16]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002774:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800277c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	3212      	adds	r2, #18
 8002792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d80c      	bhi.n	80027b6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6919      	ldr	r1, [r3, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	461a      	mov	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	e004      	b.n	80027c0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d9b5      	bls.n	8002738 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f6:	60da      	str	r2, [r3, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e177      	b.n	8002b10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 8166 	bne.w	8002b0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d005      	beq.n	8002856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	2b02      	cmp	r3, #2
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80c0 	beq.w	8002b0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b66      	ldr	r3, [pc, #408]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_GPIO_Init+0x324>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a61      	ldr	r2, [pc, #388]	; (8002b2c <HAL_GPIO_Init+0x328>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_GPIO_Init+0x32c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d037      	beq.n	8002a42 <HAL_GPIO_Init+0x23e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a57      	ldr	r2, [pc, #348]	; (8002b34 <HAL_GPIO_Init+0x330>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d031      	beq.n	8002a3e <HAL_GPIO_Init+0x23a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a56      	ldr	r2, [pc, #344]	; (8002b38 <HAL_GPIO_Init+0x334>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <HAL_GPIO_Init+0x236>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a55      	ldr	r2, [pc, #340]	; (8002b3c <HAL_GPIO_Init+0x338>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d025      	beq.n	8002a36 <HAL_GPIO_Init+0x232>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a54      	ldr	r2, [pc, #336]	; (8002b40 <HAL_GPIO_Init+0x33c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01f      	beq.n	8002a32 <HAL_GPIO_Init+0x22e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a53      	ldr	r2, [pc, #332]	; (8002b44 <HAL_GPIO_Init+0x340>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x22a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_GPIO_Init+0x344>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a51      	ldr	r2, [pc, #324]	; (8002b4c <HAL_GPIO_Init+0x348>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x222>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a50      	ldr	r2, [pc, #320]	; (8002b50 <HAL_GPIO_Init+0x34c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x21e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4f      	ldr	r2, [pc, #316]	; (8002b54 <HAL_GPIO_Init+0x350>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x21a>
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	e012      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a1e:	230a      	movs	r3, #10
 8002a20:	e010      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a22:	2308      	movs	r3, #8
 8002a24:	e00e      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a26:	2307      	movs	r3, #7
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x240>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4935      	ldr	r1, [pc, #212]	; (8002b2c <HAL_GPIO_Init+0x328>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a62:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_GPIO_Init+0x354>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a86:	4a34      	ldr	r2, [pc, #208]	; (8002b58 <HAL_GPIO_Init+0x354>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8c:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_GPIO_Init+0x354>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab0:	4a29      	ldr	r2, [pc, #164]	; (8002b58 <HAL_GPIO_Init+0x354>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab6:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <HAL_GPIO_Init+0x354>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ada:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <HAL_GPIO_Init+0x354>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_GPIO_Init+0x354>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <HAL_GPIO_Init+0x354>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f ae84 	bls.w	8002820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40021800 	.word	0x40021800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40022400 	.word	0x40022400
 8002b58:	40013c00 	.word	0x40013c00

08002b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	e001      	b.n	8002b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e12b      	b.n	8002e2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe feea 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c24:	f001 fa20 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8002c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4a81      	ldr	r2, [pc, #516]	; (8002e34 <HAL_I2C_Init+0x274>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d807      	bhi.n	8002c44 <HAL_I2C_Init+0x84>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a80      	ldr	r2, [pc, #512]	; (8002e38 <HAL_I2C_Init+0x278>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	bf94      	ite	ls
 8002c3c:	2301      	movls	r3, #1
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e006      	b.n	8002c52 <HAL_I2C_Init+0x92>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a7d      	ldr	r2, [pc, #500]	; (8002e3c <HAL_I2C_Init+0x27c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0e7      	b.n	8002e2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a78      	ldr	r2, [pc, #480]	; (8002e40 <HAL_I2C_Init+0x280>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9b      	lsrs	r3, r3, #18
 8002c64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a6a      	ldr	r2, [pc, #424]	; (8002e34 <HAL_I2C_Init+0x274>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d802      	bhi.n	8002c94 <HAL_I2C_Init+0xd4>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3301      	adds	r3, #1
 8002c92:	e009      	b.n	8002ca8 <HAL_I2C_Init+0xe8>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	4a69      	ldr	r2, [pc, #420]	; (8002e44 <HAL_I2C_Init+0x284>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	495c      	ldr	r1, [pc, #368]	; (8002e34 <HAL_I2C_Init+0x274>)
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	d819      	bhi.n	8002cfc <HAL_I2C_Init+0x13c>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1e59      	subs	r1, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd6:	1c59      	adds	r1, r3, #1
 8002cd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cdc:	400b      	ands	r3, r1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_I2C_Init+0x138>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1e59      	subs	r1, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf6:	e051      	b.n	8002d9c <HAL_I2C_Init+0x1dc>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	e04f      	b.n	8002d9c <HAL_I2C_Init+0x1dc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d111      	bne.n	8002d28 <HAL_I2C_Init+0x168>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e58      	subs	r0, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e012      	b.n	8002d4e <HAL_I2C_Init+0x18e>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	0099      	lsls	r1, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Init+0x196>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e022      	b.n	8002d9c <HAL_I2C_Init+0x1dc>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10e      	bne.n	8002d7c <HAL_I2C_Init+0x1bc>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1e58      	subs	r0, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	440b      	add	r3, r1
 8002d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7a:	e00f      	b.n	8002d9c <HAL_I2C_Init+0x1dc>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	0099      	lsls	r1, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	6809      	ldr	r1, [r1, #0]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6911      	ldr	r1, [r2, #16]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68d2      	ldr	r2, [r2, #12]
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	000186a0 	.word	0x000186a0
 8002e38:	001e847f 	.word	0x001e847f
 8002e3c:	003d08ff 	.word	0x003d08ff
 8002e40:	431bde83 	.word	0x431bde83
 8002e44:	10624dd3 	.word	0x10624dd3

08002e48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	461a      	mov	r2, r3
 8002e54:	460b      	mov	r3, r1
 8002e56:	817b      	strh	r3, [r7, #10]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff f8a8 	bl	8001fb0 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	f040 80e0 	bne.w	8003030 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	2319      	movs	r3, #25
 8002e76:	2201      	movs	r2, #1
 8002e78:	4970      	ldr	r1, [pc, #448]	; (800303c <HAL_I2C_Master_Transmit+0x1f4>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f964 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0d3      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_I2C_Master_Transmit+0x50>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e0cc      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d007      	beq.n	8002ebe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ecc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2221      	movs	r2, #33	; 0x21
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	893a      	ldrh	r2, [r7, #8]
 8002eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_I2C_Master_Transmit+0x1f8>)
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f00:	8979      	ldrh	r1, [r7, #10]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f89c 	bl	8003044 <I2C_MasterRequestWrite>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e08d      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f2c:	e066      	b.n	8002ffc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	6a39      	ldr	r1, [r7, #32]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f9de 	bl	80032f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d107      	bne.n	8002f56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e06b      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d11b      	bne.n	8002fd0 <HAL_I2C_Master_Transmit+0x188>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d017      	beq.n	8002fd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	6a39      	ldr	r1, [r7, #32]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f9ce 	bl	8003376 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d107      	bne.n	8002ff8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e01a      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d194      	bne.n	8002f2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	00100002 	.word	0x00100002
 8003040:	ffff0000 	.word	0xffff0000

08003044 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d006      	beq.n	800306e <I2C_MasterRequestWrite+0x2a>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d003      	beq.n	800306e <I2C_MasterRequestWrite+0x2a>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800306c:	d108      	bne.n	8003080 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e00b      	b.n	8003098 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2b12      	cmp	r3, #18
 8003086:	d107      	bne.n	8003098 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f84f 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030be:	d103      	bne.n	80030c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e035      	b.n	8003138 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d4:	d108      	bne.n	80030e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030d6:	897b      	ldrh	r3, [r7, #10]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030e4:	611a      	str	r2, [r3, #16]
 80030e6:	e01b      	b.n	8003120 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030e8:	897b      	ldrh	r3, [r7, #10]
 80030ea:	11db      	asrs	r3, r3, #7
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f003 0306 	and.w	r3, r3, #6
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f063 030f 	orn	r3, r3, #15
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	490e      	ldr	r1, [pc, #56]	; (8003140 <I2C_MasterRequestWrite+0xfc>)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f875 	bl	80031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e010      	b.n	8003138 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003116:	897b      	ldrh	r3, [r7, #10]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4907      	ldr	r1, [pc, #28]	; (8003144 <I2C_MasterRequestWrite+0x100>)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f865 	bl	80031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	00010008 	.word	0x00010008
 8003144:	00010002 	.word	0x00010002

08003148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003158:	e025      	b.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d021      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe ff25 	bl	8001fb0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e023      	b.n	80031ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10d      	bne.n	80031cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	e00c      	b.n	80031e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf0c      	ite	eq
 80031de:	2301      	moveq	r3, #1
 80031e0:	2300      	movne	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d0b6      	beq.n	800315a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003204:	e051      	b.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003214:	d123      	bne.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003224:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800322e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0204 	orr.w	r2, r3, #4
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e046      	b.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d021      	beq.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fe fea3 	bl	8001fb0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d116      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e020      	b.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10c      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e00b      	b.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	43da      	mvns	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d18d      	bne.n	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003300:	e02d      	b.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f878 	bl	80033f8 <I2C_IsAcknowledgeFailed>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e02d      	b.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d021      	beq.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fe fe49 	bl	8001fb0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d116      	bne.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f043 0220 	orr.w	r2, r3, #32
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e007      	b.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d1ca      	bne.n	8003302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003382:	e02d      	b.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f837 	bl	80033f8 <I2C_IsAcknowledgeFailed>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e02d      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d021      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339c:	f7fe fe08 	bl	8001fb0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d116      	bne.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d1ca      	bne.n	8003384 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d11b      	bne.n	8003448 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003418:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b20      	cmp	r3, #32
 800346a:	d129      	bne.n	80034c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0210 	bic.w	r2, r2, #16
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d12a      	bne.n	800353e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2224      	movs	r2, #36	; 0x24
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	f023 030f 	bic.w	r3, r3, #15
 800350e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b29a      	uxth	r2, r3
 8003514:	89fb      	ldrh	r3, [r7, #14]
 8003516:	4313      	orrs	r3, r2
 8003518:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	89fa      	ldrh	r2, [r7, #14]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
  }
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800354c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354e:	b08f      	sub	sp, #60	; 0x3c
 8003550:	af0a      	add	r7, sp, #40	; 0x28
 8003552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e10f      	b.n	800377e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fe fb2d 	bl	8001bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2203      	movs	r2, #3
 8003582:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f002 f940 	bl	8005822 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	687e      	ldr	r6, [r7, #4]
 80035aa:	466d      	mov	r5, sp
 80035ac:	f106 0410 	add.w	r4, r6, #16
 80035b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80035c0:	1d33      	adds	r3, r6, #4
 80035c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c4:	6838      	ldr	r0, [r7, #0]
 80035c6:	f002 f8cb 	bl	8005760 <USB_CoreInit>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0d0      	b.n	800377e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 f92e 	bl	8005844 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	73fb      	strb	r3, [r7, #15]
 80035ec:	e04a      	b.n	8003684 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	333d      	adds	r3, #61	; 0x3d
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	333c      	adds	r3, #60	; 0x3c
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	b298      	uxth	r0, r3
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3344      	adds	r3, #68	; 0x44
 800362a:	4602      	mov	r2, r0
 800362c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3340      	adds	r3, #64	; 0x40
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3348      	adds	r3, #72	; 0x48
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	334c      	adds	r3, #76	; 0x4c
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3354      	adds	r3, #84	; 0x54
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	3301      	adds	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	d3af      	bcc.n	80035ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	e044      	b.n	800371e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	3301      	adds	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d3b5      	bcc.n	8003694 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	687e      	ldr	r6, [r7, #4]
 8003730:	466d      	mov	r5, sp
 8003732:	f106 0410 	add.w	r4, r6, #16
 8003736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003742:	e885 0003 	stmia.w	r5, {r0, r1}
 8003746:	1d33      	adds	r3, r6, #4
 8003748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800374a:	6838      	ldr	r0, [r7, #0]
 800374c:	f002 f8c6 	bl	80058dc <USB_DevInit>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e00d      	b.n	800377e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f002 fa91 	bl	8005c9e <USB_DevDisconnect>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e267      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d075      	beq.n	8003892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037a6:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d00c      	beq.n	80037cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b2:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d112      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b82      	ldr	r3, [pc, #520]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	4b7e      	ldr	r3, [pc, #504]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d05b      	beq.n	8003890 <HAL_RCC_OscConfig+0x108>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d157      	bne.n	8003890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e242      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ec:	d106      	bne.n	80037fc <HAL_RCC_OscConfig+0x74>
 80037ee:	4b76      	ldr	r3, [pc, #472]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a75      	ldr	r2, [pc, #468]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x98>
 8003806:	4b70      	ldr	r3, [pc, #448]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6f      	ldr	r2, [pc, #444]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b6d      	ldr	r3, [pc, #436]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6c      	ldr	r2, [pc, #432]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 8003820:	4b69      	ldr	r3, [pc, #420]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a68      	ldr	r2, [pc, #416]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fbb6 	bl	8001fb0 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe fbb2 	bl	8001fb0 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e207      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xc0>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe fba2 	bl	8001fb0 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003870:	f7fe fb9e 	bl	8001fb0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1f3      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0xe8>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d11c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCC_OscConfig+0x152>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1c7      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4937      	ldr	r1, [pc, #220]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	e03a      	b.n	8003966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f8:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_OscConfig+0x244>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe fb57 	bl	8001fb0 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003906:	f7fe fb53 	bl	8001fb0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1a8      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4925      	ldr	r1, [pc, #148]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCC_OscConfig+0x244>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe fb36 	bl	8001fb0 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003948:	f7fe fb32 	bl	8001fb0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e187      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d036      	beq.n	80039e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_RCC_OscConfig+0x248>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fe fb16 	bl	8001fb0 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe fb12 	bl	8001fb0 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e167      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x200>
 80039a6:	e01b      	b.n	80039e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_OscConfig+0x248>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ae:	f7fe faff 	bl	8001fb0 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	e00e      	b.n	80039d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fe fafb 	bl	8001fb0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d907      	bls.n	80039d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e150      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
 80039c8:	40023800 	.word	0x40023800
 80039cc:	42470000 	.word	0x42470000
 80039d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 80039d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ea      	bne.n	80039b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8097 	beq.w	8003b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	4b7d      	ldr	r3, [pc, #500]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a7c      	ldr	r2, [pc, #496]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b7a      	ldr	r3, [pc, #488]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4b77      	ldr	r3, [pc, #476]	; (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4b74      	ldr	r3, [pc, #464]	; (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a73      	ldr	r2, [pc, #460]	; (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fe fabb 	bl	8001fb0 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fe fab7 	bl	8001fb0 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e10c      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	4b6a      	ldr	r3, [pc, #424]	; (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2ea>
 8003a64:	4b64      	ldr	r3, [pc, #400]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a63      	ldr	r2, [pc, #396]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	e01c      	b.n	8003aac <HAL_RCC_OscConfig+0x324>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x30c>
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a5e      	ldr	r2, [pc, #376]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
 8003a86:	4b5c      	ldr	r3, [pc, #368]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0x324>
 8003a94:	4b58      	ldr	r3, [pc, #352]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a57      	ldr	r2, [pc, #348]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa0:	4b55      	ldr	r3, [pc, #340]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a54      	ldr	r2, [pc, #336]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 0304 	bic.w	r3, r3, #4
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fe fa7c 	bl	8001fb0 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003abc:	f7fe fa78 	bl	8001fb0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e0cb      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad2:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ee      	beq.n	8003abc <HAL_RCC_OscConfig+0x334>
 8003ade:	e014      	b.n	8003b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae0:	f7fe fa66 	bl	8001fb0 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fe fa62 	bl	8001fb0 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0b5      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afe:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ee      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b10:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	4a38      	ldr	r2, [pc, #224]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80a1 	beq.w	8003c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d05c      	beq.n	8003bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d141      	bne.n	8003bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fa36 	bl	8001fb0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe fa32 	bl	8001fb0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e087      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	491b      	ldr	r1, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fe fa0b 	bl	8001fb0 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fe fa07 	bl	8001fb0 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e05c      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x416>
 8003bbc:	e054      	b.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe f9f4 	bl	8001fb0 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe f9f0 	bl	8001fb0 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e045      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x444>
 8003bea:	e03d      	b.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e038      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x4ec>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d028      	beq.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d121      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d11a      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d111      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800

08003c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0cc      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b68      	ldr	r3, [pc, #416]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d90c      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b65      	ldr	r3, [pc, #404]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0b8      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d020      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ccc:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a58      	ldr	r2, [pc, #352]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce4:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b50      	ldr	r3, [pc, #320]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	494d      	ldr	r1, [pc, #308]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d044      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d119      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e067      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4934      	ldr	r1, [pc, #208]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fe f922 	bl	8001fb0 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fe f91e 	bl	8001fb0 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e04f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d20c      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e032      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4916      	ldr	r1, [pc, #88]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	490e      	ldr	r1, [pc, #56]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dfe:	f000 f821 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003e02:	4602      	mov	r2, r0
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	490a      	ldr	r1, [pc, #40]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	5ccb      	ldrb	r3, [r1, r3]
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe f882 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023c00 	.word	0x40023c00
 8003e34:	40023800 	.word	0x40023800
 8003e38:	08007430 	.word	0x08007430
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	20000004 	.word	0x20000004

08003e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e48:	b094      	sub	sp, #80	; 0x50
 8003e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e50:	2300      	movs	r3, #0
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e54:	2300      	movs	r3, #0
 8003e56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5c:	4b79      	ldr	r3, [pc, #484]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d00d      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x40>
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	f200 80e1 	bhi.w	8004030 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x34>
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e76:	e0db      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e78:	4b73      	ldr	r3, [pc, #460]	; (8004048 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e7c:	e0db      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7e:	4b73      	ldr	r3, [pc, #460]	; (800404c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e82:	e0d8      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e84:	4b6f      	ldr	r3, [pc, #444]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d063      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
 8003eae:	2300      	movs	r3, #0
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	f04f 0000 	mov.w	r0, #0
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	0159      	lsls	r1, r3, #5
 8003ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec8:	0150      	lsls	r0, r2, #5
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4621      	mov	r1, r4
 8003ed0:	1a51      	subs	r1, r2, r1
 8003ed2:	6139      	str	r1, [r7, #16]
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee8:	4659      	mov	r1, fp
 8003eea:	018b      	lsls	r3, r1, #6
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	018a      	lsls	r2, r1, #6
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	ebb2 0801 	subs.w	r8, r2, r1
 8003efc:	4659      	mov	r1, fp
 8003efe:	eb63 0901 	sbc.w	r9, r3, r1
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f16:	4690      	mov	r8, r2
 8003f18:	4699      	mov	r9, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	eb18 0303 	adds.w	r3, r8, r3
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	462b      	mov	r3, r5
 8003f24:	eb49 0303 	adc.w	r3, r9, r3
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f36:	4629      	mov	r1, r5
 8003f38:	024b      	lsls	r3, r1, #9
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f40:	4621      	mov	r1, r4
 8003f42:	024a      	lsls	r2, r1, #9
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f54:	f7fc f9a4 	bl	80002a0 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f60:	e058      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	f04f 0000 	mov.w	r0, #0
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	0159      	lsls	r1, r3, #5
 8003f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8e:	0150      	lsls	r0, r2, #5
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4641      	mov	r1, r8
 8003f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	00eb      	lsls	r3, r5, #3
 8003fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fca:	00e2      	lsls	r2, r4, #3
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	4643      	mov	r3, r8
 8003fd2:	18e3      	adds	r3, r4, r3
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	eb45 0303 	adc.w	r3, r5, r3
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fea:	4629      	mov	r1, r5
 8003fec:	028b      	lsls	r3, r1, #10
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	028a      	lsls	r2, r1, #10
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffe:	2200      	movs	r2, #0
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	61fa      	str	r2, [r7, #28]
 8004004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004008:	f7fc f94a 	bl	80002a0 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4613      	mov	r3, r2
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800402e:	e002      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetSysClockFreq+0x204>)
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004038:	4618      	mov	r0, r3
 800403a:	3750      	adds	r7, #80	; 0x50
 800403c:	46bd      	mov	sp, r7
 800403e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000000 	.word	0x20000000

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a9b      	lsrs	r3, r3, #10
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	08007440 	.word	0x08007440

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004094:	f7ff ffdc 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0b5b      	lsrs	r3, r3, #13
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	; (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	08007440 	.word	0x08007440

080040b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e041      	b.n	800414e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fcb6 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f000 fb42 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d001      	beq.n	8004170 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e046      	b.n	80041fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a23      	ldr	r2, [pc, #140]	; (800420c <HAL_TIM_Base_Start+0xb4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d022      	beq.n	80041c8 <HAL_TIM_Base_Start+0x70>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d01d      	beq.n	80041c8 <HAL_TIM_Base_Start+0x70>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_TIM_Base_Start+0xb8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_TIM_Base_Start+0x70>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <HAL_TIM_Base_Start+0xbc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <HAL_TIM_Base_Start+0x70>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <HAL_TIM_Base_Start+0xc0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <HAL_TIM_Base_Start+0x70>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1b      	ldr	r2, [pc, #108]	; (800421c <HAL_TIM_Base_Start+0xc4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_TIM_Base_Start+0x70>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a19      	ldr	r2, [pc, #100]	; (8004220 <HAL_TIM_Base_Start+0xc8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_TIM_Base_Start+0x70>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <HAL_TIM_Base_Start+0xcc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d111      	bne.n	80041ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d010      	beq.n	80041fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ea:	e007      	b.n	80041fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40010400 	.word	0x40010400
 8004220:	40014000 	.word	0x40014000
 8004224:	40001800 	.word	0x40001800

08004228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e041      	b.n	80042be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f839 	bl	80042c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f000 fa8a 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_TIM_PWM_Start+0x24>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e022      	b.n	8004346 <HAL_TIM_PWM_Start+0x6a>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b04      	cmp	r3, #4
 8004304:	d109      	bne.n	800431a <HAL_TIM_PWM_Start+0x3e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	e015      	b.n	8004346 <HAL_TIM_PWM_Start+0x6a>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d109      	bne.n	8004334 <HAL_TIM_PWM_Start+0x58>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	e008      	b.n	8004346 <HAL_TIM_PWM_Start+0x6a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b01      	cmp	r3, #1
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e07c      	b.n	8004448 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d104      	bne.n	800435e <HAL_TIM_PWM_Start+0x82>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800435c:	e013      	b.n	8004386 <HAL_TIM_PWM_Start+0xaa>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d104      	bne.n	800436e <HAL_TIM_PWM_Start+0x92>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800436c:	e00b      	b.n	8004386 <HAL_TIM_PWM_Start+0xaa>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d104      	bne.n	800437e <HAL_TIM_PWM_Start+0xa2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437c:	e003      	b.n	8004386 <HAL_TIM_PWM_Start+0xaa>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2201      	movs	r2, #1
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fce0 	bl	8004d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2d      	ldr	r2, [pc, #180]	; (8004450 <HAL_TIM_PWM_Start+0x174>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_PWM_Start+0xcc>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <HAL_TIM_PWM_Start+0x178>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_PWM_Start+0xd0>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <HAL_TIM_PWM_Start+0xd2>
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a22      	ldr	r2, [pc, #136]	; (8004450 <HAL_TIM_PWM_Start+0x174>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d01d      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <HAL_TIM_PWM_Start+0x17c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1d      	ldr	r2, [pc, #116]	; (800445c <HAL_TIM_PWM_Start+0x180>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_TIM_PWM_Start+0x184>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a16      	ldr	r2, [pc, #88]	; (8004454 <HAL_TIM_PWM_Start+0x178>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_TIM_PWM_Start+0x188>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIM_PWM_Start+0x136>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_TIM_PWM_Start+0x18c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d111      	bne.n	8004436 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d010      	beq.n	8004446 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	e007      	b.n	8004446 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800

0800446c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004486:	2302      	movs	r3, #2
 8004488:	e0ae      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b0c      	cmp	r3, #12
 8004496:	f200 809f 	bhi.w	80045d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080045d9 	.word	0x080045d9
 80044a8:	080045d9 	.word	0x080045d9
 80044ac:	080045d9 	.word	0x080045d9
 80044b0:	08004515 	.word	0x08004515
 80044b4:	080045d9 	.word	0x080045d9
 80044b8:	080045d9 	.word	0x080045d9
 80044bc:	080045d9 	.word	0x080045d9
 80044c0:	08004557 	.word	0x08004557
 80044c4:	080045d9 	.word	0x080045d9
 80044c8:	080045d9 	.word	0x080045d9
 80044cc:	080045d9 	.word	0x080045d9
 80044d0:	08004597 	.word	0x08004597
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f9f0 	bl	80048c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0208 	orr.w	r2, r2, #8
 80044ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0204 	bic.w	r2, r2, #4
 80044fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6999      	ldr	r1, [r3, #24]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	619a      	str	r2, [r3, #24]
      break;
 8004512:	e064      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fa40 	bl	80049a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800452e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6999      	ldr	r1, [r3, #24]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	619a      	str	r2, [r3, #24]
      break;
 8004554:	e043      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fa95 	bl	8004a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0208 	orr.w	r2, r2, #8
 8004570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0204 	bic.w	r2, r2, #4
 8004580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69d9      	ldr	r1, [r3, #28]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	61da      	str	r2, [r3, #28]
      break;
 8004594:	e023      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fae9 	bl	8004b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69d9      	ldr	r1, [r3, #28]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	021a      	lsls	r2, r3, #8
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	61da      	str	r2, [r3, #28]
      break;
 80045d6:	e002      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
      break;
 80045dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_TIM_ConfigClockSource+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e0b4      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x186>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800462a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004644:	d03e      	beq.n	80046c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	f200 8087 	bhi.w	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	f000 8086 	beq.w	8004762 <HAL_TIM_ConfigClockSource+0x172>
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d87f      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b70      	cmp	r3, #112	; 0x70
 800465e:	d01a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xa6>
 8004660:	2b70      	cmp	r3, #112	; 0x70
 8004662:	d87b      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d050      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x11a>
 8004668:	2b60      	cmp	r3, #96	; 0x60
 800466a:	d877      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d03c      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xfa>
 8004670:	2b50      	cmp	r3, #80	; 0x50
 8004672:	d873      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d058      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x13a>
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d86f      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d064      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d86b      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d060      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	2b20      	cmp	r3, #32
 800468a:	d867      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05c      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	2b10      	cmp	r3, #16
 8004692:	d05a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	e062      	b.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6899      	ldr	r1, [r3, #8]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f000 fb35 	bl	8004d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	609a      	str	r2, [r3, #8]
      break;
 80046c2:	e04f      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	6899      	ldr	r1, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f000 fb1e 	bl	8004d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e6:	609a      	str	r2, [r3, #8]
      break;
 80046e8:	e03c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 fa92 	bl	8004c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2150      	movs	r1, #80	; 0x50
 8004702:	4618      	mov	r0, r3
 8004704:	f000 faeb 	bl	8004cde <TIM_ITRx_SetConfig>
      break;
 8004708:	e02c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	461a      	mov	r2, r3
 8004718:	f000 fab1 	bl	8004c7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2160      	movs	r1, #96	; 0x60
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fadb 	bl	8004cde <TIM_ITRx_SetConfig>
      break;
 8004728:	e01c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fa72 	bl	8004c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	4618      	mov	r0, r3
 8004744:	f000 facb 	bl	8004cde <TIM_ITRx_SetConfig>
      break;
 8004748:	e00c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 fac2 	bl	8004cde <TIM_ITRx_SetConfig>
      break;
 800475a:	e003      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      break;
 8004760:	e000      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a40      	ldr	r2, [pc, #256]	; (8004894 <TIM_Base_SetConfig+0x114>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479e:	d00f      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a3d      	ldr	r2, [pc, #244]	; (8004898 <TIM_Base_SetConfig+0x118>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3c      	ldr	r2, [pc, #240]	; (800489c <TIM_Base_SetConfig+0x11c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a3b      	ldr	r2, [pc, #236]	; (80048a0 <TIM_Base_SetConfig+0x120>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <TIM_Base_SetConfig+0x124>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2f      	ldr	r2, [pc, #188]	; (8004894 <TIM_Base_SetConfig+0x114>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d02b      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e0:	d027      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2c      	ldr	r2, [pc, #176]	; (8004898 <TIM_Base_SetConfig+0x118>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d023      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <TIM_Base_SetConfig+0x11c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01f      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <TIM_Base_SetConfig+0x120>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01b      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <TIM_Base_SetConfig+0x124>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d017      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a28      	ldr	r2, [pc, #160]	; (80048a8 <TIM_Base_SetConfig+0x128>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a27      	ldr	r2, [pc, #156]	; (80048ac <TIM_Base_SetConfig+0x12c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00f      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a26      	ldr	r2, [pc, #152]	; (80048b0 <TIM_Base_SetConfig+0x130>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00b      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <TIM_Base_SetConfig+0x134>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <TIM_Base_SetConfig+0x138>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a23      	ldr	r2, [pc, #140]	; (80048bc <TIM_Base_SetConfig+0x13c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <TIM_Base_SetConfig+0x114>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0xf8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0c      	ldr	r2, [pc, #48]	; (80048a4 <TIM_Base_SetConfig+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d103      	bne.n	8004880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	615a      	str	r2, [r3, #20]
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40010000 	.word	0x40010000
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800
 80048a0:	40000c00 	.word	0x40000c00
 80048a4:	40010400 	.word	0x40010400
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800
 80048b4:	40001800 	.word	0x40001800
 80048b8:	40001c00 	.word	0x40001c00
 80048bc:	40002000 	.word	0x40002000

080048c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f023 0201 	bic.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 0302 	bic.w	r3, r3, #2
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a20      	ldr	r2, [pc, #128]	; (8004998 <TIM_OC1_SetConfig+0xd8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_OC1_SetConfig+0x64>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a1f      	ldr	r2, [pc, #124]	; (800499c <TIM_OC1_SetConfig+0xdc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d10c      	bne.n	800493e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 0308 	bic.w	r3, r3, #8
 800492a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 0304 	bic.w	r3, r3, #4
 800493c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a15      	ldr	r2, [pc, #84]	; (8004998 <TIM_OC1_SetConfig+0xd8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_OC1_SetConfig+0x8e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <TIM_OC1_SetConfig+0xdc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d111      	bne.n	8004972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800495c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	621a      	str	r2, [r3, #32]
}
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40010000 	.word	0x40010000
 800499c:	40010400 	.word	0x40010400

080049a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0210 	bic.w	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0320 	bic.w	r3, r3, #32
 80049ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <TIM_OC2_SetConfig+0xe4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC2_SetConfig+0x68>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a21      	ldr	r2, [pc, #132]	; (8004a88 <TIM_OC2_SetConfig+0xe8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10d      	bne.n	8004a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <TIM_OC2_SetConfig+0xe4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_OC2_SetConfig+0x94>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <TIM_OC2_SetConfig+0xe8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d113      	bne.n	8004a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	621a      	str	r2, [r3, #32]
}
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40010400 	.word	0x40010400

08004a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0303 	bic.w	r3, r3, #3
 8004ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a21      	ldr	r2, [pc, #132]	; (8004b6c <TIM_OC3_SetConfig+0xe0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_OC3_SetConfig+0x66>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a20      	ldr	r2, [pc, #128]	; (8004b70 <TIM_OC3_SetConfig+0xe4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10d      	bne.n	8004b0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <TIM_OC3_SetConfig+0xe0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_OC3_SetConfig+0x92>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <TIM_OC3_SetConfig+0xe4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d113      	bne.n	8004b46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	621a      	str	r2, [r3, #32]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40010400 	.word	0x40010400

08004b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	031b      	lsls	r3, r3, #12
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <TIM_OC4_SetConfig+0xa4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <TIM_OC4_SetConfig+0x68>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a11      	ldr	r2, [pc, #68]	; (8004c1c <TIM_OC4_SetConfig+0xa8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d109      	bne.n	8004bf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	019b      	lsls	r3, r3, #6
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	40010400 	.word	0x40010400

08004c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0201 	bic.w	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 030a 	bic.w	r3, r3, #10
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b087      	sub	sp, #28
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0210 	bic.w	r2, r3, #16
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	031b      	lsls	r3, r3, #12
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f043 0307 	orr.w	r3, r3, #7
 8004d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	609a      	str	r2, [r3, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	021a      	lsls	r2, r3, #8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	371c      	adds	r7, #28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	2201      	movs	r2, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	401a      	ands	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1a      	ldr	r2, [r3, #32]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e05a      	b.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e04:	d01d      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1b      	ldr	r2, [pc, #108]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10c      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40010400 	.word	0x40010400
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40001800 	.word	0x40001800

08004e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e03f      	b.n	8004f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc fe42 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f9cb 	bl	8005278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b08a      	sub	sp, #40	; 0x28
 8004f36:	af02      	add	r7, sp, #8
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d17c      	bne.n	800504c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_UART_Transmit+0x2c>
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e075      	b.n	800504e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Transmit+0x3e>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e06e      	b.n	800504e <HAL_UART_Transmit+0x11c>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2221      	movs	r2, #33	; 0x21
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f86:	f7fd f813 	bl	8001fb0 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa0:	d108      	bne.n	8004fb4 <HAL_UART_Transmit+0x82>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e003      	b.n	8004fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fc4:	e02a      	b.n	800501c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f8e2 	bl	800519a <UART_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e036      	b.n	800504e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	e007      	b.n	800500e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3301      	adds	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1cf      	bne.n	8004fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	2140      	movs	r1, #64	; 0x40
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f8b2 	bl	800519a <UART_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e006      	b.n	800504e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b08a      	sub	sp, #40	; 0x28
 800505a:	af02      	add	r7, sp, #8
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b20      	cmp	r3, #32
 8005074:	f040 808c 	bne.w	8005190 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_UART_Receive+0x2e>
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e084      	b.n	8005192 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_UART_Receive+0x40>
 8005092:	2302      	movs	r3, #2
 8005094:	e07d      	b.n	8005192 <HAL_UART_Receive+0x13c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2222      	movs	r2, #34	; 0x22
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b2:	f7fc ff7d 	bl	8001fb0 <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050cc:	d108      	bne.n	80050e0 <HAL_UART_Receive+0x8a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	e003      	b.n	80050e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80050f0:	e043      	b.n	800517a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2120      	movs	r1, #32
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f84c 	bl	800519a <UART_WaitOnFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e042      	b.n	8005192 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10c      	bne.n	800512c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	b29a      	uxth	r2, r3
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	3302      	adds	r3, #2
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e01f      	b.n	800516c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005134:	d007      	beq.n	8005146 <HAL_UART_Receive+0xf0>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <HAL_UART_Receive+0xfe>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e008      	b.n	8005166 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005160:	b2da      	uxtb	r2, r3
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3301      	adds	r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1b6      	bne.n	80050f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b090      	sub	sp, #64	; 0x40
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051aa:	e050      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d04c      	beq.n	800524e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0x30>
 80051ba:	f7fc fef9 	bl	8001fb0 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d241      	bcs.n	800524e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051ea:	637a      	str	r2, [r7, #52]	; 0x34
 80051ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e5      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3314      	adds	r3, #20
 8005204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	613b      	str	r3, [r7, #16]
   return(result);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	63bb      	str	r3, [r7, #56]	; 0x38
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800521e:	623a      	str	r2, [r7, #32]
 8005220:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	69f9      	ldr	r1, [r7, #28]
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	61bb      	str	r3, [r7, #24]
   return(result);
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e5      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e00f      	b.n	800526e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4013      	ands	r3, r2
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	bf0c      	ite	eq
 800525e:	2301      	moveq	r3, #1
 8005260:	2300      	movne	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	79fb      	ldrb	r3, [r7, #7]
 8005268:	429a      	cmp	r2, r3
 800526a:	d09f      	beq.n	80051ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3740      	adds	r7, #64	; 0x40
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800527c:	b0c0      	sub	sp, #256	; 0x100
 800527e:	af00      	add	r7, sp, #0
 8005280:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	68d9      	ldr	r1, [r3, #12]
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	ea40 0301 	orr.w	r3, r0, r1
 80052a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052d0:	f021 010c 	bic.w	r1, r1, #12
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052de:	430b      	orrs	r3, r1
 80052e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	6999      	ldr	r1, [r3, #24]
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	ea40 0301 	orr.w	r3, r0, r1
 80052fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	4b8f      	ldr	r3, [pc, #572]	; (8005544 <UART_SetConfig+0x2cc>)
 8005308:	429a      	cmp	r2, r3
 800530a:	d005      	beq.n	8005318 <UART_SetConfig+0xa0>
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b8d      	ldr	r3, [pc, #564]	; (8005548 <UART_SetConfig+0x2d0>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d104      	bne.n	8005322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005318:	f7fe feba 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 800531c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005320:	e003      	b.n	800532a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005322:	f7fe fea1 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8005326:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005334:	f040 810c 	bne.w	8005550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800533c:	2200      	movs	r2, #0
 800533e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005342:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800534a:	4622      	mov	r2, r4
 800534c:	462b      	mov	r3, r5
 800534e:	1891      	adds	r1, r2, r2
 8005350:	65b9      	str	r1, [r7, #88]	; 0x58
 8005352:	415b      	adcs	r3, r3
 8005354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800535a:	4621      	mov	r1, r4
 800535c:	eb12 0801 	adds.w	r8, r2, r1
 8005360:	4629      	mov	r1, r5
 8005362:	eb43 0901 	adc.w	r9, r3, r1
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800537a:	4690      	mov	r8, r2
 800537c:	4699      	mov	r9, r3
 800537e:	4623      	mov	r3, r4
 8005380:	eb18 0303 	adds.w	r3, r8, r3
 8005384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005388:	462b      	mov	r3, r5
 800538a:	eb49 0303 	adc.w	r3, r9, r3
 800538e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800539e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053a6:	460b      	mov	r3, r1
 80053a8:	18db      	adds	r3, r3, r3
 80053aa:	653b      	str	r3, [r7, #80]	; 0x50
 80053ac:	4613      	mov	r3, r2
 80053ae:	eb42 0303 	adc.w	r3, r2, r3
 80053b2:	657b      	str	r3, [r7, #84]	; 0x54
 80053b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053bc:	f7fa ff70 	bl	80002a0 <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4b61      	ldr	r3, [pc, #388]	; (800554c <UART_SetConfig+0x2d4>)
 80053c6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	011c      	lsls	r4, r3, #4
 80053ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80053e8:	415b      	adcs	r3, r3
 80053ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053f0:	4641      	mov	r1, r8
 80053f2:	eb12 0a01 	adds.w	sl, r2, r1
 80053f6:	4649      	mov	r1, r9
 80053f8:	eb43 0b01 	adc.w	fp, r3, r1
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800540c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005410:	4692      	mov	sl, r2
 8005412:	469b      	mov	fp, r3
 8005414:	4643      	mov	r3, r8
 8005416:	eb1a 0303 	adds.w	r3, sl, r3
 800541a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800541e:	464b      	mov	r3, r9
 8005420:	eb4b 0303 	adc.w	r3, fp, r3
 8005424:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005434:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800543c:	460b      	mov	r3, r1
 800543e:	18db      	adds	r3, r3, r3
 8005440:	643b      	str	r3, [r7, #64]	; 0x40
 8005442:	4613      	mov	r3, r2
 8005444:	eb42 0303 	adc.w	r3, r2, r3
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
 800544a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800544e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005452:	f7fa ff25 	bl	80002a0 <__aeabi_uldivmod>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4611      	mov	r1, r2
 800545c:	4b3b      	ldr	r3, [pc, #236]	; (800554c <UART_SetConfig+0x2d4>)
 800545e:	fba3 2301 	umull	r2, r3, r3, r1
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2264      	movs	r2, #100	; 0x64
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	1acb      	subs	r3, r1, r3
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005472:	4b36      	ldr	r3, [pc, #216]	; (800554c <UART_SetConfig+0x2d4>)
 8005474:	fba3 2302 	umull	r2, r3, r3, r2
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005480:	441c      	add	r4, r3
 8005482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005486:	2200      	movs	r2, #0
 8005488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800548c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005494:	4642      	mov	r2, r8
 8005496:	464b      	mov	r3, r9
 8005498:	1891      	adds	r1, r2, r2
 800549a:	63b9      	str	r1, [r7, #56]	; 0x38
 800549c:	415b      	adcs	r3, r3
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054a4:	4641      	mov	r1, r8
 80054a6:	1851      	adds	r1, r2, r1
 80054a8:	6339      	str	r1, [r7, #48]	; 0x30
 80054aa:	4649      	mov	r1, r9
 80054ac:	414b      	adcs	r3, r1
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054bc:	4659      	mov	r1, fp
 80054be:	00cb      	lsls	r3, r1, #3
 80054c0:	4651      	mov	r1, sl
 80054c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c6:	4651      	mov	r1, sl
 80054c8:	00ca      	lsls	r2, r1, #3
 80054ca:	4610      	mov	r0, r2
 80054cc:	4619      	mov	r1, r3
 80054ce:	4603      	mov	r3, r0
 80054d0:	4642      	mov	r2, r8
 80054d2:	189b      	adds	r3, r3, r2
 80054d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054d8:	464b      	mov	r3, r9
 80054da:	460a      	mov	r2, r1
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054f8:	460b      	mov	r3, r1
 80054fa:	18db      	adds	r3, r3, r3
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fe:	4613      	mov	r3, r2
 8005500:	eb42 0303 	adc.w	r3, r2, r3
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800550a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800550e:	f7fa fec7 	bl	80002a0 <__aeabi_uldivmod>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4b0d      	ldr	r3, [pc, #52]	; (800554c <UART_SetConfig+0x2d4>)
 8005518:	fba3 1302 	umull	r1, r3, r3, r2
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	2164      	movs	r1, #100	; 0x64
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	3332      	adds	r3, #50	; 0x32
 800552a:	4a08      	ldr	r2, [pc, #32]	; (800554c <UART_SetConfig+0x2d4>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	f003 0207 	and.w	r2, r3, #7
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4422      	add	r2, r4
 800553e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005540:	e105      	b.n	800574e <UART_SetConfig+0x4d6>
 8005542:	bf00      	nop
 8005544:	40011000 	.word	0x40011000
 8005548:	40011400 	.word	0x40011400
 800554c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005554:	2200      	movs	r2, #0
 8005556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800555a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800555e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005562:	4642      	mov	r2, r8
 8005564:	464b      	mov	r3, r9
 8005566:	1891      	adds	r1, r2, r2
 8005568:	6239      	str	r1, [r7, #32]
 800556a:	415b      	adcs	r3, r3
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
 800556e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005572:	4641      	mov	r1, r8
 8005574:	1854      	adds	r4, r2, r1
 8005576:	4649      	mov	r1, r9
 8005578:	eb43 0501 	adc.w	r5, r3, r1
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	00eb      	lsls	r3, r5, #3
 8005586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800558a:	00e2      	lsls	r2, r4, #3
 800558c:	4614      	mov	r4, r2
 800558e:	461d      	mov	r5, r3
 8005590:	4643      	mov	r3, r8
 8005592:	18e3      	adds	r3, r4, r3
 8005594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005598:	464b      	mov	r3, r9
 800559a:	eb45 0303 	adc.w	r3, r5, r3
 800559e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055be:	4629      	mov	r1, r5
 80055c0:	008b      	lsls	r3, r1, #2
 80055c2:	4621      	mov	r1, r4
 80055c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055c8:	4621      	mov	r1, r4
 80055ca:	008a      	lsls	r2, r1, #2
 80055cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055d0:	f7fa fe66 	bl	80002a0 <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4b60      	ldr	r3, [pc, #384]	; (800575c <UART_SetConfig+0x4e4>)
 80055da:	fba3 2302 	umull	r2, r3, r3, r2
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	011c      	lsls	r4, r3, #4
 80055e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055f4:	4642      	mov	r2, r8
 80055f6:	464b      	mov	r3, r9
 80055f8:	1891      	adds	r1, r2, r2
 80055fa:	61b9      	str	r1, [r7, #24]
 80055fc:	415b      	adcs	r3, r3
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005604:	4641      	mov	r1, r8
 8005606:	1851      	adds	r1, r2, r1
 8005608:	6139      	str	r1, [r7, #16]
 800560a:	4649      	mov	r1, r9
 800560c:	414b      	adcs	r3, r1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800561c:	4659      	mov	r1, fp
 800561e:	00cb      	lsls	r3, r1, #3
 8005620:	4651      	mov	r1, sl
 8005622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005626:	4651      	mov	r1, sl
 8005628:	00ca      	lsls	r2, r1, #3
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	4603      	mov	r3, r0
 8005630:	4642      	mov	r2, r8
 8005632:	189b      	adds	r3, r3, r2
 8005634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005638:	464b      	mov	r3, r9
 800563a:	460a      	mov	r2, r1
 800563c:	eb42 0303 	adc.w	r3, r2, r3
 8005640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	67bb      	str	r3, [r7, #120]	; 0x78
 800564e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800565c:	4649      	mov	r1, r9
 800565e:	008b      	lsls	r3, r1, #2
 8005660:	4641      	mov	r1, r8
 8005662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005666:	4641      	mov	r1, r8
 8005668:	008a      	lsls	r2, r1, #2
 800566a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800566e:	f7fa fe17 	bl	80002a0 <__aeabi_uldivmod>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4b39      	ldr	r3, [pc, #228]	; (800575c <UART_SetConfig+0x4e4>)
 8005678:	fba3 1302 	umull	r1, r3, r3, r2
 800567c:	095b      	lsrs	r3, r3, #5
 800567e:	2164      	movs	r1, #100	; 0x64
 8005680:	fb01 f303 	mul.w	r3, r1, r3
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	3332      	adds	r3, #50	; 0x32
 800568a:	4a34      	ldr	r2, [pc, #208]	; (800575c <UART_SetConfig+0x4e4>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005696:	441c      	add	r4, r3
 8005698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800569c:	2200      	movs	r2, #0
 800569e:	673b      	str	r3, [r7, #112]	; 0x70
 80056a0:	677a      	str	r2, [r7, #116]	; 0x74
 80056a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056a6:	4642      	mov	r2, r8
 80056a8:	464b      	mov	r3, r9
 80056aa:	1891      	adds	r1, r2, r2
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	415b      	adcs	r3, r3
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056b6:	4641      	mov	r1, r8
 80056b8:	1851      	adds	r1, r2, r1
 80056ba:	6039      	str	r1, [r7, #0]
 80056bc:	4649      	mov	r1, r9
 80056be:	414b      	adcs	r3, r1
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056ce:	4659      	mov	r1, fp
 80056d0:	00cb      	lsls	r3, r1, #3
 80056d2:	4651      	mov	r1, sl
 80056d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d8:	4651      	mov	r1, sl
 80056da:	00ca      	lsls	r2, r1, #3
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	4642      	mov	r2, r8
 80056e4:	189b      	adds	r3, r3, r2
 80056e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80056e8:	464b      	mov	r3, r9
 80056ea:	460a      	mov	r2, r1
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	663b      	str	r3, [r7, #96]	; 0x60
 80056fc:	667a      	str	r2, [r7, #100]	; 0x64
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800570a:	4649      	mov	r1, r9
 800570c:	008b      	lsls	r3, r1, #2
 800570e:	4641      	mov	r1, r8
 8005710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005714:	4641      	mov	r1, r8
 8005716:	008a      	lsls	r2, r1, #2
 8005718:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800571c:	f7fa fdc0 	bl	80002a0 <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <UART_SetConfig+0x4e4>)
 8005726:	fba3 1302 	umull	r1, r3, r3, r2
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	2164      	movs	r1, #100	; 0x64
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	3332      	adds	r3, #50	; 0x32
 8005738:	4a08      	ldr	r2, [pc, #32]	; (800575c <UART_SetConfig+0x4e4>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	f003 020f 	and.w	r2, r3, #15
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4422      	add	r2, r4
 800574c:	609a      	str	r2, [r3, #8]
}
 800574e:	bf00      	nop
 8005750:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005754:	46bd      	mov	sp, r7
 8005756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800575a:	bf00      	nop
 800575c:	51eb851f 	.word	0x51eb851f

08005760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005760:	b084      	sub	sp, #16
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	f107 001c 	add.w	r0, r7, #28
 800576e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	2b01      	cmp	r3, #1
 8005776:	d122      	bne.n	80057be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800578c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 faa2 	bl	8005cfc <USB_CoreReset>
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	e01a      	b.n	80057f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa96 	bl	8005cfc <USB_CoreReset>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	639a      	str	r2, [r3, #56]	; 0x38
 80057e6:	e005      	b.n	80057f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d10b      	bne.n	8005812 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f043 0206 	orr.w	r2, r3, #6
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800581e:	b004      	add	sp, #16
 8005820:	4770      	bx	lr

08005822 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 0201 	bic.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d115      	bne.n	8005892 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005872:	2001      	movs	r0, #1
 8005874:	f7fc fba8 	bl	8001fc8 <HAL_Delay>
      ms++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fa2e 	bl	8005ce0 <USB_GetMode>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d01e      	beq.n	80058c8 <USB_SetCurrentMode+0x84>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b31      	cmp	r3, #49	; 0x31
 800588e:	d9f0      	bls.n	8005872 <USB_SetCurrentMode+0x2e>
 8005890:	e01a      	b.n	80058c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d115      	bne.n	80058c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7fc fb8f 	bl	8001fc8 <HAL_Delay>
      ms++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa15 	bl	8005ce0 <USB_GetMode>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <USB_SetCurrentMode+0x84>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b31      	cmp	r3, #49	; 0x31
 80058c0:	d9f0      	bls.n	80058a4 <USB_SetCurrentMode+0x60>
 80058c2:	e001      	b.n	80058c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e005      	b.n	80058d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b32      	cmp	r3, #50	; 0x32
 80058cc:	d101      	bne.n	80058d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058dc:	b084      	sub	sp, #16
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	e009      	b.n	8005910 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	3340      	adds	r3, #64	; 0x40
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	2200      	movs	r2, #0
 8005908:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3301      	adds	r3, #1
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b0e      	cmp	r3, #14
 8005914:	d9f2      	bls.n	80058fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d11c      	bne.n	8005956 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592a:	f043 0302 	orr.w	r3, r3, #2
 800592e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
 8005954:	e00b      	b.n	800596e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005974:	461a      	mov	r2, r3
 8005976:	2300      	movs	r3, #0
 8005978:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005980:	4619      	mov	r1, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	461a      	mov	r2, r3
 800598a:	680b      	ldr	r3, [r1, #0]
 800598c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10c      	bne.n	80059ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800599a:	2100      	movs	r1, #0
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f965 	bl	8005c6c <USB_SetDevSpeed>
 80059a2:	e008      	b.n	80059b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059a4:	2101      	movs	r1, #1
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f960 	bl	8005c6c <USB_SetDevSpeed>
 80059ac:	e003      	b.n	80059b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059ae:	2103      	movs	r1, #3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f95b 	bl	8005c6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059b6:	2110      	movs	r1, #16
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8f3 	bl	8005ba4 <USB_FlushTxFifo>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f91f 	bl	8005c0c <USB_FlushRxFifo>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	461a      	mov	r2, r3
 80059e0:	2300      	movs	r3, #0
 80059e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	461a      	mov	r2, r3
 80059ec:	2300      	movs	r3, #0
 80059ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	461a      	mov	r2, r3
 80059f8:	2300      	movs	r3, #0
 80059fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e043      	b.n	8005a8a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a18:	d118      	bne.n	8005a4c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e013      	b.n	8005a5e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	461a      	mov	r2, r3
 8005a44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e008      	b.n	8005a5e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3301      	adds	r3, #1
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d3b7      	bcc.n	8005a02 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	e043      	b.n	8005b20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aae:	d118      	bne.n	8005ae2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e013      	b.n	8005af4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e008      	b.n	8005af4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	461a      	mov	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b00:	461a      	mov	r2, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	461a      	mov	r2, r3
 8005b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d3b7      	bcc.n	8005a98 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d105      	bne.n	8005b5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f043 0210 	orr.w	r2, r3, #16
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <USB_DevInit+0x2c4>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f043 0208 	orr.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d107      	bne.n	8005b90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b88:	f043 0304 	orr.w	r3, r3, #4
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b9c:	b004      	add	sp, #16
 8005b9e:	4770      	bx	lr
 8005ba0:	803c3800 	.word	0x803c3800

08005ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <USB_FlushTxFifo+0x64>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d901      	bls.n	8005bc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e01b      	b.n	8005bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	daf2      	bge.n	8005bb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	019b      	lsls	r3, r3, #6
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a08      	ldr	r2, [pc, #32]	; (8005c08 <USB_FlushTxFifo+0x64>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e006      	b.n	8005bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d0f0      	beq.n	8005bdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	00030d40 	.word	0x00030d40

08005c0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4a11      	ldr	r2, [pc, #68]	; (8005c68 <USB_FlushRxFifo+0x5c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e018      	b.n	8005c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	daf2      	bge.n	8005c18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2210      	movs	r2, #16
 8005c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <USB_FlushRxFifo+0x5c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e006      	b.n	8005c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b10      	cmp	r3, #16
 8005c58:	d0f0      	beq.n	8005c3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	00030d40 	.word	0x00030d40

08005c6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cb8:	f023 0303 	bic.w	r3, r3, #3
 8005cbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ccc:	f043 0302 	orr.w	r3, r3, #2
 8005cd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0301 	and.w	r3, r3, #1
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a13      	ldr	r2, [pc, #76]	; (8005d60 <USB_CoreReset+0x64>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e01b      	b.n	8005d52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	daf2      	bge.n	8005d08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f043 0201 	orr.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <USB_CoreReset+0x64>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e006      	b.n	8005d52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d0f0      	beq.n	8005d32 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	00030d40 	.word	0x00030d40

08005d64 <atoi>:
 8005d64:	220a      	movs	r2, #10
 8005d66:	2100      	movs	r1, #0
 8005d68:	f000 b930 	b.w	8005fcc <strtol>

08005d6c <__errno>:
 8005d6c:	4b01      	ldr	r3, [pc, #4]	; (8005d74 <__errno+0x8>)
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	2000000c 	.word	0x2000000c

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4d0d      	ldr	r5, [pc, #52]	; (8005db0 <__libc_init_array+0x38>)
 8005d7c:	4c0d      	ldr	r4, [pc, #52]	; (8005db4 <__libc_init_array+0x3c>)
 8005d7e:	1b64      	subs	r4, r4, r5
 8005d80:	10a4      	asrs	r4, r4, #2
 8005d82:	2600      	movs	r6, #0
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	4d0b      	ldr	r5, [pc, #44]	; (8005db8 <__libc_init_array+0x40>)
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	; (8005dbc <__libc_init_array+0x44>)
 8005d8c:	f001 fade 	bl	800734c <_init>
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	2600      	movs	r6, #0
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da0:	4798      	blx	r3
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005daa:	4798      	blx	r3
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	08007698 	.word	0x08007698
 8005db4:	08007698 	.word	0x08007698
 8005db8:	08007698 	.word	0x08007698
 8005dbc:	0800769c 	.word	0x0800769c

08005dc0 <memset>:
 8005dc0:	4402      	add	r2, r0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d100      	bne.n	8005dca <memset+0xa>
 8005dc8:	4770      	bx	lr
 8005dca:	f803 1b01 	strb.w	r1, [r3], #1
 8005dce:	e7f9      	b.n	8005dc4 <memset+0x4>

08005dd0 <siprintf>:
 8005dd0:	b40e      	push	{r1, r2, r3}
 8005dd2:	b500      	push	{lr}
 8005dd4:	b09c      	sub	sp, #112	; 0x70
 8005dd6:	ab1d      	add	r3, sp, #116	; 0x74
 8005dd8:	9002      	str	r0, [sp, #8]
 8005dda:	9006      	str	r0, [sp, #24]
 8005ddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005de0:	4809      	ldr	r0, [pc, #36]	; (8005e08 <siprintf+0x38>)
 8005de2:	9107      	str	r1, [sp, #28]
 8005de4:	9104      	str	r1, [sp, #16]
 8005de6:	4909      	ldr	r1, [pc, #36]	; (8005e0c <siprintf+0x3c>)
 8005de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dec:	9105      	str	r1, [sp, #20]
 8005dee:	6800      	ldr	r0, [r0, #0]
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	a902      	add	r1, sp, #8
 8005df4:	f000 fa68 	bl	80062c8 <_svfiprintf_r>
 8005df8:	9b02      	ldr	r3, [sp, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	b01c      	add	sp, #112	; 0x70
 8005e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e04:	b003      	add	sp, #12
 8005e06:	4770      	bx	lr
 8005e08:	2000000c 	.word	0x2000000c
 8005e0c:	ffff0208 	.word	0xffff0208

08005e10 <strtok>:
 8005e10:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <strtok+0x5c>)
 8005e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e14:	681e      	ldr	r6, [r3, #0]
 8005e16:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005e18:	4605      	mov	r5, r0
 8005e1a:	b9fc      	cbnz	r4, 8005e5c <strtok+0x4c>
 8005e1c:	2050      	movs	r0, #80	; 0x50
 8005e1e:	9101      	str	r1, [sp, #4]
 8005e20:	f000 f90e 	bl	8006040 <malloc>
 8005e24:	9901      	ldr	r1, [sp, #4]
 8005e26:	65b0      	str	r0, [r6, #88]	; 0x58
 8005e28:	4602      	mov	r2, r0
 8005e2a:	b920      	cbnz	r0, 8005e36 <strtok+0x26>
 8005e2c:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <strtok+0x60>)
 8005e2e:	4811      	ldr	r0, [pc, #68]	; (8005e74 <strtok+0x64>)
 8005e30:	2157      	movs	r1, #87	; 0x57
 8005e32:	f000 f8d5 	bl	8005fe0 <__assert_func>
 8005e36:	e9c0 4400 	strd	r4, r4, [r0]
 8005e3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005e3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005e42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005e46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005e4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005e4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005e52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005e56:	6184      	str	r4, [r0, #24]
 8005e58:	7704      	strb	r4, [r0, #28]
 8005e5a:	6244      	str	r4, [r0, #36]	; 0x24
 8005e5c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4628      	mov	r0, r5
 8005e62:	b002      	add	sp, #8
 8005e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e68:	f000 b806 	b.w	8005e78 <__strtok_r>
 8005e6c:	2000000c 	.word	0x2000000c
 8005e70:	0800744c 	.word	0x0800744c
 8005e74:	08007463 	.word	0x08007463

08005e78 <__strtok_r>:
 8005e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7a:	b908      	cbnz	r0, 8005e80 <__strtok_r+0x8>
 8005e7c:	6810      	ldr	r0, [r2, #0]
 8005e7e:	b188      	cbz	r0, 8005ea4 <__strtok_r+0x2c>
 8005e80:	4604      	mov	r4, r0
 8005e82:	4620      	mov	r0, r4
 8005e84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005e88:	460f      	mov	r7, r1
 8005e8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005e8e:	b91e      	cbnz	r6, 8005e98 <__strtok_r+0x20>
 8005e90:	b965      	cbnz	r5, 8005eac <__strtok_r+0x34>
 8005e92:	6015      	str	r5, [r2, #0]
 8005e94:	4628      	mov	r0, r5
 8005e96:	e005      	b.n	8005ea4 <__strtok_r+0x2c>
 8005e98:	42b5      	cmp	r5, r6
 8005e9a:	d1f6      	bne.n	8005e8a <__strtok_r+0x12>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f0      	bne.n	8005e82 <__strtok_r+0xa>
 8005ea0:	6014      	str	r4, [r2, #0]
 8005ea2:	7003      	strb	r3, [r0, #0]
 8005ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea6:	461c      	mov	r4, r3
 8005ea8:	e00c      	b.n	8005ec4 <__strtok_r+0x4c>
 8005eaa:	b915      	cbnz	r5, 8005eb2 <__strtok_r+0x3a>
 8005eac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005eb0:	460e      	mov	r6, r1
 8005eb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005eb6:	42ab      	cmp	r3, r5
 8005eb8:	d1f7      	bne.n	8005eaa <__strtok_r+0x32>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f3      	beq.n	8005ea6 <__strtok_r+0x2e>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005ec4:	6014      	str	r4, [r2, #0]
 8005ec6:	e7ed      	b.n	8005ea4 <__strtok_r+0x2c>

08005ec8 <_strtol_l.constprop.0>:
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ece:	d001      	beq.n	8005ed4 <_strtol_l.constprop.0+0xc>
 8005ed0:	2b24      	cmp	r3, #36	; 0x24
 8005ed2:	d906      	bls.n	8005ee2 <_strtol_l.constprop.0+0x1a>
 8005ed4:	f7ff ff4a 	bl	8005d6c <__errno>
 8005ed8:	2316      	movs	r3, #22
 8005eda:	6003      	str	r3, [r0, #0]
 8005edc:	2000      	movs	r0, #0
 8005ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005fc8 <_strtol_l.constprop.0+0x100>
 8005ee6:	460d      	mov	r5, r1
 8005ee8:	462e      	mov	r6, r5
 8005eea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eee:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005ef2:	f017 0708 	ands.w	r7, r7, #8
 8005ef6:	d1f7      	bne.n	8005ee8 <_strtol_l.constprop.0+0x20>
 8005ef8:	2c2d      	cmp	r4, #45	; 0x2d
 8005efa:	d132      	bne.n	8005f62 <_strtol_l.constprop.0+0x9a>
 8005efc:	782c      	ldrb	r4, [r5, #0]
 8005efe:	2701      	movs	r7, #1
 8005f00:	1cb5      	adds	r5, r6, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d05b      	beq.n	8005fbe <_strtol_l.constprop.0+0xf6>
 8005f06:	2b10      	cmp	r3, #16
 8005f08:	d109      	bne.n	8005f1e <_strtol_l.constprop.0+0x56>
 8005f0a:	2c30      	cmp	r4, #48	; 0x30
 8005f0c:	d107      	bne.n	8005f1e <_strtol_l.constprop.0+0x56>
 8005f0e:	782c      	ldrb	r4, [r5, #0]
 8005f10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f14:	2c58      	cmp	r4, #88	; 0x58
 8005f16:	d14d      	bne.n	8005fb4 <_strtol_l.constprop.0+0xec>
 8005f18:	786c      	ldrb	r4, [r5, #1]
 8005f1a:	2310      	movs	r3, #16
 8005f1c:	3502      	adds	r5, #2
 8005f1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005f22:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f26:	f04f 0c00 	mov.w	ip, #0
 8005f2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005f2e:	4666      	mov	r6, ip
 8005f30:	fb03 8a19 	mls	sl, r3, r9, r8
 8005f34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005f38:	f1be 0f09 	cmp.w	lr, #9
 8005f3c:	d816      	bhi.n	8005f6c <_strtol_l.constprop.0+0xa4>
 8005f3e:	4674      	mov	r4, lr
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	dd24      	ble.n	8005f8e <_strtol_l.constprop.0+0xc6>
 8005f44:	f1bc 0f00 	cmp.w	ip, #0
 8005f48:	db1e      	blt.n	8005f88 <_strtol_l.constprop.0+0xc0>
 8005f4a:	45b1      	cmp	r9, r6
 8005f4c:	d31c      	bcc.n	8005f88 <_strtol_l.constprop.0+0xc0>
 8005f4e:	d101      	bne.n	8005f54 <_strtol_l.constprop.0+0x8c>
 8005f50:	45a2      	cmp	sl, r4
 8005f52:	db19      	blt.n	8005f88 <_strtol_l.constprop.0+0xc0>
 8005f54:	fb06 4603 	mla	r6, r6, r3, r4
 8005f58:	f04f 0c01 	mov.w	ip, #1
 8005f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f60:	e7e8      	b.n	8005f34 <_strtol_l.constprop.0+0x6c>
 8005f62:	2c2b      	cmp	r4, #43	; 0x2b
 8005f64:	bf04      	itt	eq
 8005f66:	782c      	ldrbeq	r4, [r5, #0]
 8005f68:	1cb5      	addeq	r5, r6, #2
 8005f6a:	e7ca      	b.n	8005f02 <_strtol_l.constprop.0+0x3a>
 8005f6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f70:	f1be 0f19 	cmp.w	lr, #25
 8005f74:	d801      	bhi.n	8005f7a <_strtol_l.constprop.0+0xb2>
 8005f76:	3c37      	subs	r4, #55	; 0x37
 8005f78:	e7e2      	b.n	8005f40 <_strtol_l.constprop.0+0x78>
 8005f7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005f7e:	f1be 0f19 	cmp.w	lr, #25
 8005f82:	d804      	bhi.n	8005f8e <_strtol_l.constprop.0+0xc6>
 8005f84:	3c57      	subs	r4, #87	; 0x57
 8005f86:	e7db      	b.n	8005f40 <_strtol_l.constprop.0+0x78>
 8005f88:	f04f 3cff 	mov.w	ip, #4294967295
 8005f8c:	e7e6      	b.n	8005f5c <_strtol_l.constprop.0+0x94>
 8005f8e:	f1bc 0f00 	cmp.w	ip, #0
 8005f92:	da05      	bge.n	8005fa0 <_strtol_l.constprop.0+0xd8>
 8005f94:	2322      	movs	r3, #34	; 0x22
 8005f96:	6003      	str	r3, [r0, #0]
 8005f98:	4646      	mov	r6, r8
 8005f9a:	b942      	cbnz	r2, 8005fae <_strtol_l.constprop.0+0xe6>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	e79e      	b.n	8005ede <_strtol_l.constprop.0+0x16>
 8005fa0:	b107      	cbz	r7, 8005fa4 <_strtol_l.constprop.0+0xdc>
 8005fa2:	4276      	negs	r6, r6
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d0f9      	beq.n	8005f9c <_strtol_l.constprop.0+0xd4>
 8005fa8:	f1bc 0f00 	cmp.w	ip, #0
 8005fac:	d000      	beq.n	8005fb0 <_strtol_l.constprop.0+0xe8>
 8005fae:	1e69      	subs	r1, r5, #1
 8005fb0:	6011      	str	r1, [r2, #0]
 8005fb2:	e7f3      	b.n	8005f9c <_strtol_l.constprop.0+0xd4>
 8005fb4:	2430      	movs	r4, #48	; 0x30
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1b1      	bne.n	8005f1e <_strtol_l.constprop.0+0x56>
 8005fba:	2308      	movs	r3, #8
 8005fbc:	e7af      	b.n	8005f1e <_strtol_l.constprop.0+0x56>
 8005fbe:	2c30      	cmp	r4, #48	; 0x30
 8005fc0:	d0a5      	beq.n	8005f0e <_strtol_l.constprop.0+0x46>
 8005fc2:	230a      	movs	r3, #10
 8005fc4:	e7ab      	b.n	8005f1e <_strtol_l.constprop.0+0x56>
 8005fc6:	bf00      	nop
 8005fc8:	080074fd 	.word	0x080074fd

08005fcc <strtol>:
 8005fcc:	4613      	mov	r3, r2
 8005fce:	460a      	mov	r2, r1
 8005fd0:	4601      	mov	r1, r0
 8005fd2:	4802      	ldr	r0, [pc, #8]	; (8005fdc <strtol+0x10>)
 8005fd4:	6800      	ldr	r0, [r0, #0]
 8005fd6:	f7ff bf77 	b.w	8005ec8 <_strtol_l.constprop.0>
 8005fda:	bf00      	nop
 8005fdc:	2000000c 	.word	0x2000000c

08005fe0 <__assert_func>:
 8005fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fe2:	4614      	mov	r4, r2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <__assert_func+0x2c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4605      	mov	r5, r0
 8005fec:	68d8      	ldr	r0, [r3, #12]
 8005fee:	b14c      	cbz	r4, 8006004 <__assert_func+0x24>
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <__assert_func+0x30>)
 8005ff2:	9100      	str	r1, [sp, #0]
 8005ff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ff8:	4906      	ldr	r1, [pc, #24]	; (8006014 <__assert_func+0x34>)
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	f000 f80e 	bl	800601c <fiprintf>
 8006000:	f000 fe20 	bl	8006c44 <abort>
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <__assert_func+0x38>)
 8006006:	461c      	mov	r4, r3
 8006008:	e7f3      	b.n	8005ff2 <__assert_func+0x12>
 800600a:	bf00      	nop
 800600c:	2000000c 	.word	0x2000000c
 8006010:	080074c0 	.word	0x080074c0
 8006014:	080074cd 	.word	0x080074cd
 8006018:	080074fb 	.word	0x080074fb

0800601c <fiprintf>:
 800601c:	b40e      	push	{r1, r2, r3}
 800601e:	b503      	push	{r0, r1, lr}
 8006020:	4601      	mov	r1, r0
 8006022:	ab03      	add	r3, sp, #12
 8006024:	4805      	ldr	r0, [pc, #20]	; (800603c <fiprintf+0x20>)
 8006026:	f853 2b04 	ldr.w	r2, [r3], #4
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	f000 fa75 	bl	800651c <_vfiprintf_r>
 8006032:	b002      	add	sp, #8
 8006034:	f85d eb04 	ldr.w	lr, [sp], #4
 8006038:	b003      	add	sp, #12
 800603a:	4770      	bx	lr
 800603c:	2000000c 	.word	0x2000000c

08006040 <malloc>:
 8006040:	4b02      	ldr	r3, [pc, #8]	; (800604c <malloc+0xc>)
 8006042:	4601      	mov	r1, r0
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	f000 b86f 	b.w	8006128 <_malloc_r>
 800604a:	bf00      	nop
 800604c:	2000000c 	.word	0x2000000c

08006050 <_free_r>:
 8006050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006052:	2900      	cmp	r1, #0
 8006054:	d044      	beq.n	80060e0 <_free_r+0x90>
 8006056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605a:	9001      	str	r0, [sp, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f1a1 0404 	sub.w	r4, r1, #4
 8006062:	bfb8      	it	lt
 8006064:	18e4      	addlt	r4, r4, r3
 8006066:	f001 f83d 	bl	80070e4 <__malloc_lock>
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <_free_r+0x94>)
 800606c:	9801      	ldr	r0, [sp, #4]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	b933      	cbnz	r3, 8006080 <_free_r+0x30>
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	6014      	str	r4, [r2, #0]
 8006076:	b003      	add	sp, #12
 8006078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800607c:	f001 b838 	b.w	80070f0 <__malloc_unlock>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d908      	bls.n	8006096 <_free_r+0x46>
 8006084:	6825      	ldr	r5, [r4, #0]
 8006086:	1961      	adds	r1, r4, r5
 8006088:	428b      	cmp	r3, r1
 800608a:	bf01      	itttt	eq
 800608c:	6819      	ldreq	r1, [r3, #0]
 800608e:	685b      	ldreq	r3, [r3, #4]
 8006090:	1949      	addeq	r1, r1, r5
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	e7ed      	b.n	8006072 <_free_r+0x22>
 8006096:	461a      	mov	r2, r3
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	b10b      	cbz	r3, 80060a0 <_free_r+0x50>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d9fa      	bls.n	8006096 <_free_r+0x46>
 80060a0:	6811      	ldr	r1, [r2, #0]
 80060a2:	1855      	adds	r5, r2, r1
 80060a4:	42a5      	cmp	r5, r4
 80060a6:	d10b      	bne.n	80060c0 <_free_r+0x70>
 80060a8:	6824      	ldr	r4, [r4, #0]
 80060aa:	4421      	add	r1, r4
 80060ac:	1854      	adds	r4, r2, r1
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	d1e0      	bne.n	8006076 <_free_r+0x26>
 80060b4:	681c      	ldr	r4, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	6053      	str	r3, [r2, #4]
 80060ba:	4421      	add	r1, r4
 80060bc:	6011      	str	r1, [r2, #0]
 80060be:	e7da      	b.n	8006076 <_free_r+0x26>
 80060c0:	d902      	bls.n	80060c8 <_free_r+0x78>
 80060c2:	230c      	movs	r3, #12
 80060c4:	6003      	str	r3, [r0, #0]
 80060c6:	e7d6      	b.n	8006076 <_free_r+0x26>
 80060c8:	6825      	ldr	r5, [r4, #0]
 80060ca:	1961      	adds	r1, r4, r5
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf04      	itt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	bf04      	itt	eq
 80060d8:	1949      	addeq	r1, r1, r5
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	6054      	str	r4, [r2, #4]
 80060de:	e7ca      	b.n	8006076 <_free_r+0x26>
 80060e0:	b003      	add	sp, #12
 80060e2:	bd30      	pop	{r4, r5, pc}
 80060e4:	200008b4 	.word	0x200008b4

080060e8 <sbrk_aligned>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4e0e      	ldr	r6, [pc, #56]	; (8006124 <sbrk_aligned+0x3c>)
 80060ec:	460c      	mov	r4, r1
 80060ee:	6831      	ldr	r1, [r6, #0]
 80060f0:	4605      	mov	r5, r0
 80060f2:	b911      	cbnz	r1, 80060fa <sbrk_aligned+0x12>
 80060f4:	f000 fcd6 	bl	8006aa4 <_sbrk_r>
 80060f8:	6030      	str	r0, [r6, #0]
 80060fa:	4621      	mov	r1, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fcd1 	bl	8006aa4 <_sbrk_r>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d00a      	beq.n	800611c <sbrk_aligned+0x34>
 8006106:	1cc4      	adds	r4, r0, #3
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	42a0      	cmp	r0, r4
 800610e:	d007      	beq.n	8006120 <sbrk_aligned+0x38>
 8006110:	1a21      	subs	r1, r4, r0
 8006112:	4628      	mov	r0, r5
 8006114:	f000 fcc6 	bl	8006aa4 <_sbrk_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d101      	bne.n	8006120 <sbrk_aligned+0x38>
 800611c:	f04f 34ff 	mov.w	r4, #4294967295
 8006120:	4620      	mov	r0, r4
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	200008b8 	.word	0x200008b8

08006128 <_malloc_r>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	1ccd      	adds	r5, r1, #3
 800612e:	f025 0503 	bic.w	r5, r5, #3
 8006132:	3508      	adds	r5, #8
 8006134:	2d0c      	cmp	r5, #12
 8006136:	bf38      	it	cc
 8006138:	250c      	movcc	r5, #12
 800613a:	2d00      	cmp	r5, #0
 800613c:	4607      	mov	r7, r0
 800613e:	db01      	blt.n	8006144 <_malloc_r+0x1c>
 8006140:	42a9      	cmp	r1, r5
 8006142:	d905      	bls.n	8006150 <_malloc_r+0x28>
 8006144:	230c      	movs	r3, #12
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	2600      	movs	r6, #0
 800614a:	4630      	mov	r0, r6
 800614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006150:	4e2e      	ldr	r6, [pc, #184]	; (800620c <_malloc_r+0xe4>)
 8006152:	f000 ffc7 	bl	80070e4 <__malloc_lock>
 8006156:	6833      	ldr	r3, [r6, #0]
 8006158:	461c      	mov	r4, r3
 800615a:	bb34      	cbnz	r4, 80061aa <_malloc_r+0x82>
 800615c:	4629      	mov	r1, r5
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff ffc2 	bl	80060e8 <sbrk_aligned>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	4604      	mov	r4, r0
 8006168:	d14d      	bne.n	8006206 <_malloc_r+0xde>
 800616a:	6834      	ldr	r4, [r6, #0]
 800616c:	4626      	mov	r6, r4
 800616e:	2e00      	cmp	r6, #0
 8006170:	d140      	bne.n	80061f4 <_malloc_r+0xcc>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	4631      	mov	r1, r6
 8006176:	4638      	mov	r0, r7
 8006178:	eb04 0803 	add.w	r8, r4, r3
 800617c:	f000 fc92 	bl	8006aa4 <_sbrk_r>
 8006180:	4580      	cmp	r8, r0
 8006182:	d13a      	bne.n	80061fa <_malloc_r+0xd2>
 8006184:	6821      	ldr	r1, [r4, #0]
 8006186:	3503      	adds	r5, #3
 8006188:	1a6d      	subs	r5, r5, r1
 800618a:	f025 0503 	bic.w	r5, r5, #3
 800618e:	3508      	adds	r5, #8
 8006190:	2d0c      	cmp	r5, #12
 8006192:	bf38      	it	cc
 8006194:	250c      	movcc	r5, #12
 8006196:	4629      	mov	r1, r5
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff ffa5 	bl	80060e8 <sbrk_aligned>
 800619e:	3001      	adds	r0, #1
 80061a0:	d02b      	beq.n	80061fa <_malloc_r+0xd2>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	442b      	add	r3, r5
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	e00e      	b.n	80061c8 <_malloc_r+0xa0>
 80061aa:	6822      	ldr	r2, [r4, #0]
 80061ac:	1b52      	subs	r2, r2, r5
 80061ae:	d41e      	bmi.n	80061ee <_malloc_r+0xc6>
 80061b0:	2a0b      	cmp	r2, #11
 80061b2:	d916      	bls.n	80061e2 <_malloc_r+0xba>
 80061b4:	1961      	adds	r1, r4, r5
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	6025      	str	r5, [r4, #0]
 80061ba:	bf18      	it	ne
 80061bc:	6059      	strne	r1, [r3, #4]
 80061be:	6863      	ldr	r3, [r4, #4]
 80061c0:	bf08      	it	eq
 80061c2:	6031      	streq	r1, [r6, #0]
 80061c4:	5162      	str	r2, [r4, r5]
 80061c6:	604b      	str	r3, [r1, #4]
 80061c8:	4638      	mov	r0, r7
 80061ca:	f104 060b 	add.w	r6, r4, #11
 80061ce:	f000 ff8f 	bl	80070f0 <__malloc_unlock>
 80061d2:	f026 0607 	bic.w	r6, r6, #7
 80061d6:	1d23      	adds	r3, r4, #4
 80061d8:	1af2      	subs	r2, r6, r3
 80061da:	d0b6      	beq.n	800614a <_malloc_r+0x22>
 80061dc:	1b9b      	subs	r3, r3, r6
 80061de:	50a3      	str	r3, [r4, r2]
 80061e0:	e7b3      	b.n	800614a <_malloc_r+0x22>
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	bf0c      	ite	eq
 80061e8:	6032      	streq	r2, [r6, #0]
 80061ea:	605a      	strne	r2, [r3, #4]
 80061ec:	e7ec      	b.n	80061c8 <_malloc_r+0xa0>
 80061ee:	4623      	mov	r3, r4
 80061f0:	6864      	ldr	r4, [r4, #4]
 80061f2:	e7b2      	b.n	800615a <_malloc_r+0x32>
 80061f4:	4634      	mov	r4, r6
 80061f6:	6876      	ldr	r6, [r6, #4]
 80061f8:	e7b9      	b.n	800616e <_malloc_r+0x46>
 80061fa:	230c      	movs	r3, #12
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	4638      	mov	r0, r7
 8006200:	f000 ff76 	bl	80070f0 <__malloc_unlock>
 8006204:	e7a1      	b.n	800614a <_malloc_r+0x22>
 8006206:	6025      	str	r5, [r4, #0]
 8006208:	e7de      	b.n	80061c8 <_malloc_r+0xa0>
 800620a:	bf00      	nop
 800620c:	200008b4 	.word	0x200008b4

08006210 <__ssputs_r>:
 8006210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006214:	688e      	ldr	r6, [r1, #8]
 8006216:	429e      	cmp	r6, r3
 8006218:	4682      	mov	sl, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4690      	mov	r8, r2
 800621e:	461f      	mov	r7, r3
 8006220:	d838      	bhi.n	8006294 <__ssputs_r+0x84>
 8006222:	898a      	ldrh	r2, [r1, #12]
 8006224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006228:	d032      	beq.n	8006290 <__ssputs_r+0x80>
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	6909      	ldr	r1, [r1, #16]
 800622e:	eba5 0901 	sub.w	r9, r5, r1
 8006232:	6965      	ldr	r5, [r4, #20]
 8006234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800623c:	3301      	adds	r3, #1
 800623e:	444b      	add	r3, r9
 8006240:	106d      	asrs	r5, r5, #1
 8006242:	429d      	cmp	r5, r3
 8006244:	bf38      	it	cc
 8006246:	461d      	movcc	r5, r3
 8006248:	0553      	lsls	r3, r2, #21
 800624a:	d531      	bpl.n	80062b0 <__ssputs_r+0xa0>
 800624c:	4629      	mov	r1, r5
 800624e:	f7ff ff6b 	bl	8006128 <_malloc_r>
 8006252:	4606      	mov	r6, r0
 8006254:	b950      	cbnz	r0, 800626c <__ssputs_r+0x5c>
 8006256:	230c      	movs	r3, #12
 8006258:	f8ca 3000 	str.w	r3, [sl]
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	6921      	ldr	r1, [r4, #16]
 800626e:	464a      	mov	r2, r9
 8006270:	f000 ff10 	bl	8007094 <memcpy>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	6126      	str	r6, [r4, #16]
 8006282:	6165      	str	r5, [r4, #20]
 8006284:	444e      	add	r6, r9
 8006286:	eba5 0509 	sub.w	r5, r5, r9
 800628a:	6026      	str	r6, [r4, #0]
 800628c:	60a5      	str	r5, [r4, #8]
 800628e:	463e      	mov	r6, r7
 8006290:	42be      	cmp	r6, r7
 8006292:	d900      	bls.n	8006296 <__ssputs_r+0x86>
 8006294:	463e      	mov	r6, r7
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	4632      	mov	r2, r6
 800629a:	4641      	mov	r1, r8
 800629c:	f000 ff08 	bl	80070b0 <memmove>
 80062a0:	68a3      	ldr	r3, [r4, #8]
 80062a2:	1b9b      	subs	r3, r3, r6
 80062a4:	60a3      	str	r3, [r4, #8]
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	4433      	add	r3, r6
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	2000      	movs	r0, #0
 80062ae:	e7db      	b.n	8006268 <__ssputs_r+0x58>
 80062b0:	462a      	mov	r2, r5
 80062b2:	f000 ff23 	bl	80070fc <_realloc_r>
 80062b6:	4606      	mov	r6, r0
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d1e1      	bne.n	8006280 <__ssputs_r+0x70>
 80062bc:	6921      	ldr	r1, [r4, #16]
 80062be:	4650      	mov	r0, sl
 80062c0:	f7ff fec6 	bl	8006050 <_free_r>
 80062c4:	e7c7      	b.n	8006256 <__ssputs_r+0x46>
	...

080062c8 <_svfiprintf_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	4698      	mov	r8, r3
 80062ce:	898b      	ldrh	r3, [r1, #12]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	b09d      	sub	sp, #116	; 0x74
 80062d4:	4607      	mov	r7, r0
 80062d6:	460d      	mov	r5, r1
 80062d8:	4614      	mov	r4, r2
 80062da:	d50e      	bpl.n	80062fa <_svfiprintf_r+0x32>
 80062dc:	690b      	ldr	r3, [r1, #16]
 80062de:	b963      	cbnz	r3, 80062fa <_svfiprintf_r+0x32>
 80062e0:	2140      	movs	r1, #64	; 0x40
 80062e2:	f7ff ff21 	bl	8006128 <_malloc_r>
 80062e6:	6028      	str	r0, [r5, #0]
 80062e8:	6128      	str	r0, [r5, #16]
 80062ea:	b920      	cbnz	r0, 80062f6 <_svfiprintf_r+0x2e>
 80062ec:	230c      	movs	r3, #12
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	e0d1      	b.n	800649a <_svfiprintf_r+0x1d2>
 80062f6:	2340      	movs	r3, #64	; 0x40
 80062f8:	616b      	str	r3, [r5, #20]
 80062fa:	2300      	movs	r3, #0
 80062fc:	9309      	str	r3, [sp, #36]	; 0x24
 80062fe:	2320      	movs	r3, #32
 8006300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006304:	f8cd 800c 	str.w	r8, [sp, #12]
 8006308:	2330      	movs	r3, #48	; 0x30
 800630a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064b4 <_svfiprintf_r+0x1ec>
 800630e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006312:	f04f 0901 	mov.w	r9, #1
 8006316:	4623      	mov	r3, r4
 8006318:	469a      	mov	sl, r3
 800631a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800631e:	b10a      	cbz	r2, 8006324 <_svfiprintf_r+0x5c>
 8006320:	2a25      	cmp	r2, #37	; 0x25
 8006322:	d1f9      	bne.n	8006318 <_svfiprintf_r+0x50>
 8006324:	ebba 0b04 	subs.w	fp, sl, r4
 8006328:	d00b      	beq.n	8006342 <_svfiprintf_r+0x7a>
 800632a:	465b      	mov	r3, fp
 800632c:	4622      	mov	r2, r4
 800632e:	4629      	mov	r1, r5
 8006330:	4638      	mov	r0, r7
 8006332:	f7ff ff6d 	bl	8006210 <__ssputs_r>
 8006336:	3001      	adds	r0, #1
 8006338:	f000 80aa 	beq.w	8006490 <_svfiprintf_r+0x1c8>
 800633c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800633e:	445a      	add	r2, fp
 8006340:	9209      	str	r2, [sp, #36]	; 0x24
 8006342:	f89a 3000 	ldrb.w	r3, [sl]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80a2 	beq.w	8006490 <_svfiprintf_r+0x1c8>
 800634c:	2300      	movs	r3, #0
 800634e:	f04f 32ff 	mov.w	r2, #4294967295
 8006352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006356:	f10a 0a01 	add.w	sl, sl, #1
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	9307      	str	r3, [sp, #28]
 800635e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006362:	931a      	str	r3, [sp, #104]	; 0x68
 8006364:	4654      	mov	r4, sl
 8006366:	2205      	movs	r2, #5
 8006368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636c:	4851      	ldr	r0, [pc, #324]	; (80064b4 <_svfiprintf_r+0x1ec>)
 800636e:	f7f9 ff47 	bl	8000200 <memchr>
 8006372:	9a04      	ldr	r2, [sp, #16]
 8006374:	b9d8      	cbnz	r0, 80063ae <_svfiprintf_r+0xe6>
 8006376:	06d0      	lsls	r0, r2, #27
 8006378:	bf44      	itt	mi
 800637a:	2320      	movmi	r3, #32
 800637c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006380:	0711      	lsls	r1, r2, #28
 8006382:	bf44      	itt	mi
 8006384:	232b      	movmi	r3, #43	; 0x2b
 8006386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800638a:	f89a 3000 	ldrb.w	r3, [sl]
 800638e:	2b2a      	cmp	r3, #42	; 0x2a
 8006390:	d015      	beq.n	80063be <_svfiprintf_r+0xf6>
 8006392:	9a07      	ldr	r2, [sp, #28]
 8006394:	4654      	mov	r4, sl
 8006396:	2000      	movs	r0, #0
 8006398:	f04f 0c0a 	mov.w	ip, #10
 800639c:	4621      	mov	r1, r4
 800639e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a2:	3b30      	subs	r3, #48	; 0x30
 80063a4:	2b09      	cmp	r3, #9
 80063a6:	d94e      	bls.n	8006446 <_svfiprintf_r+0x17e>
 80063a8:	b1b0      	cbz	r0, 80063d8 <_svfiprintf_r+0x110>
 80063aa:	9207      	str	r2, [sp, #28]
 80063ac:	e014      	b.n	80063d8 <_svfiprintf_r+0x110>
 80063ae:	eba0 0308 	sub.w	r3, r0, r8
 80063b2:	fa09 f303 	lsl.w	r3, r9, r3
 80063b6:	4313      	orrs	r3, r2
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	46a2      	mov	sl, r4
 80063bc:	e7d2      	b.n	8006364 <_svfiprintf_r+0x9c>
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	1d19      	adds	r1, r3, #4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	9103      	str	r1, [sp, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bfbb      	ittet	lt
 80063ca:	425b      	neglt	r3, r3
 80063cc:	f042 0202 	orrlt.w	r2, r2, #2
 80063d0:	9307      	strge	r3, [sp, #28]
 80063d2:	9307      	strlt	r3, [sp, #28]
 80063d4:	bfb8      	it	lt
 80063d6:	9204      	strlt	r2, [sp, #16]
 80063d8:	7823      	ldrb	r3, [r4, #0]
 80063da:	2b2e      	cmp	r3, #46	; 0x2e
 80063dc:	d10c      	bne.n	80063f8 <_svfiprintf_r+0x130>
 80063de:	7863      	ldrb	r3, [r4, #1]
 80063e0:	2b2a      	cmp	r3, #42	; 0x2a
 80063e2:	d135      	bne.n	8006450 <_svfiprintf_r+0x188>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	1d1a      	adds	r2, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	9203      	str	r2, [sp, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfb8      	it	lt
 80063f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80063f4:	3402      	adds	r4, #2
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064c4 <_svfiprintf_r+0x1fc>
 80063fc:	7821      	ldrb	r1, [r4, #0]
 80063fe:	2203      	movs	r2, #3
 8006400:	4650      	mov	r0, sl
 8006402:	f7f9 fefd 	bl	8000200 <memchr>
 8006406:	b140      	cbz	r0, 800641a <_svfiprintf_r+0x152>
 8006408:	2340      	movs	r3, #64	; 0x40
 800640a:	eba0 000a 	sub.w	r0, r0, sl
 800640e:	fa03 f000 	lsl.w	r0, r3, r0
 8006412:	9b04      	ldr	r3, [sp, #16]
 8006414:	4303      	orrs	r3, r0
 8006416:	3401      	adds	r4, #1
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641e:	4826      	ldr	r0, [pc, #152]	; (80064b8 <_svfiprintf_r+0x1f0>)
 8006420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006424:	2206      	movs	r2, #6
 8006426:	f7f9 feeb 	bl	8000200 <memchr>
 800642a:	2800      	cmp	r0, #0
 800642c:	d038      	beq.n	80064a0 <_svfiprintf_r+0x1d8>
 800642e:	4b23      	ldr	r3, [pc, #140]	; (80064bc <_svfiprintf_r+0x1f4>)
 8006430:	bb1b      	cbnz	r3, 800647a <_svfiprintf_r+0x1b2>
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	3307      	adds	r3, #7
 8006436:	f023 0307 	bic.w	r3, r3, #7
 800643a:	3308      	adds	r3, #8
 800643c:	9303      	str	r3, [sp, #12]
 800643e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006440:	4433      	add	r3, r6
 8006442:	9309      	str	r3, [sp, #36]	; 0x24
 8006444:	e767      	b.n	8006316 <_svfiprintf_r+0x4e>
 8006446:	fb0c 3202 	mla	r2, ip, r2, r3
 800644a:	460c      	mov	r4, r1
 800644c:	2001      	movs	r0, #1
 800644e:	e7a5      	b.n	800639c <_svfiprintf_r+0xd4>
 8006450:	2300      	movs	r3, #0
 8006452:	3401      	adds	r4, #1
 8006454:	9305      	str	r3, [sp, #20]
 8006456:	4619      	mov	r1, r3
 8006458:	f04f 0c0a 	mov.w	ip, #10
 800645c:	4620      	mov	r0, r4
 800645e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006462:	3a30      	subs	r2, #48	; 0x30
 8006464:	2a09      	cmp	r2, #9
 8006466:	d903      	bls.n	8006470 <_svfiprintf_r+0x1a8>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0c5      	beq.n	80063f8 <_svfiprintf_r+0x130>
 800646c:	9105      	str	r1, [sp, #20]
 800646e:	e7c3      	b.n	80063f8 <_svfiprintf_r+0x130>
 8006470:	fb0c 2101 	mla	r1, ip, r1, r2
 8006474:	4604      	mov	r4, r0
 8006476:	2301      	movs	r3, #1
 8006478:	e7f0      	b.n	800645c <_svfiprintf_r+0x194>
 800647a:	ab03      	add	r3, sp, #12
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	462a      	mov	r2, r5
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <_svfiprintf_r+0x1f8>)
 8006482:	a904      	add	r1, sp, #16
 8006484:	4638      	mov	r0, r7
 8006486:	f3af 8000 	nop.w
 800648a:	1c42      	adds	r2, r0, #1
 800648c:	4606      	mov	r6, r0
 800648e:	d1d6      	bne.n	800643e <_svfiprintf_r+0x176>
 8006490:	89ab      	ldrh	r3, [r5, #12]
 8006492:	065b      	lsls	r3, r3, #25
 8006494:	f53f af2c 	bmi.w	80062f0 <_svfiprintf_r+0x28>
 8006498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800649a:	b01d      	add	sp, #116	; 0x74
 800649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a0:	ab03      	add	r3, sp, #12
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	462a      	mov	r2, r5
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <_svfiprintf_r+0x1f8>)
 80064a8:	a904      	add	r1, sp, #16
 80064aa:	4638      	mov	r0, r7
 80064ac:	f000 f9d4 	bl	8006858 <_printf_i>
 80064b0:	e7eb      	b.n	800648a <_svfiprintf_r+0x1c2>
 80064b2:	bf00      	nop
 80064b4:	080075fd 	.word	0x080075fd
 80064b8:	08007607 	.word	0x08007607
 80064bc:	00000000 	.word	0x00000000
 80064c0:	08006211 	.word	0x08006211
 80064c4:	08007603 	.word	0x08007603

080064c8 <__sfputc_r>:
 80064c8:	6893      	ldr	r3, [r2, #8]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	b410      	push	{r4}
 80064d0:	6093      	str	r3, [r2, #8]
 80064d2:	da08      	bge.n	80064e6 <__sfputc_r+0x1e>
 80064d4:	6994      	ldr	r4, [r2, #24]
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	db01      	blt.n	80064de <__sfputc_r+0x16>
 80064da:	290a      	cmp	r1, #10
 80064dc:	d103      	bne.n	80064e6 <__sfputc_r+0x1e>
 80064de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e2:	f000 baef 	b.w	8006ac4 <__swbuf_r>
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	1c58      	adds	r0, r3, #1
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	7019      	strb	r1, [r3, #0]
 80064ee:	4608      	mov	r0, r1
 80064f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <__sfputs_r>:
 80064f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f8:	4606      	mov	r6, r0
 80064fa:	460f      	mov	r7, r1
 80064fc:	4614      	mov	r4, r2
 80064fe:	18d5      	adds	r5, r2, r3
 8006500:	42ac      	cmp	r4, r5
 8006502:	d101      	bne.n	8006508 <__sfputs_r+0x12>
 8006504:	2000      	movs	r0, #0
 8006506:	e007      	b.n	8006518 <__sfputs_r+0x22>
 8006508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650c:	463a      	mov	r2, r7
 800650e:	4630      	mov	r0, r6
 8006510:	f7ff ffda 	bl	80064c8 <__sfputc_r>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d1f3      	bne.n	8006500 <__sfputs_r+0xa>
 8006518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800651c <_vfiprintf_r>:
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	460d      	mov	r5, r1
 8006522:	b09d      	sub	sp, #116	; 0x74
 8006524:	4614      	mov	r4, r2
 8006526:	4698      	mov	r8, r3
 8006528:	4606      	mov	r6, r0
 800652a:	b118      	cbz	r0, 8006534 <_vfiprintf_r+0x18>
 800652c:	6983      	ldr	r3, [r0, #24]
 800652e:	b90b      	cbnz	r3, 8006534 <_vfiprintf_r+0x18>
 8006530:	f000 fcaa 	bl	8006e88 <__sinit>
 8006534:	4b89      	ldr	r3, [pc, #548]	; (800675c <_vfiprintf_r+0x240>)
 8006536:	429d      	cmp	r5, r3
 8006538:	d11b      	bne.n	8006572 <_vfiprintf_r+0x56>
 800653a:	6875      	ldr	r5, [r6, #4]
 800653c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800653e:	07d9      	lsls	r1, r3, #31
 8006540:	d405      	bmi.n	800654e <_vfiprintf_r+0x32>
 8006542:	89ab      	ldrh	r3, [r5, #12]
 8006544:	059a      	lsls	r2, r3, #22
 8006546:	d402      	bmi.n	800654e <_vfiprintf_r+0x32>
 8006548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800654a:	f000 fd3b 	bl	8006fc4 <__retarget_lock_acquire_recursive>
 800654e:	89ab      	ldrh	r3, [r5, #12]
 8006550:	071b      	lsls	r3, r3, #28
 8006552:	d501      	bpl.n	8006558 <_vfiprintf_r+0x3c>
 8006554:	692b      	ldr	r3, [r5, #16]
 8006556:	b9eb      	cbnz	r3, 8006594 <_vfiprintf_r+0x78>
 8006558:	4629      	mov	r1, r5
 800655a:	4630      	mov	r0, r6
 800655c:	f000 fb04 	bl	8006b68 <__swsetup_r>
 8006560:	b1c0      	cbz	r0, 8006594 <_vfiprintf_r+0x78>
 8006562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006564:	07dc      	lsls	r4, r3, #31
 8006566:	d50e      	bpl.n	8006586 <_vfiprintf_r+0x6a>
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	b01d      	add	sp, #116	; 0x74
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	4b7b      	ldr	r3, [pc, #492]	; (8006760 <_vfiprintf_r+0x244>)
 8006574:	429d      	cmp	r5, r3
 8006576:	d101      	bne.n	800657c <_vfiprintf_r+0x60>
 8006578:	68b5      	ldr	r5, [r6, #8]
 800657a:	e7df      	b.n	800653c <_vfiprintf_r+0x20>
 800657c:	4b79      	ldr	r3, [pc, #484]	; (8006764 <_vfiprintf_r+0x248>)
 800657e:	429d      	cmp	r5, r3
 8006580:	bf08      	it	eq
 8006582:	68f5      	ldreq	r5, [r6, #12]
 8006584:	e7da      	b.n	800653c <_vfiprintf_r+0x20>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	0598      	lsls	r0, r3, #22
 800658a:	d4ed      	bmi.n	8006568 <_vfiprintf_r+0x4c>
 800658c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800658e:	f000 fd1a 	bl	8006fc6 <__retarget_lock_release_recursive>
 8006592:	e7e9      	b.n	8006568 <_vfiprintf_r+0x4c>
 8006594:	2300      	movs	r3, #0
 8006596:	9309      	str	r3, [sp, #36]	; 0x24
 8006598:	2320      	movs	r3, #32
 800659a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800659e:	f8cd 800c 	str.w	r8, [sp, #12]
 80065a2:	2330      	movs	r3, #48	; 0x30
 80065a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006768 <_vfiprintf_r+0x24c>
 80065a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ac:	f04f 0901 	mov.w	r9, #1
 80065b0:	4623      	mov	r3, r4
 80065b2:	469a      	mov	sl, r3
 80065b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065b8:	b10a      	cbz	r2, 80065be <_vfiprintf_r+0xa2>
 80065ba:	2a25      	cmp	r2, #37	; 0x25
 80065bc:	d1f9      	bne.n	80065b2 <_vfiprintf_r+0x96>
 80065be:	ebba 0b04 	subs.w	fp, sl, r4
 80065c2:	d00b      	beq.n	80065dc <_vfiprintf_r+0xc0>
 80065c4:	465b      	mov	r3, fp
 80065c6:	4622      	mov	r2, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff ff93 	bl	80064f6 <__sfputs_r>
 80065d0:	3001      	adds	r0, #1
 80065d2:	f000 80aa 	beq.w	800672a <_vfiprintf_r+0x20e>
 80065d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d8:	445a      	add	r2, fp
 80065da:	9209      	str	r2, [sp, #36]	; 0x24
 80065dc:	f89a 3000 	ldrb.w	r3, [sl]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80a2 	beq.w	800672a <_vfiprintf_r+0x20e>
 80065e6:	2300      	movs	r3, #0
 80065e8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065f0:	f10a 0a01 	add.w	sl, sl, #1
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065fc:	931a      	str	r3, [sp, #104]	; 0x68
 80065fe:	4654      	mov	r4, sl
 8006600:	2205      	movs	r2, #5
 8006602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006606:	4858      	ldr	r0, [pc, #352]	; (8006768 <_vfiprintf_r+0x24c>)
 8006608:	f7f9 fdfa 	bl	8000200 <memchr>
 800660c:	9a04      	ldr	r2, [sp, #16]
 800660e:	b9d8      	cbnz	r0, 8006648 <_vfiprintf_r+0x12c>
 8006610:	06d1      	lsls	r1, r2, #27
 8006612:	bf44      	itt	mi
 8006614:	2320      	movmi	r3, #32
 8006616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800661a:	0713      	lsls	r3, r2, #28
 800661c:	bf44      	itt	mi
 800661e:	232b      	movmi	r3, #43	; 0x2b
 8006620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006624:	f89a 3000 	ldrb.w	r3, [sl]
 8006628:	2b2a      	cmp	r3, #42	; 0x2a
 800662a:	d015      	beq.n	8006658 <_vfiprintf_r+0x13c>
 800662c:	9a07      	ldr	r2, [sp, #28]
 800662e:	4654      	mov	r4, sl
 8006630:	2000      	movs	r0, #0
 8006632:	f04f 0c0a 	mov.w	ip, #10
 8006636:	4621      	mov	r1, r4
 8006638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800663c:	3b30      	subs	r3, #48	; 0x30
 800663e:	2b09      	cmp	r3, #9
 8006640:	d94e      	bls.n	80066e0 <_vfiprintf_r+0x1c4>
 8006642:	b1b0      	cbz	r0, 8006672 <_vfiprintf_r+0x156>
 8006644:	9207      	str	r2, [sp, #28]
 8006646:	e014      	b.n	8006672 <_vfiprintf_r+0x156>
 8006648:	eba0 0308 	sub.w	r3, r0, r8
 800664c:	fa09 f303 	lsl.w	r3, r9, r3
 8006650:	4313      	orrs	r3, r2
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	46a2      	mov	sl, r4
 8006656:	e7d2      	b.n	80065fe <_vfiprintf_r+0xe2>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	1d19      	adds	r1, r3, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	9103      	str	r1, [sp, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	bfbb      	ittet	lt
 8006664:	425b      	neglt	r3, r3
 8006666:	f042 0202 	orrlt.w	r2, r2, #2
 800666a:	9307      	strge	r3, [sp, #28]
 800666c:	9307      	strlt	r3, [sp, #28]
 800666e:	bfb8      	it	lt
 8006670:	9204      	strlt	r2, [sp, #16]
 8006672:	7823      	ldrb	r3, [r4, #0]
 8006674:	2b2e      	cmp	r3, #46	; 0x2e
 8006676:	d10c      	bne.n	8006692 <_vfiprintf_r+0x176>
 8006678:	7863      	ldrb	r3, [r4, #1]
 800667a:	2b2a      	cmp	r3, #42	; 0x2a
 800667c:	d135      	bne.n	80066ea <_vfiprintf_r+0x1ce>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	1d1a      	adds	r2, r3, #4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	9203      	str	r2, [sp, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	bfb8      	it	lt
 800668a:	f04f 33ff 	movlt.w	r3, #4294967295
 800668e:	3402      	adds	r4, #2
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006778 <_vfiprintf_r+0x25c>
 8006696:	7821      	ldrb	r1, [r4, #0]
 8006698:	2203      	movs	r2, #3
 800669a:	4650      	mov	r0, sl
 800669c:	f7f9 fdb0 	bl	8000200 <memchr>
 80066a0:	b140      	cbz	r0, 80066b4 <_vfiprintf_r+0x198>
 80066a2:	2340      	movs	r3, #64	; 0x40
 80066a4:	eba0 000a 	sub.w	r0, r0, sl
 80066a8:	fa03 f000 	lsl.w	r0, r3, r0
 80066ac:	9b04      	ldr	r3, [sp, #16]
 80066ae:	4303      	orrs	r3, r0
 80066b0:	3401      	adds	r4, #1
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b8:	482c      	ldr	r0, [pc, #176]	; (800676c <_vfiprintf_r+0x250>)
 80066ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066be:	2206      	movs	r2, #6
 80066c0:	f7f9 fd9e 	bl	8000200 <memchr>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d03f      	beq.n	8006748 <_vfiprintf_r+0x22c>
 80066c8:	4b29      	ldr	r3, [pc, #164]	; (8006770 <_vfiprintf_r+0x254>)
 80066ca:	bb1b      	cbnz	r3, 8006714 <_vfiprintf_r+0x1f8>
 80066cc:	9b03      	ldr	r3, [sp, #12]
 80066ce:	3307      	adds	r3, #7
 80066d0:	f023 0307 	bic.w	r3, r3, #7
 80066d4:	3308      	adds	r3, #8
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066da:	443b      	add	r3, r7
 80066dc:	9309      	str	r3, [sp, #36]	; 0x24
 80066de:	e767      	b.n	80065b0 <_vfiprintf_r+0x94>
 80066e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80066e4:	460c      	mov	r4, r1
 80066e6:	2001      	movs	r0, #1
 80066e8:	e7a5      	b.n	8006636 <_vfiprintf_r+0x11a>
 80066ea:	2300      	movs	r3, #0
 80066ec:	3401      	adds	r4, #1
 80066ee:	9305      	str	r3, [sp, #20]
 80066f0:	4619      	mov	r1, r3
 80066f2:	f04f 0c0a 	mov.w	ip, #10
 80066f6:	4620      	mov	r0, r4
 80066f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066fc:	3a30      	subs	r2, #48	; 0x30
 80066fe:	2a09      	cmp	r2, #9
 8006700:	d903      	bls.n	800670a <_vfiprintf_r+0x1ee>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0c5      	beq.n	8006692 <_vfiprintf_r+0x176>
 8006706:	9105      	str	r1, [sp, #20]
 8006708:	e7c3      	b.n	8006692 <_vfiprintf_r+0x176>
 800670a:	fb0c 2101 	mla	r1, ip, r1, r2
 800670e:	4604      	mov	r4, r0
 8006710:	2301      	movs	r3, #1
 8006712:	e7f0      	b.n	80066f6 <_vfiprintf_r+0x1da>
 8006714:	ab03      	add	r3, sp, #12
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	462a      	mov	r2, r5
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <_vfiprintf_r+0x258>)
 800671c:	a904      	add	r1, sp, #16
 800671e:	4630      	mov	r0, r6
 8006720:	f3af 8000 	nop.w
 8006724:	4607      	mov	r7, r0
 8006726:	1c78      	adds	r0, r7, #1
 8006728:	d1d6      	bne.n	80066d8 <_vfiprintf_r+0x1bc>
 800672a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800672c:	07d9      	lsls	r1, r3, #31
 800672e:	d405      	bmi.n	800673c <_vfiprintf_r+0x220>
 8006730:	89ab      	ldrh	r3, [r5, #12]
 8006732:	059a      	lsls	r2, r3, #22
 8006734:	d402      	bmi.n	800673c <_vfiprintf_r+0x220>
 8006736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006738:	f000 fc45 	bl	8006fc6 <__retarget_lock_release_recursive>
 800673c:	89ab      	ldrh	r3, [r5, #12]
 800673e:	065b      	lsls	r3, r3, #25
 8006740:	f53f af12 	bmi.w	8006568 <_vfiprintf_r+0x4c>
 8006744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006746:	e711      	b.n	800656c <_vfiprintf_r+0x50>
 8006748:	ab03      	add	r3, sp, #12
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	462a      	mov	r2, r5
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <_vfiprintf_r+0x258>)
 8006750:	a904      	add	r1, sp, #16
 8006752:	4630      	mov	r0, r6
 8006754:	f000 f880 	bl	8006858 <_printf_i>
 8006758:	e7e4      	b.n	8006724 <_vfiprintf_r+0x208>
 800675a:	bf00      	nop
 800675c:	08007650 	.word	0x08007650
 8006760:	08007670 	.word	0x08007670
 8006764:	08007630 	.word	0x08007630
 8006768:	080075fd 	.word	0x080075fd
 800676c:	08007607 	.word	0x08007607
 8006770:	00000000 	.word	0x00000000
 8006774:	080064f7 	.word	0x080064f7
 8006778:	08007603 	.word	0x08007603

0800677c <_printf_common>:
 800677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	4616      	mov	r6, r2
 8006782:	4699      	mov	r9, r3
 8006784:	688a      	ldr	r2, [r1, #8]
 8006786:	690b      	ldr	r3, [r1, #16]
 8006788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800678c:	4293      	cmp	r3, r2
 800678e:	bfb8      	it	lt
 8006790:	4613      	movlt	r3, r2
 8006792:	6033      	str	r3, [r6, #0]
 8006794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006798:	4607      	mov	r7, r0
 800679a:	460c      	mov	r4, r1
 800679c:	b10a      	cbz	r2, 80067a2 <_printf_common+0x26>
 800679e:	3301      	adds	r3, #1
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	0699      	lsls	r1, r3, #26
 80067a6:	bf42      	ittt	mi
 80067a8:	6833      	ldrmi	r3, [r6, #0]
 80067aa:	3302      	addmi	r3, #2
 80067ac:	6033      	strmi	r3, [r6, #0]
 80067ae:	6825      	ldr	r5, [r4, #0]
 80067b0:	f015 0506 	ands.w	r5, r5, #6
 80067b4:	d106      	bne.n	80067c4 <_printf_common+0x48>
 80067b6:	f104 0a19 	add.w	sl, r4, #25
 80067ba:	68e3      	ldr	r3, [r4, #12]
 80067bc:	6832      	ldr	r2, [r6, #0]
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	42ab      	cmp	r3, r5
 80067c2:	dc26      	bgt.n	8006812 <_printf_common+0x96>
 80067c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067c8:	1e13      	subs	r3, r2, #0
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	bf18      	it	ne
 80067ce:	2301      	movne	r3, #1
 80067d0:	0692      	lsls	r2, r2, #26
 80067d2:	d42b      	bmi.n	800682c <_printf_common+0xb0>
 80067d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067d8:	4649      	mov	r1, r9
 80067da:	4638      	mov	r0, r7
 80067dc:	47c0      	blx	r8
 80067de:	3001      	adds	r0, #1
 80067e0:	d01e      	beq.n	8006820 <_printf_common+0xa4>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	68e5      	ldr	r5, [r4, #12]
 80067e6:	6832      	ldr	r2, [r6, #0]
 80067e8:	f003 0306 	and.w	r3, r3, #6
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	bf08      	it	eq
 80067f0:	1aad      	subeq	r5, r5, r2
 80067f2:	68a3      	ldr	r3, [r4, #8]
 80067f4:	6922      	ldr	r2, [r4, #16]
 80067f6:	bf0c      	ite	eq
 80067f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067fc:	2500      	movne	r5, #0
 80067fe:	4293      	cmp	r3, r2
 8006800:	bfc4      	itt	gt
 8006802:	1a9b      	subgt	r3, r3, r2
 8006804:	18ed      	addgt	r5, r5, r3
 8006806:	2600      	movs	r6, #0
 8006808:	341a      	adds	r4, #26
 800680a:	42b5      	cmp	r5, r6
 800680c:	d11a      	bne.n	8006844 <_printf_common+0xc8>
 800680e:	2000      	movs	r0, #0
 8006810:	e008      	b.n	8006824 <_printf_common+0xa8>
 8006812:	2301      	movs	r3, #1
 8006814:	4652      	mov	r2, sl
 8006816:	4649      	mov	r1, r9
 8006818:	4638      	mov	r0, r7
 800681a:	47c0      	blx	r8
 800681c:	3001      	adds	r0, #1
 800681e:	d103      	bne.n	8006828 <_printf_common+0xac>
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006828:	3501      	adds	r5, #1
 800682a:	e7c6      	b.n	80067ba <_printf_common+0x3e>
 800682c:	18e1      	adds	r1, r4, r3
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	2030      	movs	r0, #48	; 0x30
 8006832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006836:	4422      	add	r2, r4
 8006838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800683c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006840:	3302      	adds	r3, #2
 8006842:	e7c7      	b.n	80067d4 <_printf_common+0x58>
 8006844:	2301      	movs	r3, #1
 8006846:	4622      	mov	r2, r4
 8006848:	4649      	mov	r1, r9
 800684a:	4638      	mov	r0, r7
 800684c:	47c0      	blx	r8
 800684e:	3001      	adds	r0, #1
 8006850:	d0e6      	beq.n	8006820 <_printf_common+0xa4>
 8006852:	3601      	adds	r6, #1
 8006854:	e7d9      	b.n	800680a <_printf_common+0x8e>
	...

08006858 <_printf_i>:
 8006858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	7e0f      	ldrb	r7, [r1, #24]
 800685e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006860:	2f78      	cmp	r7, #120	; 0x78
 8006862:	4691      	mov	r9, r2
 8006864:	4680      	mov	r8, r0
 8006866:	460c      	mov	r4, r1
 8006868:	469a      	mov	sl, r3
 800686a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800686e:	d807      	bhi.n	8006880 <_printf_i+0x28>
 8006870:	2f62      	cmp	r7, #98	; 0x62
 8006872:	d80a      	bhi.n	800688a <_printf_i+0x32>
 8006874:	2f00      	cmp	r7, #0
 8006876:	f000 80d8 	beq.w	8006a2a <_printf_i+0x1d2>
 800687a:	2f58      	cmp	r7, #88	; 0x58
 800687c:	f000 80a3 	beq.w	80069c6 <_printf_i+0x16e>
 8006880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006888:	e03a      	b.n	8006900 <_printf_i+0xa8>
 800688a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800688e:	2b15      	cmp	r3, #21
 8006890:	d8f6      	bhi.n	8006880 <_printf_i+0x28>
 8006892:	a101      	add	r1, pc, #4	; (adr r1, 8006898 <_printf_i+0x40>)
 8006894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006898:	080068f1 	.word	0x080068f1
 800689c:	08006905 	.word	0x08006905
 80068a0:	08006881 	.word	0x08006881
 80068a4:	08006881 	.word	0x08006881
 80068a8:	08006881 	.word	0x08006881
 80068ac:	08006881 	.word	0x08006881
 80068b0:	08006905 	.word	0x08006905
 80068b4:	08006881 	.word	0x08006881
 80068b8:	08006881 	.word	0x08006881
 80068bc:	08006881 	.word	0x08006881
 80068c0:	08006881 	.word	0x08006881
 80068c4:	08006a11 	.word	0x08006a11
 80068c8:	08006935 	.word	0x08006935
 80068cc:	080069f3 	.word	0x080069f3
 80068d0:	08006881 	.word	0x08006881
 80068d4:	08006881 	.word	0x08006881
 80068d8:	08006a33 	.word	0x08006a33
 80068dc:	08006881 	.word	0x08006881
 80068e0:	08006935 	.word	0x08006935
 80068e4:	08006881 	.word	0x08006881
 80068e8:	08006881 	.word	0x08006881
 80068ec:	080069fb 	.word	0x080069fb
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	1d1a      	adds	r2, r3, #4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	602a      	str	r2, [r5, #0]
 80068f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006900:	2301      	movs	r3, #1
 8006902:	e0a3      	b.n	8006a4c <_printf_i+0x1f4>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	6829      	ldr	r1, [r5, #0]
 8006908:	0606      	lsls	r6, r0, #24
 800690a:	f101 0304 	add.w	r3, r1, #4
 800690e:	d50a      	bpl.n	8006926 <_printf_i+0xce>
 8006910:	680e      	ldr	r6, [r1, #0]
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	2e00      	cmp	r6, #0
 8006916:	da03      	bge.n	8006920 <_printf_i+0xc8>
 8006918:	232d      	movs	r3, #45	; 0x2d
 800691a:	4276      	negs	r6, r6
 800691c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006920:	485e      	ldr	r0, [pc, #376]	; (8006a9c <_printf_i+0x244>)
 8006922:	230a      	movs	r3, #10
 8006924:	e019      	b.n	800695a <_printf_i+0x102>
 8006926:	680e      	ldr	r6, [r1, #0]
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800692e:	bf18      	it	ne
 8006930:	b236      	sxthne	r6, r6
 8006932:	e7ef      	b.n	8006914 <_printf_i+0xbc>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	6820      	ldr	r0, [r4, #0]
 8006938:	1d19      	adds	r1, r3, #4
 800693a:	6029      	str	r1, [r5, #0]
 800693c:	0601      	lsls	r1, r0, #24
 800693e:	d501      	bpl.n	8006944 <_printf_i+0xec>
 8006940:	681e      	ldr	r6, [r3, #0]
 8006942:	e002      	b.n	800694a <_printf_i+0xf2>
 8006944:	0646      	lsls	r6, r0, #25
 8006946:	d5fb      	bpl.n	8006940 <_printf_i+0xe8>
 8006948:	881e      	ldrh	r6, [r3, #0]
 800694a:	4854      	ldr	r0, [pc, #336]	; (8006a9c <_printf_i+0x244>)
 800694c:	2f6f      	cmp	r7, #111	; 0x6f
 800694e:	bf0c      	ite	eq
 8006950:	2308      	moveq	r3, #8
 8006952:	230a      	movne	r3, #10
 8006954:	2100      	movs	r1, #0
 8006956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800695a:	6865      	ldr	r5, [r4, #4]
 800695c:	60a5      	str	r5, [r4, #8]
 800695e:	2d00      	cmp	r5, #0
 8006960:	bfa2      	ittt	ge
 8006962:	6821      	ldrge	r1, [r4, #0]
 8006964:	f021 0104 	bicge.w	r1, r1, #4
 8006968:	6021      	strge	r1, [r4, #0]
 800696a:	b90e      	cbnz	r6, 8006970 <_printf_i+0x118>
 800696c:	2d00      	cmp	r5, #0
 800696e:	d04d      	beq.n	8006a0c <_printf_i+0x1b4>
 8006970:	4615      	mov	r5, r2
 8006972:	fbb6 f1f3 	udiv	r1, r6, r3
 8006976:	fb03 6711 	mls	r7, r3, r1, r6
 800697a:	5dc7      	ldrb	r7, [r0, r7]
 800697c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006980:	4637      	mov	r7, r6
 8006982:	42bb      	cmp	r3, r7
 8006984:	460e      	mov	r6, r1
 8006986:	d9f4      	bls.n	8006972 <_printf_i+0x11a>
 8006988:	2b08      	cmp	r3, #8
 800698a:	d10b      	bne.n	80069a4 <_printf_i+0x14c>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	07de      	lsls	r6, r3, #31
 8006990:	d508      	bpl.n	80069a4 <_printf_i+0x14c>
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	6861      	ldr	r1, [r4, #4]
 8006996:	4299      	cmp	r1, r3
 8006998:	bfde      	ittt	le
 800699a:	2330      	movle	r3, #48	; 0x30
 800699c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069a4:	1b52      	subs	r2, r2, r5
 80069a6:	6122      	str	r2, [r4, #16]
 80069a8:	f8cd a000 	str.w	sl, [sp]
 80069ac:	464b      	mov	r3, r9
 80069ae:	aa03      	add	r2, sp, #12
 80069b0:	4621      	mov	r1, r4
 80069b2:	4640      	mov	r0, r8
 80069b4:	f7ff fee2 	bl	800677c <_printf_common>
 80069b8:	3001      	adds	r0, #1
 80069ba:	d14c      	bne.n	8006a56 <_printf_i+0x1fe>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	b004      	add	sp, #16
 80069c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c6:	4835      	ldr	r0, [pc, #212]	; (8006a9c <_printf_i+0x244>)
 80069c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069cc:	6829      	ldr	r1, [r5, #0]
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80069d4:	6029      	str	r1, [r5, #0]
 80069d6:	061d      	lsls	r5, r3, #24
 80069d8:	d514      	bpl.n	8006a04 <_printf_i+0x1ac>
 80069da:	07df      	lsls	r7, r3, #31
 80069dc:	bf44      	itt	mi
 80069de:	f043 0320 	orrmi.w	r3, r3, #32
 80069e2:	6023      	strmi	r3, [r4, #0]
 80069e4:	b91e      	cbnz	r6, 80069ee <_printf_i+0x196>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f023 0320 	bic.w	r3, r3, #32
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	2310      	movs	r3, #16
 80069f0:	e7b0      	b.n	8006954 <_printf_i+0xfc>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	f043 0320 	orr.w	r3, r3, #32
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	2378      	movs	r3, #120	; 0x78
 80069fc:	4828      	ldr	r0, [pc, #160]	; (8006aa0 <_printf_i+0x248>)
 80069fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a02:	e7e3      	b.n	80069cc <_printf_i+0x174>
 8006a04:	0659      	lsls	r1, r3, #25
 8006a06:	bf48      	it	mi
 8006a08:	b2b6      	uxthmi	r6, r6
 8006a0a:	e7e6      	b.n	80069da <_printf_i+0x182>
 8006a0c:	4615      	mov	r5, r2
 8006a0e:	e7bb      	b.n	8006988 <_printf_i+0x130>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	6826      	ldr	r6, [r4, #0]
 8006a14:	6961      	ldr	r1, [r4, #20]
 8006a16:	1d18      	adds	r0, r3, #4
 8006a18:	6028      	str	r0, [r5, #0]
 8006a1a:	0635      	lsls	r5, r6, #24
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	d501      	bpl.n	8006a24 <_printf_i+0x1cc>
 8006a20:	6019      	str	r1, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <_printf_i+0x1d2>
 8006a24:	0670      	lsls	r0, r6, #25
 8006a26:	d5fb      	bpl.n	8006a20 <_printf_i+0x1c8>
 8006a28:	8019      	strh	r1, [r3, #0]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	4615      	mov	r5, r2
 8006a30:	e7ba      	b.n	80069a8 <_printf_i+0x150>
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	1d1a      	adds	r2, r3, #4
 8006a36:	602a      	str	r2, [r5, #0]
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	6862      	ldr	r2, [r4, #4]
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f7f9 fbde 	bl	8000200 <memchr>
 8006a44:	b108      	cbz	r0, 8006a4a <_printf_i+0x1f2>
 8006a46:	1b40      	subs	r0, r0, r5
 8006a48:	6060      	str	r0, [r4, #4]
 8006a4a:	6863      	ldr	r3, [r4, #4]
 8006a4c:	6123      	str	r3, [r4, #16]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a54:	e7a8      	b.n	80069a8 <_printf_i+0x150>
 8006a56:	6923      	ldr	r3, [r4, #16]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	47d0      	blx	sl
 8006a60:	3001      	adds	r0, #1
 8006a62:	d0ab      	beq.n	80069bc <_printf_i+0x164>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	079b      	lsls	r3, r3, #30
 8006a68:	d413      	bmi.n	8006a92 <_printf_i+0x23a>
 8006a6a:	68e0      	ldr	r0, [r4, #12]
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	4298      	cmp	r0, r3
 8006a70:	bfb8      	it	lt
 8006a72:	4618      	movlt	r0, r3
 8006a74:	e7a4      	b.n	80069c0 <_printf_i+0x168>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4632      	mov	r2, r6
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	47d0      	blx	sl
 8006a80:	3001      	adds	r0, #1
 8006a82:	d09b      	beq.n	80069bc <_printf_i+0x164>
 8006a84:	3501      	adds	r5, #1
 8006a86:	68e3      	ldr	r3, [r4, #12]
 8006a88:	9903      	ldr	r1, [sp, #12]
 8006a8a:	1a5b      	subs	r3, r3, r1
 8006a8c:	42ab      	cmp	r3, r5
 8006a8e:	dcf2      	bgt.n	8006a76 <_printf_i+0x21e>
 8006a90:	e7eb      	b.n	8006a6a <_printf_i+0x212>
 8006a92:	2500      	movs	r5, #0
 8006a94:	f104 0619 	add.w	r6, r4, #25
 8006a98:	e7f5      	b.n	8006a86 <_printf_i+0x22e>
 8006a9a:	bf00      	nop
 8006a9c:	0800760e 	.word	0x0800760e
 8006aa0:	0800761f 	.word	0x0800761f

08006aa4 <_sbrk_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d06      	ldr	r5, [pc, #24]	; (8006ac0 <_sbrk_r+0x1c>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fb f9a6 	bl	8001e00 <_sbrk>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_sbrk_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_sbrk_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	200008c0 	.word	0x200008c0

08006ac4 <__swbuf_r>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	460e      	mov	r6, r1
 8006ac8:	4614      	mov	r4, r2
 8006aca:	4605      	mov	r5, r0
 8006acc:	b118      	cbz	r0, 8006ad6 <__swbuf_r+0x12>
 8006ace:	6983      	ldr	r3, [r0, #24]
 8006ad0:	b90b      	cbnz	r3, 8006ad6 <__swbuf_r+0x12>
 8006ad2:	f000 f9d9 	bl	8006e88 <__sinit>
 8006ad6:	4b21      	ldr	r3, [pc, #132]	; (8006b5c <__swbuf_r+0x98>)
 8006ad8:	429c      	cmp	r4, r3
 8006ada:	d12b      	bne.n	8006b34 <__swbuf_r+0x70>
 8006adc:	686c      	ldr	r4, [r5, #4]
 8006ade:	69a3      	ldr	r3, [r4, #24]
 8006ae0:	60a3      	str	r3, [r4, #8]
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	071a      	lsls	r2, r3, #28
 8006ae6:	d52f      	bpl.n	8006b48 <__swbuf_r+0x84>
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	b36b      	cbz	r3, 8006b48 <__swbuf_r+0x84>
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	1ac0      	subs	r0, r0, r3
 8006af2:	6963      	ldr	r3, [r4, #20]
 8006af4:	b2f6      	uxtb	r6, r6
 8006af6:	4283      	cmp	r3, r0
 8006af8:	4637      	mov	r7, r6
 8006afa:	dc04      	bgt.n	8006b06 <__swbuf_r+0x42>
 8006afc:	4621      	mov	r1, r4
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 f92e 	bl	8006d60 <_fflush_r>
 8006b04:	bb30      	cbnz	r0, 8006b54 <__swbuf_r+0x90>
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	6022      	str	r2, [r4, #0]
 8006b12:	701e      	strb	r6, [r3, #0]
 8006b14:	6963      	ldr	r3, [r4, #20]
 8006b16:	3001      	adds	r0, #1
 8006b18:	4283      	cmp	r3, r0
 8006b1a:	d004      	beq.n	8006b26 <__swbuf_r+0x62>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	07db      	lsls	r3, r3, #31
 8006b20:	d506      	bpl.n	8006b30 <__swbuf_r+0x6c>
 8006b22:	2e0a      	cmp	r6, #10
 8006b24:	d104      	bne.n	8006b30 <__swbuf_r+0x6c>
 8006b26:	4621      	mov	r1, r4
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f000 f919 	bl	8006d60 <_fflush_r>
 8006b2e:	b988      	cbnz	r0, 8006b54 <__swbuf_r+0x90>
 8006b30:	4638      	mov	r0, r7
 8006b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b34:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <__swbuf_r+0x9c>)
 8006b36:	429c      	cmp	r4, r3
 8006b38:	d101      	bne.n	8006b3e <__swbuf_r+0x7a>
 8006b3a:	68ac      	ldr	r4, [r5, #8]
 8006b3c:	e7cf      	b.n	8006ade <__swbuf_r+0x1a>
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <__swbuf_r+0xa0>)
 8006b40:	429c      	cmp	r4, r3
 8006b42:	bf08      	it	eq
 8006b44:	68ec      	ldreq	r4, [r5, #12]
 8006b46:	e7ca      	b.n	8006ade <__swbuf_r+0x1a>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 f80c 	bl	8006b68 <__swsetup_r>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d0cb      	beq.n	8006aec <__swbuf_r+0x28>
 8006b54:	f04f 37ff 	mov.w	r7, #4294967295
 8006b58:	e7ea      	b.n	8006b30 <__swbuf_r+0x6c>
 8006b5a:	bf00      	nop
 8006b5c:	08007650 	.word	0x08007650
 8006b60:	08007670 	.word	0x08007670
 8006b64:	08007630 	.word	0x08007630

08006b68 <__swsetup_r>:
 8006b68:	4b32      	ldr	r3, [pc, #200]	; (8006c34 <__swsetup_r+0xcc>)
 8006b6a:	b570      	push	{r4, r5, r6, lr}
 8006b6c:	681d      	ldr	r5, [r3, #0]
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460c      	mov	r4, r1
 8006b72:	b125      	cbz	r5, 8006b7e <__swsetup_r+0x16>
 8006b74:	69ab      	ldr	r3, [r5, #24]
 8006b76:	b913      	cbnz	r3, 8006b7e <__swsetup_r+0x16>
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 f985 	bl	8006e88 <__sinit>
 8006b7e:	4b2e      	ldr	r3, [pc, #184]	; (8006c38 <__swsetup_r+0xd0>)
 8006b80:	429c      	cmp	r4, r3
 8006b82:	d10f      	bne.n	8006ba4 <__swsetup_r+0x3c>
 8006b84:	686c      	ldr	r4, [r5, #4]
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b8c:	0719      	lsls	r1, r3, #28
 8006b8e:	d42c      	bmi.n	8006bea <__swsetup_r+0x82>
 8006b90:	06dd      	lsls	r5, r3, #27
 8006b92:	d411      	bmi.n	8006bb8 <__swsetup_r+0x50>
 8006b94:	2309      	movs	r3, #9
 8006b96:	6033      	str	r3, [r6, #0]
 8006b98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	e03e      	b.n	8006c22 <__swsetup_r+0xba>
 8006ba4:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <__swsetup_r+0xd4>)
 8006ba6:	429c      	cmp	r4, r3
 8006ba8:	d101      	bne.n	8006bae <__swsetup_r+0x46>
 8006baa:	68ac      	ldr	r4, [r5, #8]
 8006bac:	e7eb      	b.n	8006b86 <__swsetup_r+0x1e>
 8006bae:	4b24      	ldr	r3, [pc, #144]	; (8006c40 <__swsetup_r+0xd8>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	bf08      	it	eq
 8006bb4:	68ec      	ldreq	r4, [r5, #12]
 8006bb6:	e7e6      	b.n	8006b86 <__swsetup_r+0x1e>
 8006bb8:	0758      	lsls	r0, r3, #29
 8006bba:	d512      	bpl.n	8006be2 <__swsetup_r+0x7a>
 8006bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bbe:	b141      	cbz	r1, 8006bd2 <__swsetup_r+0x6a>
 8006bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	d002      	beq.n	8006bce <__swsetup_r+0x66>
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f7ff fa41 	bl	8006050 <_free_r>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6063      	str	r3, [r4, #4]
 8006bde:	6923      	ldr	r3, [r4, #16]
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	f043 0308 	orr.w	r3, r3, #8
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	b94b      	cbnz	r3, 8006c02 <__swsetup_r+0x9a>
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf8:	d003      	beq.n	8006c02 <__swsetup_r+0x9a>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f000 fa09 	bl	8007014 <__smakebuf_r>
 8006c02:	89a0      	ldrh	r0, [r4, #12]
 8006c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c08:	f010 0301 	ands.w	r3, r0, #1
 8006c0c:	d00a      	beq.n	8006c24 <__swsetup_r+0xbc>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60a3      	str	r3, [r4, #8]
 8006c12:	6963      	ldr	r3, [r4, #20]
 8006c14:	425b      	negs	r3, r3
 8006c16:	61a3      	str	r3, [r4, #24]
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	b943      	cbnz	r3, 8006c2e <__swsetup_r+0xc6>
 8006c1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c20:	d1ba      	bne.n	8006b98 <__swsetup_r+0x30>
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	0781      	lsls	r1, r0, #30
 8006c26:	bf58      	it	pl
 8006c28:	6963      	ldrpl	r3, [r4, #20]
 8006c2a:	60a3      	str	r3, [r4, #8]
 8006c2c:	e7f4      	b.n	8006c18 <__swsetup_r+0xb0>
 8006c2e:	2000      	movs	r0, #0
 8006c30:	e7f7      	b.n	8006c22 <__swsetup_r+0xba>
 8006c32:	bf00      	nop
 8006c34:	2000000c 	.word	0x2000000c
 8006c38:	08007650 	.word	0x08007650
 8006c3c:	08007670 	.word	0x08007670
 8006c40:	08007630 	.word	0x08007630

08006c44 <abort>:
 8006c44:	b508      	push	{r3, lr}
 8006c46:	2006      	movs	r0, #6
 8006c48:	f000 fab0 	bl	80071ac <raise>
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	f7fb f85f 	bl	8001d10 <_exit>
	...

08006c54 <__sflush_r>:
 8006c54:	898a      	ldrh	r2, [r1, #12]
 8006c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	0710      	lsls	r0, r2, #28
 8006c5e:	460c      	mov	r4, r1
 8006c60:	d458      	bmi.n	8006d14 <__sflush_r+0xc0>
 8006c62:	684b      	ldr	r3, [r1, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dc05      	bgt.n	8006c74 <__sflush_r+0x20>
 8006c68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dc02      	bgt.n	8006c74 <__sflush_r+0x20>
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c76:	2e00      	cmp	r6, #0
 8006c78:	d0f9      	beq.n	8006c6e <__sflush_r+0x1a>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c80:	682f      	ldr	r7, [r5, #0]
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	d032      	beq.n	8006cec <__sflush_r+0x98>
 8006c86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	075a      	lsls	r2, r3, #29
 8006c8c:	d505      	bpl.n	8006c9a <__sflush_r+0x46>
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	1ac0      	subs	r0, r0, r3
 8006c92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c94:	b10b      	cbz	r3, 8006c9a <__sflush_r+0x46>
 8006c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c98:	1ac0      	subs	r0, r0, r3
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ca0:	6a21      	ldr	r1, [r4, #32]
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	47b0      	blx	r6
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	d106      	bne.n	8006cba <__sflush_r+0x66>
 8006cac:	6829      	ldr	r1, [r5, #0]
 8006cae:	291d      	cmp	r1, #29
 8006cb0:	d82c      	bhi.n	8006d0c <__sflush_r+0xb8>
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <__sflush_r+0x108>)
 8006cb4:	40ca      	lsrs	r2, r1
 8006cb6:	07d6      	lsls	r6, r2, #31
 8006cb8:	d528      	bpl.n	8006d0c <__sflush_r+0xb8>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	6062      	str	r2, [r4, #4]
 8006cbe:	04d9      	lsls	r1, r3, #19
 8006cc0:	6922      	ldr	r2, [r4, #16]
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	d504      	bpl.n	8006cd0 <__sflush_r+0x7c>
 8006cc6:	1c42      	adds	r2, r0, #1
 8006cc8:	d101      	bne.n	8006cce <__sflush_r+0x7a>
 8006cca:	682b      	ldr	r3, [r5, #0]
 8006ccc:	b903      	cbnz	r3, 8006cd0 <__sflush_r+0x7c>
 8006cce:	6560      	str	r0, [r4, #84]	; 0x54
 8006cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cd2:	602f      	str	r7, [r5, #0]
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	d0ca      	beq.n	8006c6e <__sflush_r+0x1a>
 8006cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	d002      	beq.n	8006ce6 <__sflush_r+0x92>
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f7ff f9b5 	bl	8006050 <_free_r>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8006cea:	e7c1      	b.n	8006c70 <__sflush_r+0x1c>
 8006cec:	6a21      	ldr	r1, [r4, #32]
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b0      	blx	r6
 8006cf4:	1c41      	adds	r1, r0, #1
 8006cf6:	d1c7      	bne.n	8006c88 <__sflush_r+0x34>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0c4      	beq.n	8006c88 <__sflush_r+0x34>
 8006cfe:	2b1d      	cmp	r3, #29
 8006d00:	d001      	beq.n	8006d06 <__sflush_r+0xb2>
 8006d02:	2b16      	cmp	r3, #22
 8006d04:	d101      	bne.n	8006d0a <__sflush_r+0xb6>
 8006d06:	602f      	str	r7, [r5, #0]
 8006d08:	e7b1      	b.n	8006c6e <__sflush_r+0x1a>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	e7ad      	b.n	8006c70 <__sflush_r+0x1c>
 8006d14:	690f      	ldr	r7, [r1, #16]
 8006d16:	2f00      	cmp	r7, #0
 8006d18:	d0a9      	beq.n	8006c6e <__sflush_r+0x1a>
 8006d1a:	0793      	lsls	r3, r2, #30
 8006d1c:	680e      	ldr	r6, [r1, #0]
 8006d1e:	bf08      	it	eq
 8006d20:	694b      	ldreq	r3, [r1, #20]
 8006d22:	600f      	str	r7, [r1, #0]
 8006d24:	bf18      	it	ne
 8006d26:	2300      	movne	r3, #0
 8006d28:	eba6 0807 	sub.w	r8, r6, r7
 8006d2c:	608b      	str	r3, [r1, #8]
 8006d2e:	f1b8 0f00 	cmp.w	r8, #0
 8006d32:	dd9c      	ble.n	8006c6e <__sflush_r+0x1a>
 8006d34:	6a21      	ldr	r1, [r4, #32]
 8006d36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d38:	4643      	mov	r3, r8
 8006d3a:	463a      	mov	r2, r7
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b0      	blx	r6
 8006d40:	2800      	cmp	r0, #0
 8006d42:	dc06      	bgt.n	8006d52 <__sflush_r+0xfe>
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	e78e      	b.n	8006c70 <__sflush_r+0x1c>
 8006d52:	4407      	add	r7, r0
 8006d54:	eba8 0800 	sub.w	r8, r8, r0
 8006d58:	e7e9      	b.n	8006d2e <__sflush_r+0xda>
 8006d5a:	bf00      	nop
 8006d5c:	20400001 	.word	0x20400001

08006d60 <_fflush_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	690b      	ldr	r3, [r1, #16]
 8006d64:	4605      	mov	r5, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	b913      	cbnz	r3, 8006d70 <_fflush_r+0x10>
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	b118      	cbz	r0, 8006d7a <_fflush_r+0x1a>
 8006d72:	6983      	ldr	r3, [r0, #24]
 8006d74:	b90b      	cbnz	r3, 8006d7a <_fflush_r+0x1a>
 8006d76:	f000 f887 	bl	8006e88 <__sinit>
 8006d7a:	4b14      	ldr	r3, [pc, #80]	; (8006dcc <_fflush_r+0x6c>)
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	d11b      	bne.n	8006db8 <_fflush_r+0x58>
 8006d80:	686c      	ldr	r4, [r5, #4]
 8006d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0ef      	beq.n	8006d6a <_fflush_r+0xa>
 8006d8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d8c:	07d0      	lsls	r0, r2, #31
 8006d8e:	d404      	bmi.n	8006d9a <_fflush_r+0x3a>
 8006d90:	0599      	lsls	r1, r3, #22
 8006d92:	d402      	bmi.n	8006d9a <_fflush_r+0x3a>
 8006d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d96:	f000 f915 	bl	8006fc4 <__retarget_lock_acquire_recursive>
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	f7ff ff59 	bl	8006c54 <__sflush_r>
 8006da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006da4:	07da      	lsls	r2, r3, #31
 8006da6:	4605      	mov	r5, r0
 8006da8:	d4e0      	bmi.n	8006d6c <_fflush_r+0xc>
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	059b      	lsls	r3, r3, #22
 8006dae:	d4dd      	bmi.n	8006d6c <_fflush_r+0xc>
 8006db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db2:	f000 f908 	bl	8006fc6 <__retarget_lock_release_recursive>
 8006db6:	e7d9      	b.n	8006d6c <_fflush_r+0xc>
 8006db8:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <_fflush_r+0x70>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	d101      	bne.n	8006dc2 <_fflush_r+0x62>
 8006dbe:	68ac      	ldr	r4, [r5, #8]
 8006dc0:	e7df      	b.n	8006d82 <_fflush_r+0x22>
 8006dc2:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <_fflush_r+0x74>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	bf08      	it	eq
 8006dc8:	68ec      	ldreq	r4, [r5, #12]
 8006dca:	e7da      	b.n	8006d82 <_fflush_r+0x22>
 8006dcc:	08007650 	.word	0x08007650
 8006dd0:	08007670 	.word	0x08007670
 8006dd4:	08007630 	.word	0x08007630

08006dd8 <std>:
 8006dd8:	2300      	movs	r3, #0
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	4604      	mov	r4, r0
 8006dde:	e9c0 3300 	strd	r3, r3, [r0]
 8006de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de6:	6083      	str	r3, [r0, #8]
 8006de8:	8181      	strh	r1, [r0, #12]
 8006dea:	6643      	str	r3, [r0, #100]	; 0x64
 8006dec:	81c2      	strh	r2, [r0, #14]
 8006dee:	6183      	str	r3, [r0, #24]
 8006df0:	4619      	mov	r1, r3
 8006df2:	2208      	movs	r2, #8
 8006df4:	305c      	adds	r0, #92	; 0x5c
 8006df6:	f7fe ffe3 	bl	8005dc0 <memset>
 8006dfa:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <std+0x38>)
 8006dfc:	6263      	str	r3, [r4, #36]	; 0x24
 8006dfe:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <std+0x3c>)
 8006e00:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e02:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <std+0x40>)
 8006e04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e06:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <std+0x44>)
 8006e08:	6224      	str	r4, [r4, #32]
 8006e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	bf00      	nop
 8006e10:	080071e5 	.word	0x080071e5
 8006e14:	08007207 	.word	0x08007207
 8006e18:	0800723f 	.word	0x0800723f
 8006e1c:	08007263 	.word	0x08007263

08006e20 <_cleanup_r>:
 8006e20:	4901      	ldr	r1, [pc, #4]	; (8006e28 <_cleanup_r+0x8>)
 8006e22:	f000 b8af 	b.w	8006f84 <_fwalk_reent>
 8006e26:	bf00      	nop
 8006e28:	08006d61 	.word	0x08006d61

08006e2c <__sfmoreglue>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	2268      	movs	r2, #104	; 0x68
 8006e30:	1e4d      	subs	r5, r1, #1
 8006e32:	4355      	muls	r5, r2
 8006e34:	460e      	mov	r6, r1
 8006e36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e3a:	f7ff f975 	bl	8006128 <_malloc_r>
 8006e3e:	4604      	mov	r4, r0
 8006e40:	b140      	cbz	r0, 8006e54 <__sfmoreglue+0x28>
 8006e42:	2100      	movs	r1, #0
 8006e44:	e9c0 1600 	strd	r1, r6, [r0]
 8006e48:	300c      	adds	r0, #12
 8006e4a:	60a0      	str	r0, [r4, #8]
 8006e4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e50:	f7fe ffb6 	bl	8005dc0 <memset>
 8006e54:	4620      	mov	r0, r4
 8006e56:	bd70      	pop	{r4, r5, r6, pc}

08006e58 <__sfp_lock_acquire>:
 8006e58:	4801      	ldr	r0, [pc, #4]	; (8006e60 <__sfp_lock_acquire+0x8>)
 8006e5a:	f000 b8b3 	b.w	8006fc4 <__retarget_lock_acquire_recursive>
 8006e5e:	bf00      	nop
 8006e60:	200008bd 	.word	0x200008bd

08006e64 <__sfp_lock_release>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__sfp_lock_release+0x8>)
 8006e66:	f000 b8ae 	b.w	8006fc6 <__retarget_lock_release_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	200008bd 	.word	0x200008bd

08006e70 <__sinit_lock_acquire>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__sinit_lock_acquire+0x8>)
 8006e72:	f000 b8a7 	b.w	8006fc4 <__retarget_lock_acquire_recursive>
 8006e76:	bf00      	nop
 8006e78:	200008be 	.word	0x200008be

08006e7c <__sinit_lock_release>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__sinit_lock_release+0x8>)
 8006e7e:	f000 b8a2 	b.w	8006fc6 <__retarget_lock_release_recursive>
 8006e82:	bf00      	nop
 8006e84:	200008be 	.word	0x200008be

08006e88 <__sinit>:
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	f7ff fff0 	bl	8006e70 <__sinit_lock_acquire>
 8006e90:	69a3      	ldr	r3, [r4, #24]
 8006e92:	b11b      	cbz	r3, 8006e9c <__sinit+0x14>
 8006e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e98:	f7ff bff0 	b.w	8006e7c <__sinit_lock_release>
 8006e9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ea0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <__sinit+0x68>)
 8006ea4:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <__sinit+0x6c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006eaa:	42a3      	cmp	r3, r4
 8006eac:	bf04      	itt	eq
 8006eae:	2301      	moveq	r3, #1
 8006eb0:	61a3      	streq	r3, [r4, #24]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 f820 	bl	8006ef8 <__sfp>
 8006eb8:	6060      	str	r0, [r4, #4]
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 f81c 	bl	8006ef8 <__sfp>
 8006ec0:	60a0      	str	r0, [r4, #8]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 f818 	bl	8006ef8 <__sfp>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	60e0      	str	r0, [r4, #12]
 8006ecc:	2104      	movs	r1, #4
 8006ece:	6860      	ldr	r0, [r4, #4]
 8006ed0:	f7ff ff82 	bl	8006dd8 <std>
 8006ed4:	68a0      	ldr	r0, [r4, #8]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	2109      	movs	r1, #9
 8006eda:	f7ff ff7d 	bl	8006dd8 <std>
 8006ede:	68e0      	ldr	r0, [r4, #12]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	2112      	movs	r1, #18
 8006ee4:	f7ff ff78 	bl	8006dd8 <std>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	61a3      	str	r3, [r4, #24]
 8006eec:	e7d2      	b.n	8006e94 <__sinit+0xc>
 8006eee:	bf00      	nop
 8006ef0:	08007448 	.word	0x08007448
 8006ef4:	08006e21 	.word	0x08006e21

08006ef8 <__sfp>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	4607      	mov	r7, r0
 8006efc:	f7ff ffac 	bl	8006e58 <__sfp_lock_acquire>
 8006f00:	4b1e      	ldr	r3, [pc, #120]	; (8006f7c <__sfp+0x84>)
 8006f02:	681e      	ldr	r6, [r3, #0]
 8006f04:	69b3      	ldr	r3, [r6, #24]
 8006f06:	b913      	cbnz	r3, 8006f0e <__sfp+0x16>
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff ffbd 	bl	8006e88 <__sinit>
 8006f0e:	3648      	adds	r6, #72	; 0x48
 8006f10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	d503      	bpl.n	8006f20 <__sfp+0x28>
 8006f18:	6833      	ldr	r3, [r6, #0]
 8006f1a:	b30b      	cbz	r3, 8006f60 <__sfp+0x68>
 8006f1c:	6836      	ldr	r6, [r6, #0]
 8006f1e:	e7f7      	b.n	8006f10 <__sfp+0x18>
 8006f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f24:	b9d5      	cbnz	r5, 8006f5c <__sfp+0x64>
 8006f26:	4b16      	ldr	r3, [pc, #88]	; (8006f80 <__sfp+0x88>)
 8006f28:	60e3      	str	r3, [r4, #12]
 8006f2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f2e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f30:	f000 f847 	bl	8006fc2 <__retarget_lock_init_recursive>
 8006f34:	f7ff ff96 	bl	8006e64 <__sfp_lock_release>
 8006f38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f40:	6025      	str	r5, [r4, #0]
 8006f42:	61a5      	str	r5, [r4, #24]
 8006f44:	2208      	movs	r2, #8
 8006f46:	4629      	mov	r1, r5
 8006f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f4c:	f7fe ff38 	bl	8005dc0 <memset>
 8006f50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f58:	4620      	mov	r0, r4
 8006f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f5c:	3468      	adds	r4, #104	; 0x68
 8006f5e:	e7d9      	b.n	8006f14 <__sfp+0x1c>
 8006f60:	2104      	movs	r1, #4
 8006f62:	4638      	mov	r0, r7
 8006f64:	f7ff ff62 	bl	8006e2c <__sfmoreglue>
 8006f68:	4604      	mov	r4, r0
 8006f6a:	6030      	str	r0, [r6, #0]
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d1d5      	bne.n	8006f1c <__sfp+0x24>
 8006f70:	f7ff ff78 	bl	8006e64 <__sfp_lock_release>
 8006f74:	230c      	movs	r3, #12
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	e7ee      	b.n	8006f58 <__sfp+0x60>
 8006f7a:	bf00      	nop
 8006f7c:	08007448 	.word	0x08007448
 8006f80:	ffff0001 	.word	0xffff0001

08006f84 <_fwalk_reent>:
 8006f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f88:	4606      	mov	r6, r0
 8006f8a:	4688      	mov	r8, r1
 8006f8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f90:	2700      	movs	r7, #0
 8006f92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f96:	f1b9 0901 	subs.w	r9, r9, #1
 8006f9a:	d505      	bpl.n	8006fa8 <_fwalk_reent+0x24>
 8006f9c:	6824      	ldr	r4, [r4, #0]
 8006f9e:	2c00      	cmp	r4, #0
 8006fa0:	d1f7      	bne.n	8006f92 <_fwalk_reent+0xe>
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa8:	89ab      	ldrh	r3, [r5, #12]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d907      	bls.n	8006fbe <_fwalk_reent+0x3a>
 8006fae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	d003      	beq.n	8006fbe <_fwalk_reent+0x3a>
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4630      	mov	r0, r6
 8006fba:	47c0      	blx	r8
 8006fbc:	4307      	orrs	r7, r0
 8006fbe:	3568      	adds	r5, #104	; 0x68
 8006fc0:	e7e9      	b.n	8006f96 <_fwalk_reent+0x12>

08006fc2 <__retarget_lock_init_recursive>:
 8006fc2:	4770      	bx	lr

08006fc4 <__retarget_lock_acquire_recursive>:
 8006fc4:	4770      	bx	lr

08006fc6 <__retarget_lock_release_recursive>:
 8006fc6:	4770      	bx	lr

08006fc8 <__swhatbuf_r>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	460e      	mov	r6, r1
 8006fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	b096      	sub	sp, #88	; 0x58
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	461d      	mov	r5, r3
 8006fd8:	da08      	bge.n	8006fec <__swhatbuf_r+0x24>
 8006fda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	602a      	str	r2, [r5, #0]
 8006fe2:	061a      	lsls	r2, r3, #24
 8006fe4:	d410      	bmi.n	8007008 <__swhatbuf_r+0x40>
 8006fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fea:	e00e      	b.n	800700a <__swhatbuf_r+0x42>
 8006fec:	466a      	mov	r2, sp
 8006fee:	f000 f95f 	bl	80072b0 <_fstat_r>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	dbf1      	blt.n	8006fda <__swhatbuf_r+0x12>
 8006ff6:	9a01      	ldr	r2, [sp, #4]
 8006ff8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ffc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007000:	425a      	negs	r2, r3
 8007002:	415a      	adcs	r2, r3
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	e7ee      	b.n	8006fe6 <__swhatbuf_r+0x1e>
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	2000      	movs	r0, #0
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	b016      	add	sp, #88	; 0x58
 8007010:	bd70      	pop	{r4, r5, r6, pc}
	...

08007014 <__smakebuf_r>:
 8007014:	898b      	ldrh	r3, [r1, #12]
 8007016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007018:	079d      	lsls	r5, r3, #30
 800701a:	4606      	mov	r6, r0
 800701c:	460c      	mov	r4, r1
 800701e:	d507      	bpl.n	8007030 <__smakebuf_r+0x1c>
 8007020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	6123      	str	r3, [r4, #16]
 8007028:	2301      	movs	r3, #1
 800702a:	6163      	str	r3, [r4, #20]
 800702c:	b002      	add	sp, #8
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	ab01      	add	r3, sp, #4
 8007032:	466a      	mov	r2, sp
 8007034:	f7ff ffc8 	bl	8006fc8 <__swhatbuf_r>
 8007038:	9900      	ldr	r1, [sp, #0]
 800703a:	4605      	mov	r5, r0
 800703c:	4630      	mov	r0, r6
 800703e:	f7ff f873 	bl	8006128 <_malloc_r>
 8007042:	b948      	cbnz	r0, 8007058 <__smakebuf_r+0x44>
 8007044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007048:	059a      	lsls	r2, r3, #22
 800704a:	d4ef      	bmi.n	800702c <__smakebuf_r+0x18>
 800704c:	f023 0303 	bic.w	r3, r3, #3
 8007050:	f043 0302 	orr.w	r3, r3, #2
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	e7e3      	b.n	8007020 <__smakebuf_r+0xc>
 8007058:	4b0d      	ldr	r3, [pc, #52]	; (8007090 <__smakebuf_r+0x7c>)
 800705a:	62b3      	str	r3, [r6, #40]	; 0x28
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	6020      	str	r0, [r4, #0]
 8007060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	9b00      	ldr	r3, [sp, #0]
 8007068:	6163      	str	r3, [r4, #20]
 800706a:	9b01      	ldr	r3, [sp, #4]
 800706c:	6120      	str	r0, [r4, #16]
 800706e:	b15b      	cbz	r3, 8007088 <__smakebuf_r+0x74>
 8007070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007074:	4630      	mov	r0, r6
 8007076:	f000 f92d 	bl	80072d4 <_isatty_r>
 800707a:	b128      	cbz	r0, 8007088 <__smakebuf_r+0x74>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f023 0303 	bic.w	r3, r3, #3
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	89a0      	ldrh	r0, [r4, #12]
 800708a:	4305      	orrs	r5, r0
 800708c:	81a5      	strh	r5, [r4, #12]
 800708e:	e7cd      	b.n	800702c <__smakebuf_r+0x18>
 8007090:	08006e21 	.word	0x08006e21

08007094 <memcpy>:
 8007094:	440a      	add	r2, r1
 8007096:	4291      	cmp	r1, r2
 8007098:	f100 33ff 	add.w	r3, r0, #4294967295
 800709c:	d100      	bne.n	80070a0 <memcpy+0xc>
 800709e:	4770      	bx	lr
 80070a0:	b510      	push	{r4, lr}
 80070a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070aa:	4291      	cmp	r1, r2
 80070ac:	d1f9      	bne.n	80070a2 <memcpy+0xe>
 80070ae:	bd10      	pop	{r4, pc}

080070b0 <memmove>:
 80070b0:	4288      	cmp	r0, r1
 80070b2:	b510      	push	{r4, lr}
 80070b4:	eb01 0402 	add.w	r4, r1, r2
 80070b8:	d902      	bls.n	80070c0 <memmove+0x10>
 80070ba:	4284      	cmp	r4, r0
 80070bc:	4623      	mov	r3, r4
 80070be:	d807      	bhi.n	80070d0 <memmove+0x20>
 80070c0:	1e43      	subs	r3, r0, #1
 80070c2:	42a1      	cmp	r1, r4
 80070c4:	d008      	beq.n	80070d8 <memmove+0x28>
 80070c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ce:	e7f8      	b.n	80070c2 <memmove+0x12>
 80070d0:	4402      	add	r2, r0
 80070d2:	4601      	mov	r1, r0
 80070d4:	428a      	cmp	r2, r1
 80070d6:	d100      	bne.n	80070da <memmove+0x2a>
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070e2:	e7f7      	b.n	80070d4 <memmove+0x24>

080070e4 <__malloc_lock>:
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <__malloc_lock+0x8>)
 80070e6:	f7ff bf6d 	b.w	8006fc4 <__retarget_lock_acquire_recursive>
 80070ea:	bf00      	nop
 80070ec:	200008bc 	.word	0x200008bc

080070f0 <__malloc_unlock>:
 80070f0:	4801      	ldr	r0, [pc, #4]	; (80070f8 <__malloc_unlock+0x8>)
 80070f2:	f7ff bf68 	b.w	8006fc6 <__retarget_lock_release_recursive>
 80070f6:	bf00      	nop
 80070f8:	200008bc 	.word	0x200008bc

080070fc <_realloc_r>:
 80070fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	4680      	mov	r8, r0
 8007102:	4614      	mov	r4, r2
 8007104:	460e      	mov	r6, r1
 8007106:	b921      	cbnz	r1, 8007112 <_realloc_r+0x16>
 8007108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800710c:	4611      	mov	r1, r2
 800710e:	f7ff b80b 	b.w	8006128 <_malloc_r>
 8007112:	b92a      	cbnz	r2, 8007120 <_realloc_r+0x24>
 8007114:	f7fe ff9c 	bl	8006050 <_free_r>
 8007118:	4625      	mov	r5, r4
 800711a:	4628      	mov	r0, r5
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007120:	f000 f8fa 	bl	8007318 <_malloc_usable_size_r>
 8007124:	4284      	cmp	r4, r0
 8007126:	4607      	mov	r7, r0
 8007128:	d802      	bhi.n	8007130 <_realloc_r+0x34>
 800712a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800712e:	d812      	bhi.n	8007156 <_realloc_r+0x5a>
 8007130:	4621      	mov	r1, r4
 8007132:	4640      	mov	r0, r8
 8007134:	f7fe fff8 	bl	8006128 <_malloc_r>
 8007138:	4605      	mov	r5, r0
 800713a:	2800      	cmp	r0, #0
 800713c:	d0ed      	beq.n	800711a <_realloc_r+0x1e>
 800713e:	42bc      	cmp	r4, r7
 8007140:	4622      	mov	r2, r4
 8007142:	4631      	mov	r1, r6
 8007144:	bf28      	it	cs
 8007146:	463a      	movcs	r2, r7
 8007148:	f7ff ffa4 	bl	8007094 <memcpy>
 800714c:	4631      	mov	r1, r6
 800714e:	4640      	mov	r0, r8
 8007150:	f7fe ff7e 	bl	8006050 <_free_r>
 8007154:	e7e1      	b.n	800711a <_realloc_r+0x1e>
 8007156:	4635      	mov	r5, r6
 8007158:	e7df      	b.n	800711a <_realloc_r+0x1e>

0800715a <_raise_r>:
 800715a:	291f      	cmp	r1, #31
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	d904      	bls.n	800716e <_raise_r+0x14>
 8007164:	2316      	movs	r3, #22
 8007166:	6003      	str	r3, [r0, #0]
 8007168:	f04f 30ff 	mov.w	r0, #4294967295
 800716c:	bd38      	pop	{r3, r4, r5, pc}
 800716e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007170:	b112      	cbz	r2, 8007178 <_raise_r+0x1e>
 8007172:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007176:	b94b      	cbnz	r3, 800718c <_raise_r+0x32>
 8007178:	4620      	mov	r0, r4
 800717a:	f000 f831 	bl	80071e0 <_getpid_r>
 800717e:	462a      	mov	r2, r5
 8007180:	4601      	mov	r1, r0
 8007182:	4620      	mov	r0, r4
 8007184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007188:	f000 b818 	b.w	80071bc <_kill_r>
 800718c:	2b01      	cmp	r3, #1
 800718e:	d00a      	beq.n	80071a6 <_raise_r+0x4c>
 8007190:	1c59      	adds	r1, r3, #1
 8007192:	d103      	bne.n	800719c <_raise_r+0x42>
 8007194:	2316      	movs	r3, #22
 8007196:	6003      	str	r3, [r0, #0]
 8007198:	2001      	movs	r0, #1
 800719a:	e7e7      	b.n	800716c <_raise_r+0x12>
 800719c:	2400      	movs	r4, #0
 800719e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071a2:	4628      	mov	r0, r5
 80071a4:	4798      	blx	r3
 80071a6:	2000      	movs	r0, #0
 80071a8:	e7e0      	b.n	800716c <_raise_r+0x12>
	...

080071ac <raise>:
 80071ac:	4b02      	ldr	r3, [pc, #8]	; (80071b8 <raise+0xc>)
 80071ae:	4601      	mov	r1, r0
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	f7ff bfd2 	b.w	800715a <_raise_r>
 80071b6:	bf00      	nop
 80071b8:	2000000c 	.word	0x2000000c

080071bc <_kill_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d07      	ldr	r5, [pc, #28]	; (80071dc <_kill_r+0x20>)
 80071c0:	2300      	movs	r3, #0
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	f7fa fd91 	bl	8001cf0 <_kill>
 80071ce:	1c43      	adds	r3, r0, #1
 80071d0:	d102      	bne.n	80071d8 <_kill_r+0x1c>
 80071d2:	682b      	ldr	r3, [r5, #0]
 80071d4:	b103      	cbz	r3, 80071d8 <_kill_r+0x1c>
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	bd38      	pop	{r3, r4, r5, pc}
 80071da:	bf00      	nop
 80071dc:	200008c0 	.word	0x200008c0

080071e0 <_getpid_r>:
 80071e0:	f7fa bd7e 	b.w	8001ce0 <_getpid>

080071e4 <__sread>:
 80071e4:	b510      	push	{r4, lr}
 80071e6:	460c      	mov	r4, r1
 80071e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ec:	f000 f89c 	bl	8007328 <_read_r>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	bfab      	itete	ge
 80071f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071f6:	89a3      	ldrhlt	r3, [r4, #12]
 80071f8:	181b      	addge	r3, r3, r0
 80071fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071fe:	bfac      	ite	ge
 8007200:	6563      	strge	r3, [r4, #84]	; 0x54
 8007202:	81a3      	strhlt	r3, [r4, #12]
 8007204:	bd10      	pop	{r4, pc}

08007206 <__swrite>:
 8007206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720a:	461f      	mov	r7, r3
 800720c:	898b      	ldrh	r3, [r1, #12]
 800720e:	05db      	lsls	r3, r3, #23
 8007210:	4605      	mov	r5, r0
 8007212:	460c      	mov	r4, r1
 8007214:	4616      	mov	r6, r2
 8007216:	d505      	bpl.n	8007224 <__swrite+0x1e>
 8007218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721c:	2302      	movs	r3, #2
 800721e:	2200      	movs	r2, #0
 8007220:	f000 f868 	bl	80072f4 <_lseek_r>
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	4632      	mov	r2, r6
 8007232:	463b      	mov	r3, r7
 8007234:	4628      	mov	r0, r5
 8007236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800723a:	f000 b817 	b.w	800726c <_write_r>

0800723e <__sseek>:
 800723e:	b510      	push	{r4, lr}
 8007240:	460c      	mov	r4, r1
 8007242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007246:	f000 f855 	bl	80072f4 <_lseek_r>
 800724a:	1c43      	adds	r3, r0, #1
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	bf15      	itete	ne
 8007250:	6560      	strne	r0, [r4, #84]	; 0x54
 8007252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800725a:	81a3      	strheq	r3, [r4, #12]
 800725c:	bf18      	it	ne
 800725e:	81a3      	strhne	r3, [r4, #12]
 8007260:	bd10      	pop	{r4, pc}

08007262 <__sclose>:
 8007262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007266:	f000 b813 	b.w	8007290 <_close_r>
	...

0800726c <_write_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d07      	ldr	r5, [pc, #28]	; (800728c <_write_r+0x20>)
 8007270:	4604      	mov	r4, r0
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	2200      	movs	r2, #0
 8007278:	602a      	str	r2, [r5, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	f7fa fd6f 	bl	8001d5e <_write>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_write_r+0x1e>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_write_r+0x1e>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	200008c0 	.word	0x200008c0

08007290 <_close_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4d06      	ldr	r5, [pc, #24]	; (80072ac <_close_r+0x1c>)
 8007294:	2300      	movs	r3, #0
 8007296:	4604      	mov	r4, r0
 8007298:	4608      	mov	r0, r1
 800729a:	602b      	str	r3, [r5, #0]
 800729c:	f7fa fd7b 	bl	8001d96 <_close>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_close_r+0x1a>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_close_r+0x1a>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	200008c0 	.word	0x200008c0

080072b0 <_fstat_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4d07      	ldr	r5, [pc, #28]	; (80072d0 <_fstat_r+0x20>)
 80072b4:	2300      	movs	r3, #0
 80072b6:	4604      	mov	r4, r0
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	602b      	str	r3, [r5, #0]
 80072be:	f7fa fd76 	bl	8001dae <_fstat>
 80072c2:	1c43      	adds	r3, r0, #1
 80072c4:	d102      	bne.n	80072cc <_fstat_r+0x1c>
 80072c6:	682b      	ldr	r3, [r5, #0]
 80072c8:	b103      	cbz	r3, 80072cc <_fstat_r+0x1c>
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	bd38      	pop	{r3, r4, r5, pc}
 80072ce:	bf00      	nop
 80072d0:	200008c0 	.word	0x200008c0

080072d4 <_isatty_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d06      	ldr	r5, [pc, #24]	; (80072f0 <_isatty_r+0x1c>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	f7fa fd75 	bl	8001dce <_isatty>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_isatty_r+0x1a>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_isatty_r+0x1a>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	200008c0 	.word	0x200008c0

080072f4 <_lseek_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d07      	ldr	r5, [pc, #28]	; (8007314 <_lseek_r+0x20>)
 80072f8:	4604      	mov	r4, r0
 80072fa:	4608      	mov	r0, r1
 80072fc:	4611      	mov	r1, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	602a      	str	r2, [r5, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	f7fa fd6e 	bl	8001de4 <_lseek>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_lseek_r+0x1e>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_lseek_r+0x1e>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	200008c0 	.word	0x200008c0

08007318 <_malloc_usable_size_r>:
 8007318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731c:	1f18      	subs	r0, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfbc      	itt	lt
 8007322:	580b      	ldrlt	r3, [r1, r0]
 8007324:	18c0      	addlt	r0, r0, r3
 8007326:	4770      	bx	lr

08007328 <_read_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4d07      	ldr	r5, [pc, #28]	; (8007348 <_read_r+0x20>)
 800732c:	4604      	mov	r4, r0
 800732e:	4608      	mov	r0, r1
 8007330:	4611      	mov	r1, r2
 8007332:	2200      	movs	r2, #0
 8007334:	602a      	str	r2, [r5, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	f7fa fcf4 	bl	8001d24 <_read>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_read_r+0x1e>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_read_r+0x1e>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	200008c0 	.word	0x200008c0

0800734c <_init>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr

08007358 <_fini>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	bf00      	nop
 800735c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735e:	bc08      	pop	{r3}
 8007360:	469e      	mov	lr, r3
 8007362:	4770      	bx	lr
